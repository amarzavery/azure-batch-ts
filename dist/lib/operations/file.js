"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const msRest = require("ms-rest-js");
const Mappers = require("../models/mappers");
const WebResource = msRest.WebResource;
/** Class representing a File. */
class File {
    /**
     * Create a File.
     * @param {BatchServiceClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @summary Deletes the specified task file from the compute node where the
     * task ran.
     *
     * @param {string} jobId The ID of the job that contains the task.
     *
     * @param {string} taskId The ID of the task whose file you want to delete.
     *
     * @param {string} filePath The path to the task file or directory that you
     * want to delete.
     *
     * @param {FileDeleteFromTaskOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
            let fileDeleteFromTaskOptions = (options && options.fileDeleteFromTaskOptions !== undefined) ? options.fileDeleteFromTaskOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
                    throw new Error('recursive must be of type boolean.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined) {
                    timeout = fileDeleteFromTaskOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined) {
                    clientRequestId = fileDeleteFromTaskOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined) {
                    returnClientRequestId = fileDeleteFromTaskOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined) {
                    ocpDate = fileDeleteFromTaskOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    filePath,
                    recursive,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "recursive",
                            mapper: {
                                serializedName: "recursive",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileDeleteFromTaskHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Returns the content of the specified task file.
     *
     * @param {string} jobId The ID of the job that contains the task.
     *
     * @param {string} taskId The ID of the task whose file you want to retrieve.
     *
     * @param {string} filePath The path to the task file that you want to get the
     * content of.
     *
     * @param {FileGetFromTaskOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileGetFromTaskOptions = (options && options.fileGetFromTaskOptions !== undefined) ? options.fileGetFromTaskOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ocpRange;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    timeout = fileGetFromTaskOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    clientRequestId = fileGetFromTaskOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    returnClientRequestId = fileGetFromTaskOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    ocpDate = fileGetFromTaskOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    ocpRange = fileGetFromTaskOptions.ocpRange;
                    if (ocpRange !== null && ocpRange !== undefined && typeof ocpRange.valueOf() !== 'string') {
                        throw new Error('ocpRange must be of type string.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    ifModifiedSince = fileGetFromTaskOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined) {
                    ifUnmodifiedSince = fileGetFromTaskOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            httpRequest.rawResponse = true;
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    filePath,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ocpRange,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ocpRange",
                            mapper: {
                                serializedName: "ocp-range",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Gets the properties of the specified task file.
     *
     * @param {string} jobId The ID of the job that contains the task.
     *
     * @param {string} taskId The ID of the task whose file you want to get the
     * properties of.
     *
     * @param {string} filePath The path to the task file that you want to get the
     * properties of.
     *
     * @param {FileGetPropertiesFromTaskOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPropertiesFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileGetPropertiesFromTaskOptions = (options && options.fileGetPropertiesFromTaskOptions !== undefined) ? options.fileGetPropertiesFromTaskOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    timeout = fileGetPropertiesFromTaskOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    clientRequestId = fileGetPropertiesFromTaskOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    returnClientRequestId = fileGetPropertiesFromTaskOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    ocpDate = fileGetPropertiesFromTaskOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    ifModifiedSince = fileGetPropertiesFromTaskOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined) {
                    ifUnmodifiedSince = fileGetPropertiesFromTaskOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    filePath,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "HEAD",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileGetPropertiesFromTaskHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Deletes the specified file from the compute node.
     *
     * @param {string} poolId The ID of the pool that contains the compute node.
     *
     * @param {string} nodeId The ID of the compute node from which you want to
     * delete the file.
     *
     * @param {string} filePath The path to the file or directory that you want to
     * delete.
     *
     * @param {FileDeleteFromComputeNodeOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
            let fileDeleteFromComputeNodeOptions = (options && options.fileDeleteFromComputeNodeOptions !== undefined) ? options.fileDeleteFromComputeNodeOptions : undefined;
            // Validate
            try {
                if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
                    throw new Error('poolId cannot be null or undefined and it must be of type string.');
                }
                if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
                    throw new Error('nodeId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
                    throw new Error('recursive must be of type boolean.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined) {
                    timeout = fileDeleteFromComputeNodeOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined) {
                    clientRequestId = fileDeleteFromComputeNodeOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined) {
                    returnClientRequestId = fileDeleteFromComputeNodeOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined) {
                    ocpDate = fileDeleteFromComputeNodeOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    poolId,
                    nodeId,
                    filePath,
                    recursive,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "poolId",
                            mapper: {
                                required: true,
                                serializedName: "poolId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "nodeId",
                            mapper: {
                                required: true,
                                serializedName: "nodeId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "recursive",
                            mapper: {
                                serializedName: "recursive",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileDeleteFromComputeNodeHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Returns the content of the specified compute node file.
     *
     * @param {string} poolId The ID of the pool that contains the compute node.
     *
     * @param {string} nodeId The ID of the compute node that contains the file.
     *
     * @param {string} filePath The path to the compute node file that you want to
     * get the content of.
     *
     * @param {FileGetFromComputeNodeOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileGetFromComputeNodeOptions = (options && options.fileGetFromComputeNodeOptions !== undefined) ? options.fileGetFromComputeNodeOptions : undefined;
            // Validate
            try {
                if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
                    throw new Error('poolId cannot be null or undefined and it must be of type string.');
                }
                if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
                    throw new Error('nodeId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ocpRange;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    timeout = fileGetFromComputeNodeOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    clientRequestId = fileGetFromComputeNodeOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    returnClientRequestId = fileGetFromComputeNodeOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    ocpDate = fileGetFromComputeNodeOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    ocpRange = fileGetFromComputeNodeOptions.ocpRange;
                    if (ocpRange !== null && ocpRange !== undefined && typeof ocpRange.valueOf() !== 'string') {
                        throw new Error('ocpRange must be of type string.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    ifModifiedSince = fileGetFromComputeNodeOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined) {
                    ifUnmodifiedSince = fileGetFromComputeNodeOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            httpRequest.rawResponse = true;
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    poolId,
                    nodeId,
                    filePath,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ocpRange,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "poolId",
                            mapper: {
                                required: true,
                                serializedName: "poolId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "nodeId",
                            mapper: {
                                required: true,
                                serializedName: "nodeId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ocpRange",
                            mapper: {
                                serializedName: "ocp-range",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Gets the properties of the specified compute node file.
     *
     * @param {string} poolId The ID of the pool that contains the compute node.
     *
     * @param {string} nodeId The ID of the compute node that contains the file.
     *
     * @param {string} filePath The path to the compute node file that you want to
     * get the properties of.
     *
     * @param {FileGetPropertiesFromComputeNodeOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getPropertiesFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileGetPropertiesFromComputeNodeOptions = (options && options.fileGetPropertiesFromComputeNodeOptions !== undefined) ? options.fileGetPropertiesFromComputeNodeOptions : undefined;
            // Validate
            try {
                if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
                    throw new Error('poolId cannot be null or undefined and it must be of type string.');
                }
                if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
                    throw new Error('nodeId cannot be null or undefined and it must be of type string.');
                }
                if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
                    throw new Error('filePath cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    timeout = fileGetPropertiesFromComputeNodeOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    clientRequestId = fileGetPropertiesFromComputeNodeOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    returnClientRequestId = fileGetPropertiesFromComputeNodeOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    ocpDate = fileGetPropertiesFromComputeNodeOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    ifModifiedSince = fileGetPropertiesFromComputeNodeOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined) {
                    ifUnmodifiedSince = fileGetPropertiesFromComputeNodeOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    poolId,
                    nodeId,
                    filePath,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "HEAD",
                    baseUrl: this.client.baseUri,
                    path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
                    urlParameters: [
                        {
                            parameterName: "poolId",
                            mapper: {
                                required: true,
                                serializedName: "poolId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "nodeId",
                            mapper: {
                                required: true,
                                serializedName: "nodeId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filePath",
                            mapper: {
                                required: true,
                                serializedName: "filePath",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileGetPropertiesFromComputeNodeHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists the files in a task's directory on its compute node.
     *
     * @param {string} jobId The ID of the job that contains the task.
     *
     * @param {string} taskId The ID of the task whose files you want to list.
     *
     * @param {FileListFromTaskOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFromTaskWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
            let fileListFromTaskOptions = (options && options.fileListFromTaskOptions !== undefined) ? options.fileListFromTaskOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
                    throw new Error('recursive must be of type boolean.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let filter;
            let maxResults;
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    filter = fileListFromTaskOptions.filter;
                    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
                        throw new Error('filter must be of type string.');
                    }
                }
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    maxResults = fileListFromTaskOptions.maxResults;
                    if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
                        throw new Error('maxResults must be of type number.');
                    }
                }
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    timeout = fileListFromTaskOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    clientRequestId = fileListFromTaskOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    returnClientRequestId = fileListFromTaskOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined) {
                    ocpDate = fileListFromTaskOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    recursive,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    filter,
                    maxResults,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/files",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "recursive",
                            mapper: {
                                serializedName: "recursive",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filter",
                            mapper: {
                                serializedName: "$filter",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "maxResults",
                            mapper: {
                                serializedName: "maxresults",
                                defaultValue: 1000,
                                constraints: {
                                    InclusiveMaximum: 1000,
                                    InclusiveMinimum: 1
                                },
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.NodeFileListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileListFromTaskHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists all of the files in task directories on the specified compute
     * node.
     *
     * @param {string} poolId The ID of the pool that contains the compute node.
     *
     * @param {string} nodeId The ID of the compute node whose files you want to
     * list.
     *
     * @param {FileListFromComputeNodeOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFromComputeNodeWithHttpOperationResponse(poolId, nodeId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
            let fileListFromComputeNodeOptions = (options && options.fileListFromComputeNodeOptions !== undefined) ? options.fileListFromComputeNodeOptions : undefined;
            // Validate
            try {
                if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
                    throw new Error('poolId cannot be null or undefined and it must be of type string.');
                }
                if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
                    throw new Error('nodeId cannot be null or undefined and it must be of type string.');
                }
                if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
                    throw new Error('recursive must be of type boolean.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let filter;
            let maxResults;
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    filter = fileListFromComputeNodeOptions.filter;
                    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
                        throw new Error('filter must be of type string.');
                    }
                }
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    maxResults = fileListFromComputeNodeOptions.maxResults;
                    if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
                        throw new Error('maxResults must be of type number.');
                    }
                }
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    timeout = fileListFromComputeNodeOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    clientRequestId = fileListFromComputeNodeOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    returnClientRequestId = fileListFromComputeNodeOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined) {
                    ocpDate = fileListFromComputeNodeOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    poolId,
                    nodeId,
                    recursive,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    filter,
                    maxResults,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "pools/{poolId}/nodes/{nodeId}/files",
                    urlParameters: [
                        {
                            parameterName: "poolId",
                            mapper: {
                                required: true,
                                serializedName: "poolId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "nodeId",
                            mapper: {
                                required: true,
                                serializedName: "nodeId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "recursive",
                            mapper: {
                                serializedName: "recursive",
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filter",
                            mapper: {
                                serializedName: "$filter",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "maxResults",
                            mapper: {
                                serializedName: "maxresults",
                                defaultValue: 1000,
                                constraints: {
                                    InclusiveMaximum: 1000,
                                    InclusiveMinimum: 1
                                },
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.NodeFileListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileListFromComputeNodeHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists the files in a task's directory on its compute node.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {FileListFromTaskNextOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFromTaskNextWithHttpOperationResponse(nextPageLink, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileListFromTaskNextOptions = (options && options.fileListFromTaskNextOptions !== undefined) ? options.fileListFromTaskNextOptions : undefined;
            // Validate
            try {
                if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                    throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined) {
                    clientRequestId = fileListFromTaskNextOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined) {
                    returnClientRequestId = fileListFromTaskNextOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined) {
                    ocpDate = fileListFromTaskNextOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    nextPageLink,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: "https://batch.core.windows.net",
                    path: "{nextLink}",
                    urlParameters: [
                        {
                            parameterName: "nextPageLink",
                            skipEncoding: true,
                            mapper: {
                                required: true,
                                serializedName: "nextLink",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.NodeFileListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileListFromTaskHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists all of the files in task directories on the specified compute
     * node.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {FileListFromComputeNodeNextOptionalParams} [options] Optional
     * Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listFromComputeNodeNextWithHttpOperationResponse(nextPageLink, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let fileListFromComputeNodeNextOptions = (options && options.fileListFromComputeNodeNextOptions !== undefined) ? options.fileListFromComputeNodeNextOptions : undefined;
            // Validate
            try {
                if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                    throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined) {
                    clientRequestId = fileListFromComputeNodeNextOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined) {
                    returnClientRequestId = fileListFromComputeNodeNextOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined) {
                    ocpDate = fileListFromComputeNodeNextOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    nextPageLink,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: "https://batch.core.windows.net",
                    path: "{nextLink}",
                    urlParameters: [
                        {
                            parameterName: "nextPageLink",
                            skipEncoding: true,
                            mapper: {
                                required: true,
                                serializedName: "nextLink",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.NodeFileListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.FileListFromComputeNodeHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    deleteFromTask(jobId, taskId, filePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    getPropertiesFromTask(jobId, taskId, filePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getPropertiesFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getPropertiesFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    deleteFromComputeNode(poolId, nodeId, filePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    getPropertiesFromComputeNode(poolId, nodeId, filePath, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getPropertiesFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getPropertiesFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listFromTask(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listFromTaskWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listFromTaskWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listFromComputeNode(poolId, nodeId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listFromComputeNodeWithHttpOperationResponse(poolId, nodeId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listFromComputeNodeWithHttpOperationResponse(poolId, nodeId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listFromTaskNext(nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listFromTaskNextWithHttpOperationResponse(nextPageLink, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listFromTaskNextWithHttpOperationResponse(nextPageLink, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listFromComputeNodeNext(nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listFromComputeNodeNextWithHttpOperationResponse(nextPageLink, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listFromComputeNodeNextWithHttpOperationResponse(nextPageLink, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.File = File;
//# sourceMappingURL=file.js.map