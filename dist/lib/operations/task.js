"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const msRest = require("ms-rest-js");
const Mappers = require("../models/mappers");
const WebResource = msRest.WebResource;
/** Class representing a Task. */
class Task {
    /**
     * Create a Task.
     * @param {BatchServiceClientContext} client Reference to the service client.
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * @summary Adds a task to the specified job.
     *
     * The maximum lifetime of a task from addition to completion is 7 days. If a
     * task has not completed within 7 days of being added it will be terminated by
     * the Batch service and left in whatever state it was in at that time.
     *
     * @param {string} jobId The ID of the job to which the task is to be added.
     *
     * @param {TaskAddParameter} task The task to be added.
     *
     * @param {TaskAddOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addWithHttpOperationResponse(jobId, task, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskAddOptions = (options && options.taskAddOptions !== undefined) ? options.taskAddOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (task === null || task === undefined) {
                    throw new Error('task cannot be null or undefined.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (taskAddOptions !== null && taskAddOptions !== undefined) {
                    timeout = taskAddOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskAddOptions !== null && taskAddOptions !== undefined) {
                    clientRequestId = taskAddOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskAddOptions !== null && taskAddOptions !== undefined) {
                    returnClientRequestId = taskAddOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskAddOptions !== null && taskAddOptions !== undefined) {
                    ocpDate = taskAddOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    task,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ],
                    requestBodyMapper: Mappers.TaskAddParameter,
                    requestBodyName: "task",
                    contentType: "application/json; odata=minimalmetadata; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 201) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 201) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskAddHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists all of the tasks that are associated with the specified job.
     *
     * For multi-instance tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param {string} jobId The ID of the job.
     *
     * @param {TaskListOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(jobId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskListOptions = (options && options.taskListOptions !== undefined) ? options.taskListOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let filter;
            let select;
            let expand;
            let maxResults;
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    filter = taskListOptions.filter;
                    if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
                        throw new Error('filter must be of type string.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    select = taskListOptions.select;
                    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
                        throw new Error('select must be of type string.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    expand = taskListOptions.expand;
                    if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                        throw new Error('expand must be of type string.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    maxResults = taskListOptions.maxResults;
                    if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
                        throw new Error('maxResults must be of type number.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    timeout = taskListOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    clientRequestId = taskListOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    returnClientRequestId = taskListOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskListOptions !== null && taskListOptions !== undefined) {
                    ocpDate = taskListOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    filter,
                    select,
                    expand,
                    maxResults,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "filter",
                            mapper: {
                                serializedName: "$filter",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "select",
                            mapper: {
                                serializedName: "$select",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "expand",
                            mapper: {
                                serializedName: "$expand",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "maxResults",
                            mapper: {
                                serializedName: "maxresults",
                                defaultValue: 1000,
                                constraints: {
                                    InclusiveMaximum: 1000,
                                    InclusiveMinimum: 1
                                },
                                type: {
                                    name: "Number"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.CloudTaskListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Adds a collection of tasks to the specified job.
     *
     * Note that each task must have a unique ID. The Batch service may not return
     * the results for each task in the same order the tasks were submitted in this
     * request. If the server times out or the connection is closed during the
     * request, the request may have been partially or fully processed, or not at
     * all. In such cases, the user should re-issue the request. Note that it is up
     * to the user to correctly handle failures when re-issuing a request. For
     * example, you should use the same task IDs during a retry so that if the
     * prior operation succeeded, the retry will not create extra tasks
     * unexpectedly. If the response contains any tasks which failed to add, a
     * client can retry the request. In a retry, it is most efficient to resubmit
     * only tasks that failed to add, and to omit tasks that were successfully
     * added on the first attempt. The maximum lifetime of a task from addition to
     * completion is 7 days. If a task has not completed within 7 days of being
     * added it will be terminated by the Batch service and left in whatever state
     * it was in at that time.
     *
     * @param {string} jobId The ID of the job to which the task collection is to
     * be added.
     *
     * @param {TaskAddCollectionParameter} taskCollection The tasks to be added.
     *
     * @param {TaskAddCollectionOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    addCollectionWithHttpOperationResponse(jobId, taskCollection, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskAddCollectionOptions = (options && options.taskAddCollectionOptions !== undefined) ? options.taskAddCollectionOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskCollection === null || taskCollection === undefined) {
                    throw new Error('taskCollection cannot be null or undefined.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined) {
                    timeout = taskAddCollectionOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined) {
                    clientRequestId = taskAddCollectionOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined) {
                    returnClientRequestId = taskAddCollectionOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined) {
                    ocpDate = taskAddCollectionOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskCollection,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/addtaskcollection",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ],
                    requestBodyMapper: Mappers.TaskAddCollectionParameter,
                    requestBodyName: "taskCollection",
                    contentType: "application/json; odata=minimalmetadata; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.TaskAddCollectionResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskAddCollectionHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Deletes a task from the specified job.
     *
     * When a task is deleted, all of the files in its directory on the compute
     * node where it ran are also deleted (regardless of the retention time). For
     * multi-instance tasks, the delete task operation applies synchronously to the
     * primary task; subtasks and their files are then deleted asynchronously in
     * the background.
     *
     * @param {string} jobId The ID of the job from which to delete the task.
     *
     * @param {string} taskId The ID of the task to delete.
     *
     * @param {TaskDeleteMethodOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskDeleteMethodOptions = (options && options.taskDeleteMethodOptions !== undefined) ? options.taskDeleteMethodOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifMatch;
            let ifNoneMatch;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    timeout = taskDeleteMethodOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    clientRequestId = taskDeleteMethodOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    returnClientRequestId = taskDeleteMethodOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    ocpDate = taskDeleteMethodOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    ifMatch = taskDeleteMethodOptions.ifMatch;
                    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
                        throw new Error('ifMatch must be of type string.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    ifNoneMatch = taskDeleteMethodOptions.ifNoneMatch;
                    if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
                        throw new Error('ifNoneMatch must be of type string.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    ifModifiedSince = taskDeleteMethodOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined) {
                    ifUnmodifiedSince = taskDeleteMethodOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifMatch,
                    ifNoneMatch,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "DELETE",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifMatch",
                            mapper: {
                                serializedName: "If-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifNoneMatch",
                            mapper: {
                                serializedName: "If-None-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskDeleteHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Gets information about the specified task.
     *
     * For multi-instance tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param {string} jobId The ID of the job that contains the task.
     *
     * @param {string} taskId The ID of the task to get information about.
     *
     * @param {TaskGetOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskGetOptions = (options && options.taskGetOptions !== undefined) ? options.taskGetOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let select;
            let expand;
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifMatch;
            let ifNoneMatch;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    select = taskGetOptions.select;
                    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
                        throw new Error('select must be of type string.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    expand = taskGetOptions.expand;
                    if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
                        throw new Error('expand must be of type string.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    timeout = taskGetOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    clientRequestId = taskGetOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    returnClientRequestId = taskGetOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    ocpDate = taskGetOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    ifMatch = taskGetOptions.ifMatch;
                    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
                        throw new Error('ifMatch must be of type string.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    ifNoneMatch = taskGetOptions.ifNoneMatch;
                    if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
                        throw new Error('ifNoneMatch must be of type string.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    ifModifiedSince = taskGetOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (taskGetOptions !== null && taskGetOptions !== undefined) {
                    ifUnmodifiedSince = taskGetOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    select,
                    expand,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifMatch,
                    ifNoneMatch,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "select",
                            mapper: {
                                serializedName: "$select",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "expand",
                            mapper: {
                                serializedName: "$expand",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifMatch",
                            mapper: {
                                serializedName: "If-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifNoneMatch",
                            mapper: {
                                serializedName: "If-None-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.CloudTask;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskGetHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * Updates the properties of the specified task.
     *
     * @param {string} jobId The ID of the job containing the task.
     *
     * @param {string} taskId The ID of the task to update.
     *
     * @param {TaskUpdateParameter} taskUpdateParameter The parameters for the
     * request.
     *
     * @param {TaskUpdateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(jobId, taskId, taskUpdateParameter, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskUpdateOptions = (options && options.taskUpdateOptions !== undefined) ? options.taskUpdateOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (taskUpdateParameter === null || taskUpdateParameter === undefined) {
                    throw new Error('taskUpdateParameter cannot be null or undefined.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifMatch;
            let ifNoneMatch;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    timeout = taskUpdateOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    clientRequestId = taskUpdateOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    returnClientRequestId = taskUpdateOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    ocpDate = taskUpdateOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    ifMatch = taskUpdateOptions.ifMatch;
                    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
                        throw new Error('ifMatch must be of type string.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    ifNoneMatch = taskUpdateOptions.ifNoneMatch;
                    if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
                        throw new Error('ifNoneMatch must be of type string.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    ifModifiedSince = taskUpdateOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (taskUpdateOptions !== null && taskUpdateOptions !== undefined) {
                    ifUnmodifiedSince = taskUpdateOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    taskUpdateParameter,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifMatch,
                    ifNoneMatch,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "PUT",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifMatch",
                            mapper: {
                                serializedName: "If-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifNoneMatch",
                            mapper: {
                                serializedName: "If-None-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ],
                    requestBodyMapper: Mappers.TaskUpdateParameter,
                    requestBodyName: "taskUpdateParameter",
                    contentType: "application/json; odata=minimalmetadata; charset=utf-8"
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskUpdateHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists all of the subtasks that are associated with the specified
     * multi-instance task.
     *
     * If the task is not a multi-instance task then this returns an empty
     * collection.
     *
     * @param {string} jobId The ID of the job.
     *
     * @param {string} taskId The ID of the task.
     *
     * @param {TaskListSubtasksOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listSubtasksWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskListSubtasksOptions = (options && options.taskListSubtasksOptions !== undefined) ? options.taskListSubtasksOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let select;
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined) {
                    select = taskListSubtasksOptions.select;
                    if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
                        throw new Error('select must be of type string.');
                    }
                }
                if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined) {
                    timeout = taskListSubtasksOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined) {
                    clientRequestId = taskListSubtasksOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined) {
                    returnClientRequestId = taskListSubtasksOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined) {
                    ocpDate = taskListSubtasksOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    select,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/subtasksinfo",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "select",
                            mapper: {
                                serializedName: "$select",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.CloudTaskListSubtasksResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskListSubtasksHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Terminates the specified task.
     *
     * When the task has been terminated, it moves to the completed state. For
     * multi-instance tasks, the terminate task operation applies synchronously to
     * the primary task; subtasks are then terminated asynchronously in the
     * background.
     *
     * @param {string} jobId The ID of the job containing the task.
     *
     * @param {string} taskId The ID of the task to terminate.
     *
     * @param {TaskTerminateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    terminateWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskTerminateOptions = (options && options.taskTerminateOptions !== undefined) ? options.taskTerminateOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifMatch;
            let ifNoneMatch;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    timeout = taskTerminateOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    clientRequestId = taskTerminateOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    returnClientRequestId = taskTerminateOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    ocpDate = taskTerminateOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    ifMatch = taskTerminateOptions.ifMatch;
                    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
                        throw new Error('ifMatch must be of type string.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    ifNoneMatch = taskTerminateOptions.ifNoneMatch;
                    if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
                        throw new Error('ifNoneMatch must be of type string.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    ifModifiedSince = taskTerminateOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (taskTerminateOptions !== null && taskTerminateOptions !== undefined) {
                    ifUnmodifiedSince = taskTerminateOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifMatch,
                    ifNoneMatch,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/terminate",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifMatch",
                            mapper: {
                                serializedName: "If-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifNoneMatch",
                            mapper: {
                                serializedName: "If-None-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 204) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 204) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskTerminateHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Reactivates a task, allowing it to run again even if its retry
     * count has been exhausted.
     *
     * Reactivation makes a task eligible to be retried again up to its maximum
     * retry count. The task's state is changed to active. As the task is no longer
     * in the completed state, any previous exit code or failure information is no
     * longer available after reactivation. Each time a task is reactivated, its
     * retry count is reset to 0. Reactivation will fail for tasks that are not
     * completed or that previously completed successfully (with an exit code of
     * 0). Additionally, it will fail if the job has completed (or is terminating
     * or deleting).
     *
     * @param {string} jobId The ID of the job containing the task.
     *
     * @param {string} taskId The ID of the task to reactivate.
     *
     * @param {TaskReactivateOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    reactivateWithHttpOperationResponse(jobId, taskId, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskReactivateOptions = (options && options.taskReactivateOptions !== undefined) ? options.taskReactivateOptions : undefined;
            // Validate
            try {
                if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
                    throw new Error('jobId cannot be null or undefined and it must be of type string.');
                }
                if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
                    throw new Error('taskId cannot be null or undefined and it must be of type string.');
                }
                if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
                    throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let timeout;
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            let ifMatch;
            let ifNoneMatch;
            let ifModifiedSince;
            let ifUnmodifiedSince;
            try {
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    timeout = taskReactivateOptions.timeout;
                    if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
                        throw new Error('timeout must be of type number.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    clientRequestId = taskReactivateOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    returnClientRequestId = taskReactivateOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    ocpDate = taskReactivateOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    ifMatch = taskReactivateOptions.ifMatch;
                    if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
                        throw new Error('ifMatch must be of type string.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    ifNoneMatch = taskReactivateOptions.ifNoneMatch;
                    if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
                        throw new Error('ifNoneMatch must be of type string.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    ifModifiedSince = taskReactivateOptions.ifModifiedSince;
                    if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
                        (typeof ifModifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince))))) {
                        throw new Error('ifModifiedSince must be of type date.');
                    }
                }
                if (taskReactivateOptions !== null && taskReactivateOptions !== undefined) {
                    ifUnmodifiedSince = taskReactivateOptions.ifUnmodifiedSince;
                    if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
                        (typeof ifUnmodifiedSince.valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince))))) {
                        throw new Error('ifUnmodifiedSince must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    jobId,
                    taskId,
                    "this.client.apiVersion": this.client.apiVersion,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    timeout,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate,
                    ifMatch,
                    ifNoneMatch,
                    ifModifiedSince,
                    ifUnmodifiedSince
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "POST",
                    baseUrl: this.client.baseUri,
                    path: "jobs/{jobId}/tasks/{taskId}/reactivate",
                    urlParameters: [
                        {
                            parameterName: "jobId",
                            mapper: {
                                required: true,
                                serializedName: "jobId",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "taskId",
                            mapper: {
                                required: true,
                                serializedName: "taskId",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    queryParameters: [
                        {
                            parameterName: "this.client.apiVersion",
                            mapper: {
                                required: true,
                                serializedName: "api-version",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "timeout",
                            mapper: {
                                serializedName: "timeout",
                                defaultValue: 30,
                                type: {
                                    name: "Number"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifMatch",
                            mapper: {
                                serializedName: "If-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifNoneMatch",
                            mapper: {
                                serializedName: "If-None-Match",
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "ifModifiedSince",
                            mapper: {
                                serializedName: "If-Modified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        },
                        {
                            parameterName: "ifUnmodifiedSince",
                            mapper: {
                                serializedName: "If-Unmodified-Since",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 204) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 204) {
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskReactivateHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    /**
     * @summary Lists all of the tasks that are associated with the specified job.
     *
     * For multi-instance tasks, information such as affinityId, executionInfo and
     * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
     * information about subtasks.
     *
     * @param {string} nextPageLink The NextLink from the previous successful call
     * to List operation.
     *
     * @param {TaskListNextOptionalParams} [options] Optional Parameters.
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listNextWithHttpOperationResponse(nextPageLink, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let client = this.client;
            let taskListNextOptions = (options && options.taskListNextOptions !== undefined) ? options.taskListNextOptions : undefined;
            // Validate
            try {
                if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
                    throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
                }
                if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
                    throw new Error('this.client.acceptLanguage must be of type string.');
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            let clientRequestId;
            let returnClientRequestId;
            let ocpDate;
            try {
                if (taskListNextOptions !== null && taskListNextOptions !== undefined) {
                    clientRequestId = taskListNextOptions.clientRequestId;
                    if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
                        throw new Error('clientRequestId must be of type string and must be a valid string.');
                    }
                }
                if (taskListNextOptions !== null && taskListNextOptions !== undefined) {
                    returnClientRequestId = taskListNextOptions.returnClientRequestId;
                    if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
                        throw new Error('returnClientRequestId must be of type boolean.');
                    }
                }
                if (taskListNextOptions !== null && taskListNextOptions !== undefined) {
                    ocpDate = taskListNextOptions.ocpDate;
                    if (ocpDate && !(ocpDate instanceof Date ||
                        (typeof ocpDate.valueOf() === 'string' && !isNaN(Date.parse(ocpDate))))) {
                        throw new Error('ocpDate must be of type date.');
                    }
                }
            }
            catch (error) {
                return Promise.reject(error);
            }
            // Create HTTP transport objects
            const httpRequest = new WebResource();
            let operationRes;
            try {
                const operationArguments = msRest.createOperationArguments({
                    nextPageLink,
                    "this.client.acceptLanguage": this.client.acceptLanguage,
                    clientRequestId,
                    returnClientRequestId,
                    ocpDate
                }, options);
                operationRes = yield client.sendOperationRequest(httpRequest, operationArguments, {
                    httpMethod: "GET",
                    baseUrl: "https://batch.core.windows.net",
                    path: "{nextLink}",
                    urlParameters: [
                        {
                            parameterName: "nextPageLink",
                            skipEncoding: true,
                            mapper: {
                                required: true,
                                serializedName: "nextLink",
                                type: {
                                    name: "String"
                                }
                            }
                        }
                    ],
                    headerParameters: [
                        {
                            parameterName: "this.client.acceptLanguage",
                            mapper: {
                                serializedName: "accept-language",
                                defaultValue: 'en-US',
                                type: {
                                    name: "String"
                                }
                            }
                        },
                        {
                            parameterName: "clientRequestId",
                            mapper: {
                                serializedName: "client-request-id",
                                type: {
                                    name: "Uuid"
                                }
                            }
                        },
                        {
                            parameterName: "returnClientRequestId",
                            mapper: {
                                serializedName: "return-client-request-id",
                                defaultValue: false,
                                type: {
                                    name: "Boolean"
                                }
                            }
                        },
                        {
                            parameterName: "ocpDate",
                            mapper: {
                                serializedName: "ocp-date",
                                type: {
                                    name: "DateTimeRfc1123"
                                }
                            }
                        }
                    ]
                });
                let statusCode = operationRes.status;
                if (statusCode !== 200) {
                    let error = new msRest.RestError(operationRes.bodyAsText);
                    error.statusCode = operationRes.status;
                    error.request = msRest.stripRequest(httpRequest);
                    error.response = msRest.stripResponse(operationRes);
                    let parsedErrorResponse = operationRes.parsedBody;
                    try {
                        if (parsedErrorResponse) {
                            let internalError = null;
                            if (parsedErrorResponse.error)
                                internalError = parsedErrorResponse.error;
                            error.code = internalError ? internalError.code : parsedErrorResponse.code;
                            error.message = internalError ? internalError.message : parsedErrorResponse.message;
                        }
                        if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
                            const resultMapper = Mappers.BatchError;
                            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
                        }
                    }
                    catch (defaultError) {
                        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                            `- "${operationRes.bodyAsText}" for the default response.`;
                        return Promise.reject(error);
                    }
                    return Promise.reject(error);
                }
                // Deserialize Response
                if (statusCode === 200) {
                    let parsedResponse = operationRes.parsedBody;
                    try {
                        if (parsedResponse !== null && parsedResponse !== undefined) {
                            const resultMapper = Mappers.CloudTaskListResult;
                            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
                        }
                    }
                    catch (error) {
                        let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
                        deserializationError.request = msRest.stripRequest(httpRequest);
                        deserializationError.response = msRest.stripResponse(operationRes);
                        return Promise.reject(deserializationError);
                    }
                    operationRes.parsedHeaders = client.serializer.deserialize(Mappers.TaskListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
                }
            }
            catch (err) {
                return Promise.reject(err);
            }
            return Promise.resolve(operationRes);
        });
    }
    add(jobId, task, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.addWithHttpOperationResponse(jobId, task, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.addWithHttpOperationResponse(jobId, task, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    list(jobId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listWithHttpOperationResponse(jobId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listWithHttpOperationResponse(jobId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    addCollection(jobId, taskCollection, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.addCollectionWithHttpOperationResponse(jobId, taskCollection, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.addCollectionWithHttpOperationResponse(jobId, taskCollection, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    deleteMethod(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.deleteMethodWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    get(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.getWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.getWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    update(jobId, taskId, taskUpdateParameter, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.updateWithHttpOperationResponse(jobId, taskId, taskUpdateParameter, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.updateWithHttpOperationResponse(jobId, taskId, taskUpdateParameter, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listSubtasks(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listSubtasksWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listSubtasksWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    terminate(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.terminateWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.terminateWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    reactivate(jobId, taskId, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.reactivateWithHttpOperationResponse(jobId, taskId, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.reactivateWithHttpOperationResponse(jobId, taskId, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
    listNext(nextPageLink, options, callback) {
        if (!callback && typeof options === 'function') {
            callback = options;
            options = undefined;
        }
        let cb = callback;
        if (!callback) {
            return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes) => {
                return Promise.resolve(operationRes.parsedBody);
            }).catch((err) => {
                return Promise.reject(err);
            });
        }
        else {
            msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err, data) => {
                if (err) {
                    return cb(err);
                }
                let result = data.parsedBody;
                return cb(err, result, data.request, data);
            });
        }
    }
}
exports.Task = Task;
//# sourceMappingURL=task.js.map