/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import {CloudErrorMapper, BaseResourceMapper } from "ms-rest-azure-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const PoolUsageMetrics = {
  required: false,
  serializedName: 'PoolUsageMetrics',
  type: {
    name: 'Composite',
    className: 'PoolUsageMetrics',
    modelProperties: {
      poolId: {
        required: true,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: true,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      vmSize: {
        required: true,
        serializedName: 'vmSize',
        type: {
          name: 'String'
        }
      },
      totalCoreHours: {
        required: true,
        serializedName: 'totalCoreHours',
        type: {
          name: 'Number'
        }
      },
      dataIngressGiB: {
        required: true,
        serializedName: 'dataIngressGiB',
        type: {
          name: 'Number'
        }
      },
      dataEgressGiB: {
        required: true,
        serializedName: 'dataEgressGiB',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ImageReference = {
  required: false,
  serializedName: 'ImageReference',
  type: {
    name: 'Composite',
    className: 'ImageReference',
    modelProperties: {
      publisher: {
        required: false,
        serializedName: 'publisher',
        type: {
          name: 'String'
        }
      },
      offer: {
        required: false,
        serializedName: 'offer',
        type: {
          name: 'String'
        }
      },
      sku: {
        required: false,
        serializedName: 'sku',
        type: {
          name: 'String'
        }
      },
      version: {
        required: false,
        serializedName: 'version',
        type: {
          name: 'String'
        }
      },
      virtualMachineImageId: {
        required: false,
        serializedName: 'virtualMachineImageId',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NodeAgentSku = {
  required: false,
  serializedName: 'NodeAgentSku',
  type: {
    name: 'Composite',
    className: 'NodeAgentSku',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      verifiedImageReferences: {
        required: false,
        serializedName: 'verifiedImageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ImageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ImageReference'
              }
          }
        }
      },
      osType: {
        required: false,
        serializedName: 'osType',
        type: {
          name: 'Enum',
          allowedValues: [ 'linux', 'windows' ]
        }
      }
    }
  }
};

export const AuthenticationTokenSettings = {
  required: false,
  serializedName: 'AuthenticationTokenSettings',
  type: {
    name: 'Composite',
    className: 'AuthenticationTokenSettings',
    modelProperties: {
      access: {
        required: false,
        serializedName: 'access',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'AccessScopeElementType',
              type: {
                name: 'Enum',
                allowedValues: [ 'job' ]
              }
          }
        }
      }
    }
  }
};

export const UsageStatistics = {
  required: false,
  serializedName: 'UsageStatistics',
  type: {
    name: 'Composite',
    className: 'UsageStatistics',
    modelProperties: {
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      dedicatedCoreTime: {
        required: true,
        serializedName: 'dedicatedCoreTime',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const ResourceStatistics = {
  required: false,
  serializedName: 'ResourceStatistics',
  type: {
    name: 'Composite',
    className: 'ResourceStatistics',
    modelProperties: {
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      avgCPUPercentage: {
        required: true,
        serializedName: 'avgCPUPercentage',
        type: {
          name: 'Number'
        }
      },
      avgMemoryGiB: {
        required: true,
        serializedName: 'avgMemoryGiB',
        type: {
          name: 'Number'
        }
      },
      peakMemoryGiB: {
        required: true,
        serializedName: 'peakMemoryGiB',
        type: {
          name: 'Number'
        }
      },
      avgDiskGiB: {
        required: true,
        serializedName: 'avgDiskGiB',
        type: {
          name: 'Number'
        }
      },
      peakDiskGiB: {
        required: true,
        serializedName: 'peakDiskGiB',
        type: {
          name: 'Number'
        }
      },
      diskReadIOps: {
        required: true,
        serializedName: 'diskReadIOps',
        type: {
          name: 'Number'
        }
      },
      diskWriteIOps: {
        required: true,
        serializedName: 'diskWriteIOps',
        type: {
          name: 'Number'
        }
      },
      diskReadGiB: {
        required: true,
        serializedName: 'diskReadGiB',
        type: {
          name: 'Number'
        }
      },
      diskWriteGiB: {
        required: true,
        serializedName: 'diskWriteGiB',
        type: {
          name: 'Number'
        }
      },
      networkReadGiB: {
        required: true,
        serializedName: 'networkReadGiB',
        type: {
          name: 'Number'
        }
      },
      networkWriteGiB: {
        required: true,
        serializedName: 'networkWriteGiB',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const PoolStatistics = {
  required: false,
  serializedName: 'PoolStatistics',
  type: {
    name: 'Composite',
    className: 'PoolStatistics',
    modelProperties: {
      url: {
        required: true,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      usageStats: {
        required: false,
        serializedName: 'usageStats',
        type: {
          name: 'Composite',
          className: 'UsageStatistics'
        }
      },
      resourceStats: {
        required: false,
        serializedName: 'resourceStats',
        type: {
          name: 'Composite',
          className: 'ResourceStatistics'
        }
      }
    }
  }
};

export const JobStatistics = {
  required: false,
  serializedName: 'JobStatistics',
  type: {
    name: 'Composite',
    className: 'JobStatistics',
    modelProperties: {
      url: {
        required: true,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      userCPUTime: {
        required: true,
        serializedName: 'userCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: 'kernelCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      wallClockTime: {
        required: true,
        serializedName: 'wallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      readIOps: {
        required: true,
        serializedName: 'readIOps',
        type: {
          name: 'Number'
        }
      },
      writeIOps: {
        required: true,
        serializedName: 'writeIOps',
        type: {
          name: 'Number'
        }
      },
      readIOGiB: {
        required: true,
        serializedName: 'readIOGiB',
        type: {
          name: 'Number'
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: 'writeIOGiB',
        type: {
          name: 'Number'
        }
      },
      numSucceededTasks: {
        required: true,
        serializedName: 'numSucceededTasks',
        type: {
          name: 'Number'
        }
      },
      numFailedTasks: {
        required: true,
        serializedName: 'numFailedTasks',
        type: {
          name: 'Number'
        }
      },
      numTaskRetries: {
        required: true,
        serializedName: 'numTaskRetries',
        type: {
          name: 'Number'
        }
      },
      waitTime: {
        required: true,
        serializedName: 'waitTime',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const NameValuePair = {
  required: false,
  serializedName: 'NameValuePair',
  type: {
    name: 'Composite',
    className: 'NameValuePair',
    modelProperties: {
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const DeleteCertificateError = {
  required: false,
  serializedName: 'DeleteCertificateError',
  type: {
    name: 'Composite',
    className: 'DeleteCertificateError',
    modelProperties: {
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const Certificate = {
  required: false,
  serializedName: 'Certificate',
  type: {
    name: 'Composite',
    className: 'Certificate',
    modelProperties: {
      thumbprint: {
        required: false,
        serializedName: 'thumbprint',
        type: {
          name: 'String'
        }
      },
      thumbprintAlgorithm: {
        required: false,
        serializedName: 'thumbprintAlgorithm',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'deleting', 'deletefailed' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      previousState: {
        required: false,
        serializedName: 'previousState',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'deleting', 'deletefailed' ]
        }
      },
      previousStateTransitionTime: {
        required: false,
        serializedName: 'previousStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      publicData: {
        required: false,
        serializedName: 'publicData',
        type: {
          name: 'String'
        }
      },
      deleteCertificateError: {
        required: false,
        serializedName: 'deleteCertificateError',
        type: {
          name: 'Composite',
          className: 'DeleteCertificateError'
        }
      }
    }
  }
};

export const ApplicationPackageReference = {
  required: false,
  serializedName: 'ApplicationPackageReference',
  type: {
    name: 'Composite',
    className: 'ApplicationPackageReference',
    modelProperties: {
      applicationId: {
        required: true,
        serializedName: 'applicationId',
        type: {
          name: 'String'
        }
      },
      version: {
        required: false,
        serializedName: 'version',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ApplicationSummary = {
  required: false,
  serializedName: 'ApplicationSummary',
  type: {
    name: 'Composite',
    className: 'ApplicationSummary',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: true,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      versions: {
        required: true,
        serializedName: 'versions',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      }
    }
  }
};

export const CertificateAddParameter = {
  required: false,
  serializedName: 'CertificateAddParameter',
  type: {
    name: 'Composite',
    className: 'CertificateAddParameter',
    modelProperties: {
      thumbprint: {
        required: true,
        serializedName: 'thumbprint',
        type: {
          name: 'String'
        }
      },
      thumbprintAlgorithm: {
        required: true,
        serializedName: 'thumbprintAlgorithm',
        type: {
          name: 'String'
        }
      },
      data: {
        required: true,
        serializedName: 'data',
        type: {
          name: 'String'
        }
      },
      certificateFormat: {
        required: false,
        serializedName: 'certificateFormat',
        type: {
          name: 'Enum',
          allowedValues: [ 'pfx', 'cer' ]
        }
      },
      password: {
        required: false,
        serializedName: 'password',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const FileProperties = {
  required: false,
  serializedName: 'FileProperties',
  type: {
    name: 'Composite',
    className: 'FileProperties',
    modelProperties: {
      creationTime: {
        required: false,
        serializedName: 'creationTime',
        type: {
          name: 'DateTime'
        }
      },
      lastModified: {
        required: true,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      contentLength: {
        required: true,
        serializedName: 'contentLength',
        type: {
          name: 'Number'
        }
      },
      contentType: {
        required: false,
        serializedName: 'contentType',
        type: {
          name: 'String'
        }
      },
      fileMode: {
        required: false,
        serializedName: 'fileMode',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NodeFile = {
  required: false,
  serializedName: 'NodeFile',
  type: {
    name: 'Composite',
    className: 'NodeFile',
    modelProperties: {
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      isDirectory: {
        required: false,
        serializedName: 'isDirectory',
        type: {
          name: 'Boolean'
        }
      },
      properties: {
        required: false,
        serializedName: 'properties',
        type: {
          name: 'Composite',
          className: 'FileProperties'
        }
      }
    }
  }
};

export const Schedule = {
  required: false,
  serializedName: 'Schedule',
  type: {
    name: 'Composite',
    className: 'Schedule',
    modelProperties: {
      doNotRunUntil: {
        required: false,
        serializedName: 'doNotRunUntil',
        type: {
          name: 'DateTime'
        }
      },
      doNotRunAfter: {
        required: false,
        serializedName: 'doNotRunAfter',
        type: {
          name: 'DateTime'
        }
      },
      startWindow: {
        required: false,
        serializedName: 'startWindow',
        type: {
          name: 'TimeSpan'
        }
      },
      recurrenceInterval: {
        required: false,
        serializedName: 'recurrenceInterval',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const JobConstraints = {
  required: false,
  serializedName: 'JobConstraints',
  type: {
    name: 'Composite',
    className: 'JobConstraints',
    modelProperties: {
      maxWallClockTime: {
        required: false,
        serializedName: 'maxWallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      maxTaskRetryCount: {
        required: false,
        serializedName: 'maxTaskRetryCount',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ContainerRegistry = {
  required: false,
  serializedName: 'ContainerRegistry',
  type: {
    name: 'Composite',
    className: 'ContainerRegistry',
    modelProperties: {
      registryServer: {
        required: false,
        serializedName: 'registryServer',
        type: {
          name: 'String'
        }
      },
      userName: {
        required: true,
        serializedName: 'username',
        type: {
          name: 'String'
        }
      },
      password: {
        required: true,
        serializedName: 'password',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const TaskContainerSettings = {
  required: false,
  serializedName: 'TaskContainerSettings',
  type: {
    name: 'Composite',
    className: 'TaskContainerSettings',
    modelProperties: {
      containerRunOptions: {
        required: false,
        serializedName: 'containerRunOptions',
        type: {
          name: 'String'
        }
      },
      imageName: {
        required: true,
        serializedName: 'imageName',
        type: {
          name: 'String'
        }
      },
      registry: {
        required: false,
        serializedName: 'registry',
        type: {
          name: 'Composite',
          className: 'ContainerRegistry'
        }
      }
    }
  }
};

export const ResourceFile = {
  required: false,
  serializedName: 'ResourceFile',
  type: {
    name: 'Composite',
    className: 'ResourceFile',
    modelProperties: {
      blobSource: {
        required: true,
        serializedName: 'blobSource',
        type: {
          name: 'String'
        }
      },
      filePath: {
        required: true,
        serializedName: 'filePath',
        type: {
          name: 'String'
        }
      },
      fileMode: {
        required: false,
        serializedName: 'fileMode',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const EnvironmentSetting = {
  required: false,
  serializedName: 'EnvironmentSetting',
  type: {
    name: 'Composite',
    className: 'EnvironmentSetting',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ExitOptions = {
  required: false,
  serializedName: 'ExitOptions',
  type: {
    name: 'Composite',
    className: 'ExitOptions',
    modelProperties: {
      jobAction: {
        required: false,
        serializedName: 'jobAction',
        type: {
          name: 'Enum',
          allowedValues: [ 'none', 'disable', 'terminate' ]
        }
      },
      dependencyAction: {
        required: false,
        serializedName: 'dependencyAction',
        type: {
          name: 'Enum',
          allowedValues: [ 'satisfy', 'block' ]
        }
      }
    }
  }
};

export const ExitCodeMapping = {
  required: false,
  serializedName: 'ExitCodeMapping',
  type: {
    name: 'Composite',
    className: 'ExitCodeMapping',
    modelProperties: {
      code: {
        required: true,
        serializedName: 'code',
        type: {
          name: 'Number'
        }
      },
      exitOptions: {
        required: true,
        serializedName: 'exitOptions',
        type: {
          name: 'Composite',
          className: 'ExitOptions'
        }
      }
    }
  }
};

export const ExitCodeRangeMapping = {
  required: false,
  serializedName: 'ExitCodeRangeMapping',
  type: {
    name: 'Composite',
    className: 'ExitCodeRangeMapping',
    modelProperties: {
      start: {
        required: true,
        serializedName: 'start',
        type: {
          name: 'Number'
        }
      },
      end: {
        required: true,
        serializedName: 'end',
        type: {
          name: 'Number'
        }
      },
      exitOptions: {
        required: true,
        serializedName: 'exitOptions',
        type: {
          name: 'Composite',
          className: 'ExitOptions'
        }
      }
    }
  }
};

export const ExitConditions = {
  required: false,
  serializedName: 'ExitConditions',
  type: {
    name: 'Composite',
    className: 'ExitConditions',
    modelProperties: {
      exitCodes: {
        required: false,
        serializedName: 'exitCodes',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ExitCodeMappingElementType',
              type: {
                name: 'Composite',
                className: 'ExitCodeMapping'
              }
          }
        }
      },
      exitCodeRanges: {
        required: false,
        serializedName: 'exitCodeRanges',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ExitCodeRangeMappingElementType',
              type: {
                name: 'Composite',
                className: 'ExitCodeRangeMapping'
              }
          }
        }
      },
      preProcessingError: {
        required: false,
        serializedName: 'preProcessingError',
        type: {
          name: 'Composite',
          className: 'ExitOptions'
        }
      },
      fileUploadError: {
        required: false,
        serializedName: 'fileUploadError',
        type: {
          name: 'Composite',
          className: 'ExitOptions'
        }
      },
      default: {
        required: false,
        serializedName: 'default',
        type: {
          name: 'Composite',
          className: 'ExitOptions'
        }
      }
    }
  }
};

export const AutoUserSpecification = {
  required: false,
  serializedName: 'AutoUserSpecification',
  type: {
    name: 'Composite',
    className: 'AutoUserSpecification',
    modelProperties: {
      scope: {
        required: false,
        serializedName: 'scope',
        type: {
          name: 'Enum',
          allowedValues: [ 'task', 'pool' ]
        }
      },
      elevationLevel: {
        required: false,
        serializedName: 'elevationLevel',
        type: {
          name: 'Enum',
          allowedValues: [ 'nonadmin', 'admin' ]
        }
      }
    }
  }
};

export const UserIdentity = {
  required: false,
  serializedName: 'UserIdentity',
  type: {
    name: 'Composite',
    className: 'UserIdentity',
    modelProperties: {
      userName: {
        required: false,
        serializedName: 'username',
        type: {
          name: 'String'
        }
      },
      autoUser: {
        required: false,
        serializedName: 'autoUser',
        type: {
          name: 'Composite',
          className: 'AutoUserSpecification'
        }
      }
    }
  }
};

export const LinuxUserConfiguration = {
  required: false,
  serializedName: 'LinuxUserConfiguration',
  type: {
    name: 'Composite',
    className: 'LinuxUserConfiguration',
    modelProperties: {
      uid: {
        required: false,
        serializedName: 'uid',
        type: {
          name: 'Number'
        }
      },
      gid: {
        required: false,
        serializedName: 'gid',
        type: {
          name: 'Number'
        }
      },
      sshPrivateKey: {
        required: false,
        serializedName: 'sshPrivateKey',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const UserAccount = {
  required: false,
  serializedName: 'UserAccount',
  type: {
    name: 'Composite',
    className: 'UserAccount',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      password: {
        required: true,
        serializedName: 'password',
        type: {
          name: 'String'
        }
      },
      elevationLevel: {
        required: false,
        serializedName: 'elevationLevel',
        type: {
          name: 'Enum',
          allowedValues: [ 'nonadmin', 'admin' ]
        }
      },
      linuxUserConfiguration: {
        required: false,
        serializedName: 'linuxUserConfiguration',
        type: {
          name: 'Composite',
          className: 'LinuxUserConfiguration'
        }
      }
    }
  }
};

export const TaskConstraints = {
  required: false,
  serializedName: 'TaskConstraints',
  type: {
    name: 'Composite',
    className: 'TaskConstraints',
    modelProperties: {
      maxWallClockTime: {
        required: false,
        serializedName: 'maxWallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      retentionTime: {
        required: false,
        serializedName: 'retentionTime',
        type: {
          name: 'TimeSpan'
        }
      },
      maxTaskRetryCount: {
        required: false,
        serializedName: 'maxTaskRetryCount',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const OutputFileBlobContainerDestination = {
  required: false,
  serializedName: 'OutputFileBlobContainerDestination',
  type: {
    name: 'Composite',
    className: 'OutputFileBlobContainerDestination',
    modelProperties: {
      path: {
        required: false,
        serializedName: 'path',
        type: {
          name: 'String'
        }
      },
      containerUrl: {
        required: true,
        serializedName: 'containerUrl',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const OutputFileDestination = {
  required: false,
  serializedName: 'OutputFileDestination',
  type: {
    name: 'Composite',
    className: 'OutputFileDestination',
    modelProperties: {
      container: {
        required: false,
        serializedName: 'container',
        type: {
          name: 'Composite',
          className: 'OutputFileBlobContainerDestination'
        }
      }
    }
  }
};

export const OutputFileUploadOptions = {
  required: false,
  serializedName: 'OutputFileUploadOptions',
  type: {
    name: 'Composite',
    className: 'OutputFileUploadOptions',
    modelProperties: {
      uploadCondition: {
        required: true,
        serializedName: 'uploadCondition',
        type: {
          name: 'Enum',
          allowedValues: [ 'tasksuccess', 'taskfailure', 'taskcompletion' ]
        }
      }
    }
  }
};

export const OutputFile = {
  required: false,
  serializedName: 'OutputFile',
  type: {
    name: 'Composite',
    className: 'OutputFile',
    modelProperties: {
      filePattern: {
        required: true,
        serializedName: 'filePattern',
        type: {
          name: 'String'
        }
      },
      destination: {
        required: true,
        serializedName: 'destination',
        type: {
          name: 'Composite',
          className: 'OutputFileDestination'
        }
      },
      uploadOptions: {
        required: true,
        serializedName: 'uploadOptions',
        type: {
          name: 'Composite',
          className: 'OutputFileUploadOptions'
        }
      }
    }
  }
};

export const JobManagerTask = {
  required: false,
  serializedName: 'JobManagerTask',
  type: {
    name: 'Composite',
    className: 'JobManagerTask',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      commandLine: {
        required: true,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      outputFiles: {
        required: false,
        serializedName: 'outputFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'OutputFileElementType',
              type: {
                name: 'Composite',
                className: 'OutputFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'TaskConstraints'
        }
      },
      killJobOnCompletion: {
        required: false,
        serializedName: 'killJobOnCompletion',
        type: {
          name: 'Boolean'
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      },
      runExclusive: {
        required: false,
        serializedName: 'runExclusive',
        type: {
          name: 'Boolean'
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      authenticationTokenSettings: {
        required: false,
        serializedName: 'authenticationTokenSettings',
        type: {
          name: 'Composite',
          className: 'AuthenticationTokenSettings'
        }
      },
      allowLowPriorityNode: {
        required: false,
        serializedName: 'allowLowPriorityNode',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const JobPreparationTask = {
  required: false,
  serializedName: 'JobPreparationTask',
  type: {
    name: 'Composite',
    className: 'JobPreparationTask',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      commandLine: {
        required: true,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'TaskConstraints'
        }
      },
      waitForSuccess: {
        required: false,
        serializedName: 'waitForSuccess',
        type: {
          name: 'Boolean'
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      },
      rerunOnNodeRebootAfterSuccess: {
        required: false,
        serializedName: 'rerunOnNodeRebootAfterSuccess',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const JobReleaseTask = {
  required: false,
  serializedName: 'JobReleaseTask',
  type: {
    name: 'Composite',
    className: 'JobReleaseTask',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      commandLine: {
        required: true,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      maxWallClockTime: {
        required: false,
        serializedName: 'maxWallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      retentionTime: {
        required: false,
        serializedName: 'retentionTime',
        type: {
          name: 'TimeSpan'
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      }
    }
  }
};

export const TaskSchedulingPolicy = {
  required: false,
  serializedName: 'TaskSchedulingPolicy',
  type: {
    name: 'Composite',
    className: 'TaskSchedulingPolicy',
    modelProperties: {
      nodeFillType: {
        required: true,
        serializedName: 'nodeFillType',
        type: {
          name: 'Enum',
          allowedValues: [ 'spread', 'pack' ]
        }
      }
    }
  }
};

export const StartTask = {
  required: false,
  serializedName: 'StartTask',
  type: {
    name: 'Composite',
    className: 'StartTask',
    modelProperties: {
      commandLine: {
        required: true,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      },
      maxTaskRetryCount: {
        required: false,
        serializedName: 'maxTaskRetryCount',
        type: {
          name: 'Number'
        }
      },
      waitForSuccess: {
        required: false,
        serializedName: 'waitForSuccess',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const CertificateReference = {
  required: false,
  serializedName: 'CertificateReference',
  type: {
    name: 'Composite',
    className: 'CertificateReference',
    modelProperties: {
      thumbprint: {
        required: true,
        serializedName: 'thumbprint',
        type: {
          name: 'String'
        }
      },
      thumbprintAlgorithm: {
        required: true,
        serializedName: 'thumbprintAlgorithm',
        type: {
          name: 'String'
        }
      },
      storeLocation: {
        required: false,
        serializedName: 'storeLocation',
        type: {
          name: 'Enum',
          allowedValues: [ 'currentuser', 'localmachine' ]
        }
      },
      storeName: {
        required: false,
        serializedName: 'storeName',
        type: {
          name: 'String'
        }
      },
      visibility: {
        required: false,
        serializedName: 'visibility',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateVisibilityElementType',
              type: {
                name: 'Enum',
                allowedValues: [ 'starttask', 'task', 'remoteuser' ]
              }
          }
        }
      }
    }
  }
};

export const MetadataItem = {
  required: false,
  serializedName: 'MetadataItem',
  type: {
    name: 'Composite',
    className: 'MetadataItem',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      value: {
        required: true,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudServiceConfiguration = {
  required: false,
  serializedName: 'CloudServiceConfiguration',
  type: {
    name: 'Composite',
    className: 'CloudServiceConfiguration',
    modelProperties: {
      osFamily: {
        required: true,
        serializedName: 'osFamily',
        type: {
          name: 'String'
        }
      },
      targetOSVersion: {
        required: false,
        serializedName: 'targetOSVersion',
        type: {
          name: 'String'
        }
      },
      currentOSVersion: {
        required: false,
        readOnly: true,
        serializedName: 'currentOSVersion',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const OSDisk = {
  required: false,
  serializedName: 'OSDisk',
  type: {
    name: 'Composite',
    className: 'OSDisk',
    modelProperties: {
      caching: {
        required: false,
        serializedName: 'caching',
        type: {
          name: 'Enum',
          allowedValues: [ 'none', 'readonly', 'readwrite' ]
        }
      }
    }
  }
};

export const WindowsConfiguration = {
  required: false,
  serializedName: 'WindowsConfiguration',
  type: {
    name: 'Composite',
    className: 'WindowsConfiguration',
    modelProperties: {
      enableAutomaticUpdates: {
        required: false,
        serializedName: 'enableAutomaticUpdates',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const DataDisk = {
  required: false,
  serializedName: 'DataDisk',
  type: {
    name: 'Composite',
    className: 'DataDisk',
    modelProperties: {
      lun: {
        required: true,
        serializedName: 'lun',
        type: {
          name: 'Number'
        }
      },
      caching: {
        required: false,
        serializedName: 'caching',
        type: {
          name: 'Enum',
          allowedValues: [ 'none', 'readonly', 'readwrite' ]
        }
      },
      diskSizeGB: {
        required: true,
        serializedName: 'diskSizeGB',
        type: {
          name: 'Number'
        }
      },
      storageAccountType: {
        required: false,
        serializedName: 'storageAccountType',
        type: {
          name: 'Enum',
          allowedValues: [ 'standard_lrs', 'premium_lrs' ]
        }
      }
    }
  }
};

export const ContainerConfiguration = {
  required: false,
  serializedName: 'ContainerConfiguration',
  type: {
    name: 'Composite',
    className: 'ContainerConfiguration',
    modelProperties: {
      type: {
        required: true,
        isConstant: true,
        serializedName: 'type',
        defaultValue: 'docker',
        type: {
          name: 'String'
        }
      },
      containerImageNames: {
        required: false,
        serializedName: 'containerImageNames',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      containerRegistries: {
        required: false,
        serializedName: 'containerRegistries',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ContainerRegistryElementType',
              type: {
                name: 'Composite',
                className: 'ContainerRegistry'
              }
          }
        }
      }
    }
  }
};

export const VirtualMachineConfiguration = {
  required: false,
  serializedName: 'VirtualMachineConfiguration',
  type: {
    name: 'Composite',
    className: 'VirtualMachineConfiguration',
    modelProperties: {
      imageReference: {
        required: true,
        serializedName: 'imageReference',
        type: {
          name: 'Composite',
          className: 'ImageReference'
        }
      },
      osDisk: {
        required: false,
        serializedName: 'osDisk',
        type: {
          name: 'Composite',
          className: 'OSDisk'
        }
      },
      nodeAgentSKUId: {
        required: true,
        serializedName: 'nodeAgentSKUId',
        type: {
          name: 'String'
        }
      },
      windowsConfiguration: {
        required: false,
        serializedName: 'windowsConfiguration',
        type: {
          name: 'Composite',
          className: 'WindowsConfiguration'
        }
      },
      dataDisks: {
        required: false,
        serializedName: 'dataDisks',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'DataDiskElementType',
              type: {
                name: 'Composite',
                className: 'DataDisk'
              }
          }
        }
      },
      licenseType: {
        required: false,
        serializedName: 'licenseType',
        type: {
          name: 'String'
        }
      },
      containerConfiguration: {
        required: false,
        serializedName: 'containerConfiguration',
        type: {
          name: 'Composite',
          className: 'ContainerConfiguration'
        }
      }
    }
  }
};

export const NetworkSecurityGroupRule = {
  required: false,
  serializedName: 'NetworkSecurityGroupRule',
  type: {
    name: 'Composite',
    className: 'NetworkSecurityGroupRule',
    modelProperties: {
      priority: {
        required: true,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      access: {
        required: true,
        serializedName: 'access',
        type: {
          name: 'Enum',
          allowedValues: [ 'allow', 'deny' ]
        }
      },
      sourceAddressPrefix: {
        required: true,
        serializedName: 'sourceAddressPrefix',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const InboundNATPool = {
  required: false,
  serializedName: 'InboundNATPool',
  type: {
    name: 'Composite',
    className: 'InboundNATPool',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      protocol: {
        required: true,
        serializedName: 'protocol',
        type: {
          name: 'Enum',
          allowedValues: [ 'tcp', 'udp' ]
        }
      },
      backendPort: {
        required: true,
        serializedName: 'backendPort',
        type: {
          name: 'Number'
        }
      },
      frontendPortRangeStart: {
        required: true,
        serializedName: 'frontendPortRangeStart',
        type: {
          name: 'Number'
        }
      },
      frontendPortRangeEnd: {
        required: true,
        serializedName: 'frontendPortRangeEnd',
        type: {
          name: 'Number'
        }
      },
      networkSecurityGroupRules: {
        required: false,
        serializedName: 'networkSecurityGroupRules',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NetworkSecurityGroupRuleElementType',
              type: {
                name: 'Composite',
                className: 'NetworkSecurityGroupRule'
              }
          }
        }
      }
    }
  }
};

export const PoolEndpointConfiguration = {
  required: false,
  serializedName: 'PoolEndpointConfiguration',
  type: {
    name: 'Composite',
    className: 'PoolEndpointConfiguration',
    modelProperties: {
      inboundNATPools: {
        required: true,
        serializedName: 'inboundNATPools',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'InboundNATPoolElementType',
              type: {
                name: 'Composite',
                className: 'InboundNATPool'
              }
          }
        }
      }
    }
  }
};

export const NetworkConfiguration = {
  required: false,
  serializedName: 'NetworkConfiguration',
  type: {
    name: 'Composite',
    className: 'NetworkConfiguration',
    modelProperties: {
      subnetId: {
        required: false,
        serializedName: 'subnetId',
        type: {
          name: 'String'
        }
      },
      endpointConfiguration: {
        required: false,
        serializedName: 'endpointConfiguration',
        type: {
          name: 'Composite',
          className: 'PoolEndpointConfiguration'
        }
      }
    }
  }
};

export const PoolSpecification = {
  required: false,
  serializedName: 'PoolSpecification',
  type: {
    name: 'Composite',
    className: 'PoolSpecification',
    modelProperties: {
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      vmSize: {
        required: true,
        serializedName: 'vmSize',
        type: {
          name: 'String'
        }
      },
      cloudServiceConfiguration: {
        required: false,
        serializedName: 'cloudServiceConfiguration',
        type: {
          name: 'Composite',
          className: 'CloudServiceConfiguration'
        }
      },
      virtualMachineConfiguration: {
        required: false,
        serializedName: 'virtualMachineConfiguration',
        type: {
          name: 'Composite',
          className: 'VirtualMachineConfiguration'
        }
      },
      maxTasksPerNode: {
        required: false,
        serializedName: 'maxTasksPerNode',
        type: {
          name: 'Number'
        }
      },
      taskSchedulingPolicy: {
        required: false,
        serializedName: 'taskSchedulingPolicy',
        type: {
          name: 'Composite',
          className: 'TaskSchedulingPolicy'
        }
      },
      resizeTimeout: {
        required: false,
        serializedName: 'resizeTimeout',
        type: {
          name: 'TimeSpan'
        }
      },
      targetDedicatedNodes: {
        required: false,
        serializedName: 'targetDedicatedNodes',
        type: {
          name: 'Number'
        }
      },
      targetLowPriorityNodes: {
        required: false,
        serializedName: 'targetLowPriorityNodes',
        type: {
          name: 'Number'
        }
      },
      enableAutoScale: {
        required: false,
        serializedName: 'enableAutoScale',
        type: {
          name: 'Boolean'
        }
      },
      autoScaleFormula: {
        required: false,
        serializedName: 'autoScaleFormula',
        type: {
          name: 'String'
        }
      },
      autoScaleEvaluationInterval: {
        required: false,
        serializedName: 'autoScaleEvaluationInterval',
        type: {
          name: 'TimeSpan'
        }
      },
      enableInterNodeCommunication: {
        required: false,
        serializedName: 'enableInterNodeCommunication',
        type: {
          name: 'Boolean'
        }
      },
      networkConfiguration: {
        required: false,
        serializedName: 'networkConfiguration',
        type: {
          name: 'Composite',
          className: 'NetworkConfiguration'
        }
      },
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      certificateReferences: {
        required: false,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      applicationLicenses: {
        required: false,
        serializedName: 'applicationLicenses',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      userAccounts: {
        required: false,
        serializedName: 'userAccounts',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'UserAccountElementType',
              type: {
                name: 'Composite',
                className: 'UserAccount'
              }
          }
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const AutoPoolSpecification = {
  required: false,
  serializedName: 'AutoPoolSpecification',
  type: {
    name: 'Composite',
    className: 'AutoPoolSpecification',
    modelProperties: {
      autoPoolIdPrefix: {
        required: false,
        serializedName: 'autoPoolIdPrefix',
        type: {
          name: 'String'
        }
      },
      poolLifetimeOption: {
        required: true,
        serializedName: 'poolLifetimeOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'jobschedule', 'job' ]
        }
      },
      keepAlive: {
        required: false,
        serializedName: 'keepAlive',
        type: {
          name: 'Boolean'
        }
      },
      pool: {
        required: false,
        serializedName: 'pool',
        type: {
          name: 'Composite',
          className: 'PoolSpecification'
        }
      }
    }
  }
};

export const PoolInformation = {
  required: false,
  serializedName: 'PoolInformation',
  type: {
    name: 'Composite',
    className: 'PoolInformation',
    modelProperties: {
      poolId: {
        required: false,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      autoPoolSpecification: {
        required: false,
        serializedName: 'autoPoolSpecification',
        type: {
          name: 'Composite',
          className: 'AutoPoolSpecification'
        }
      }
    }
  }
};

export const JobSpecification = {
  required: false,
  serializedName: 'JobSpecification',
  type: {
    name: 'Composite',
    className: 'JobSpecification',
    modelProperties: {
      priority: {
        required: false,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      usesTaskDependencies: {
        required: false,
        serializedName: 'usesTaskDependencies',
        type: {
          name: 'Boolean'
        }
      },
      onAllTasksComplete: {
        required: false,
        serializedName: 'onAllTasksComplete',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'terminatejob' ]
        }
      },
      onTaskFailure: {
        required: false,
        serializedName: 'onTaskFailure',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'performexitoptionsjobaction' ]
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'JobConstraints'
        }
      },
      jobManagerTask: {
        required: false,
        serializedName: 'jobManagerTask',
        type: {
          name: 'Composite',
          className: 'JobManagerTask'
        }
      },
      jobPreparationTask: {
        required: false,
        serializedName: 'jobPreparationTask',
        type: {
          name: 'Composite',
          className: 'JobPreparationTask'
        }
      },
      jobReleaseTask: {
        required: false,
        serializedName: 'jobReleaseTask',
        type: {
          name: 'Composite',
          className: 'JobReleaseTask'
        }
      },
      commonEnvironmentSettings: {
        required: false,
        serializedName: 'commonEnvironmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      poolInfo: {
        required: true,
        serializedName: 'poolInfo',
        defaultValue: {},
        type: {
          name: 'Composite',
          className: 'PoolInformation'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const RecentJob = {
  required: false,
  serializedName: 'RecentJob',
  type: {
    name: 'Composite',
    className: 'RecentJob',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const JobScheduleExecutionInformation = {
  required: false,
  serializedName: 'JobScheduleExecutionInformation',
  type: {
    name: 'Composite',
    className: 'JobScheduleExecutionInformation',
    modelProperties: {
      nextRunTime: {
        required: false,
        serializedName: 'nextRunTime',
        type: {
          name: 'DateTime'
        }
      },
      recentJob: {
        required: false,
        serializedName: 'recentJob',
        type: {
          name: 'Composite',
          className: 'RecentJob'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const JobScheduleStatistics = {
  required: false,
  serializedName: 'JobScheduleStatistics',
  type: {
    name: 'Composite',
    className: 'JobScheduleStatistics',
    modelProperties: {
      url: {
        required: true,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      userCPUTime: {
        required: true,
        serializedName: 'userCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: 'kernelCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      wallClockTime: {
        required: true,
        serializedName: 'wallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      readIOps: {
        required: true,
        serializedName: 'readIOps',
        type: {
          name: 'Number'
        }
      },
      writeIOps: {
        required: true,
        serializedName: 'writeIOps',
        type: {
          name: 'Number'
        }
      },
      readIOGiB: {
        required: true,
        serializedName: 'readIOGiB',
        type: {
          name: 'Number'
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: 'writeIOGiB',
        type: {
          name: 'Number'
        }
      },
      numSucceededTasks: {
        required: true,
        serializedName: 'numSucceededTasks',
        type: {
          name: 'Number'
        }
      },
      numFailedTasks: {
        required: true,
        serializedName: 'numFailedTasks',
        type: {
          name: 'Number'
        }
      },
      numTaskRetries: {
        required: true,
        serializedName: 'numTaskRetries',
        type: {
          name: 'Number'
        }
      },
      waitTime: {
        required: true,
        serializedName: 'waitTime',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const CloudJobSchedule = {
  required: false,
  serializedName: 'CloudJobSchedule',
  type: {
    name: 'Composite',
    className: 'CloudJobSchedule',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      eTag: {
        required: false,
        serializedName: 'eTag',
        type: {
          name: 'String'
        }
      },
      lastModified: {
        required: false,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'creationTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'completed', 'disabled', 'terminating', 'deleting' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      previousState: {
        required: false,
        serializedName: 'previousState',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'completed', 'disabled', 'terminating', 'deleting' ]
        }
      },
      previousStateTransitionTime: {
        required: false,
        serializedName: 'previousStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      schedule: {
        required: false,
        serializedName: 'schedule',
        type: {
          name: 'Composite',
          className: 'Schedule'
        }
      },
      jobSpecification: {
        required: false,
        serializedName: 'jobSpecification',
        type: {
          name: 'Composite',
          className: 'JobSpecification'
        }
      },
      executionInfo: {
        required: false,
        serializedName: 'executionInfo',
        type: {
          name: 'Composite',
          className: 'JobScheduleExecutionInformation'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      },
      stats: {
        required: false,
        serializedName: 'stats',
        type: {
          name: 'Composite',
          className: 'JobScheduleStatistics'
        }
      }
    }
  }
};

export const JobScheduleAddParameter = {
  required: false,
  serializedName: 'JobScheduleAddParameter',
  type: {
    name: 'Composite',
    className: 'JobScheduleAddParameter',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      schedule: {
        required: true,
        serializedName: 'schedule',
        type: {
          name: 'Composite',
          className: 'Schedule'
        }
      },
      jobSpecification: {
        required: true,
        serializedName: 'jobSpecification',
        defaultValue: {},
        type: {
          name: 'Composite',
          className: 'JobSpecification'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const JobSchedulingError = {
  required: false,
  serializedName: 'JobSchedulingError',
  type: {
    name: 'Composite',
    className: 'JobSchedulingError',
    modelProperties: {
      category: {
        required: true,
        serializedName: 'category',
        type: {
          name: 'Enum',
          allowedValues: [ 'usererror', 'servererror' ]
        }
      },
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      details: {
        required: false,
        serializedName: 'details',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const JobExecutionInformation = {
  required: false,
  serializedName: 'JobExecutionInformation',
  type: {
    name: 'Composite',
    className: 'JobExecutionInformation',
    modelProperties: {
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      poolId: {
        required: false,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      schedulingError: {
        required: false,
        serializedName: 'schedulingError',
        type: {
          name: 'Composite',
          className: 'JobSchedulingError'
        }
      },
      terminateReason: {
        required: false,
        serializedName: 'terminateReason',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudJob = {
  required: false,
  serializedName: 'CloudJob',
  type: {
    name: 'Composite',
    className: 'CloudJob',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      usesTaskDependencies: {
        required: false,
        serializedName: 'usesTaskDependencies',
        type: {
          name: 'Boolean'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      eTag: {
        required: false,
        serializedName: 'eTag',
        type: {
          name: 'String'
        }
      },
      lastModified: {
        required: false,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'creationTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      previousState: {
        required: false,
        serializedName: 'previousState',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'disabling', 'disabled', 'enabling', 'terminating', 'completed', 'deleting' ]
        }
      },
      previousStateTransitionTime: {
        required: false,
        serializedName: 'previousStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      priority: {
        required: false,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'JobConstraints'
        }
      },
      jobManagerTask: {
        required: false,
        serializedName: 'jobManagerTask',
        type: {
          name: 'Composite',
          className: 'JobManagerTask'
        }
      },
      jobPreparationTask: {
        required: false,
        serializedName: 'jobPreparationTask',
        type: {
          name: 'Composite',
          className: 'JobPreparationTask'
        }
      },
      jobReleaseTask: {
        required: false,
        serializedName: 'jobReleaseTask',
        type: {
          name: 'Composite',
          className: 'JobReleaseTask'
        }
      },
      commonEnvironmentSettings: {
        required: false,
        serializedName: 'commonEnvironmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      poolInfo: {
        required: false,
        serializedName: 'poolInfo',
        type: {
          name: 'Composite',
          className: 'PoolInformation'
        }
      },
      onAllTasksComplete: {
        required: false,
        serializedName: 'onAllTasksComplete',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'terminatejob' ]
        }
      },
      onTaskFailure: {
        required: false,
        serializedName: 'onTaskFailure',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'performexitoptionsjobaction' ]
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      },
      executionInfo: {
        required: false,
        serializedName: 'executionInfo',
        type: {
          name: 'Composite',
          className: 'JobExecutionInformation'
        }
      },
      stats: {
        required: false,
        serializedName: 'stats',
        type: {
          name: 'Composite',
          className: 'JobStatistics'
        }
      }
    }
  }
};

export const JobAddParameter = {
  required: false,
  serializedName: 'JobAddParameter',
  type: {
    name: 'Composite',
    className: 'JobAddParameter',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      priority: {
        required: false,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'JobConstraints'
        }
      },
      jobManagerTask: {
        required: false,
        serializedName: 'jobManagerTask',
        type: {
          name: 'Composite',
          className: 'JobManagerTask'
        }
      },
      jobPreparationTask: {
        required: false,
        serializedName: 'jobPreparationTask',
        type: {
          name: 'Composite',
          className: 'JobPreparationTask'
        }
      },
      jobReleaseTask: {
        required: false,
        serializedName: 'jobReleaseTask',
        type: {
          name: 'Composite',
          className: 'JobReleaseTask'
        }
      },
      commonEnvironmentSettings: {
        required: false,
        serializedName: 'commonEnvironmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      poolInfo: {
        required: true,
        serializedName: 'poolInfo',
        defaultValue: {},
        type: {
          name: 'Composite',
          className: 'PoolInformation'
        }
      },
      onAllTasksComplete: {
        required: false,
        serializedName: 'onAllTasksComplete',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'terminatejob' ]
        }
      },
      onTaskFailure: {
        required: false,
        serializedName: 'onTaskFailure',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'performexitoptionsjobaction' ]
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      },
      usesTaskDependencies: {
        required: false,
        serializedName: 'usesTaskDependencies',
        type: {
          name: 'Boolean'
        }
      }
    }
  }
};

export const TaskContainerExecutionInformation = {
  required: false,
  serializedName: 'TaskContainerExecutionInformation',
  type: {
    name: 'Composite',
    className: 'TaskContainerExecutionInformation',
    modelProperties: {
      containerId: {
        required: false,
        serializedName: 'containerId',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'String'
        }
      },
      error: {
        required: false,
        serializedName: 'error',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const TaskFailureInformation = {
  required: false,
  serializedName: 'TaskFailureInformation',
  type: {
    name: 'Composite',
    className: 'TaskFailureInformation',
    modelProperties: {
      category: {
        required: true,
        serializedName: 'category',
        type: {
          name: 'Enum',
          allowedValues: [ 'usererror', 'servererror' ]
        }
      },
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      details: {
        required: false,
        serializedName: 'details',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const JobPreparationTaskExecutionInformation = {
  required: false,
  serializedName: 'JobPreparationTaskExecutionInformation',
  type: {
    name: 'Composite',
    className: 'JobPreparationTaskExecutionInformation',
    modelProperties: {
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: true,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'running', 'completed' ]
        }
      },
      taskRootDirectory: {
        required: false,
        serializedName: 'taskRootDirectory',
        type: {
          name: 'String'
        }
      },
      taskRootDirectoryUrl: {
        required: false,
        serializedName: 'taskRootDirectoryUrl',
        type: {
          name: 'String'
        }
      },
      exitCode: {
        required: false,
        serializedName: 'exitCode',
        type: {
          name: 'Number'
        }
      },
      containerInfo: {
        required: false,
        serializedName: 'containerInfo',
        type: {
          name: 'Composite',
          className: 'TaskContainerExecutionInformation'
        }
      },
      failureInfo: {
        required: false,
        serializedName: 'failureInfo',
        type: {
          name: 'Composite',
          className: 'TaskFailureInformation'
        }
      },
      retryCount: {
        required: true,
        serializedName: 'retryCount',
        type: {
          name: 'Number'
        }
      },
      lastRetryTime: {
        required: false,
        serializedName: 'lastRetryTime',
        type: {
          name: 'DateTime'
        }
      },
      result: {
        required: false,
        serializedName: 'result',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'failure' ]
        }
      }
    }
  }
};

export const JobReleaseTaskExecutionInformation = {
  required: false,
  serializedName: 'JobReleaseTaskExecutionInformation',
  type: {
    name: 'Composite',
    className: 'JobReleaseTaskExecutionInformation',
    modelProperties: {
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: true,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'running', 'completed' ]
        }
      },
      taskRootDirectory: {
        required: false,
        serializedName: 'taskRootDirectory',
        type: {
          name: 'String'
        }
      },
      taskRootDirectoryUrl: {
        required: false,
        serializedName: 'taskRootDirectoryUrl',
        type: {
          name: 'String'
        }
      },
      exitCode: {
        required: false,
        serializedName: 'exitCode',
        type: {
          name: 'Number'
        }
      },
      containerInfo: {
        required: false,
        serializedName: 'containerInfo',
        type: {
          name: 'Composite',
          className: 'TaskContainerExecutionInformation'
        }
      },
      failureInfo: {
        required: false,
        serializedName: 'failureInfo',
        type: {
          name: 'Composite',
          className: 'TaskFailureInformation'
        }
      },
      result: {
        required: false,
        serializedName: 'result',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'failure' ]
        }
      }
    }
  }
};

export const JobPreparationAndReleaseTaskExecutionInformation = {
  required: false,
  serializedName: 'JobPreparationAndReleaseTaskExecutionInformation',
  type: {
    name: 'Composite',
    className: 'JobPreparationAndReleaseTaskExecutionInformation',
    modelProperties: {
      poolId: {
        required: false,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      nodeId: {
        required: false,
        serializedName: 'nodeId',
        type: {
          name: 'String'
        }
      },
      nodeUrl: {
        required: false,
        serializedName: 'nodeUrl',
        type: {
          name: 'String'
        }
      },
      jobPreparationTaskExecutionInfo: {
        required: false,
        serializedName: 'jobPreparationTaskExecutionInfo',
        type: {
          name: 'Composite',
          className: 'JobPreparationTaskExecutionInformation'
        }
      },
      jobReleaseTaskExecutionInfo: {
        required: false,
        serializedName: 'jobReleaseTaskExecutionInfo',
        type: {
          name: 'Composite',
          className: 'JobReleaseTaskExecutionInformation'
        }
      }
    }
  }
};

export const TaskCounts = {
  required: false,
  serializedName: 'TaskCounts',
  type: {
    name: 'Composite',
    className: 'TaskCounts',
    modelProperties: {
      active: {
        required: true,
        serializedName: 'active',
        type: {
          name: 'Number'
        }
      },
      running: {
        required: true,
        serializedName: 'running',
        type: {
          name: 'Number'
        }
      },
      completed: {
        required: true,
        serializedName: 'completed',
        type: {
          name: 'Number'
        }
      },
      succeeded: {
        required: true,
        serializedName: 'succeeded',
        type: {
          name: 'Number'
        }
      },
      failed: {
        required: true,
        serializedName: 'failed',
        type: {
          name: 'Number'
        }
      },
      validationStatus: {
        required: true,
        serializedName: 'validationStatus',
        type: {
          name: 'Enum',
          allowedValues: [ 'validated', 'unvalidated' ]
        }
      }
    }
  }
};

export const AutoScaleRunError = {
  required: false,
  serializedName: 'AutoScaleRunError',
  type: {
    name: 'Composite',
    className: 'AutoScaleRunError',
    modelProperties: {
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const AutoScaleRun = {
  required: false,
  serializedName: 'AutoScaleRun',
  type: {
    name: 'Composite',
    className: 'AutoScaleRun',
    modelProperties: {
      timestamp: {
        required: true,
        serializedName: 'timestamp',
        type: {
          name: 'DateTime'
        }
      },
      results: {
        required: false,
        serializedName: 'results',
        type: {
          name: 'String'
        }
      },
      error: {
        required: false,
        serializedName: 'error',
        type: {
          name: 'Composite',
          className: 'AutoScaleRunError'
        }
      }
    }
  }
};

export const ResizeError = {
  required: false,
  serializedName: 'ResizeError',
  type: {
    name: 'Composite',
    className: 'ResizeError',
    modelProperties: {
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const CloudPool = {
  required: false,
  serializedName: 'CloudPool',
  type: {
    name: 'Composite',
    className: 'CloudPool',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      eTag: {
        required: false,
        serializedName: 'eTag',
        type: {
          name: 'String'
        }
      },
      lastModified: {
        required: false,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'creationTime',
        type: {
          name: 'DateTime'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'deleting', 'upgrading' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      allocationState: {
        required: false,
        serializedName: 'allocationState',
        type: {
          name: 'Enum',
          allowedValues: [ 'steady', 'resizing', 'stopping' ]
        }
      },
      allocationStateTransitionTime: {
        required: false,
        serializedName: 'allocationStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      vmSize: {
        required: false,
        serializedName: 'vmSize',
        type: {
          name: 'String'
        }
      },
      cloudServiceConfiguration: {
        required: false,
        serializedName: 'cloudServiceConfiguration',
        type: {
          name: 'Composite',
          className: 'CloudServiceConfiguration'
        }
      },
      virtualMachineConfiguration: {
        required: false,
        serializedName: 'virtualMachineConfiguration',
        type: {
          name: 'Composite',
          className: 'VirtualMachineConfiguration'
        }
      },
      resizeTimeout: {
        required: false,
        serializedName: 'resizeTimeout',
        type: {
          name: 'TimeSpan'
        }
      },
      resizeErrors: {
        required: false,
        serializedName: 'resizeErrors',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResizeErrorElementType',
              type: {
                name: 'Composite',
                className: 'ResizeError'
              }
          }
        }
      },
      currentDedicatedNodes: {
        required: false,
        serializedName: 'currentDedicatedNodes',
        type: {
          name: 'Number'
        }
      },
      currentLowPriorityNodes: {
        required: false,
        serializedName: 'currentLowPriorityNodes',
        type: {
          name: 'Number'
        }
      },
      targetDedicatedNodes: {
        required: false,
        serializedName: 'targetDedicatedNodes',
        type: {
          name: 'Number'
        }
      },
      targetLowPriorityNodes: {
        required: false,
        serializedName: 'targetLowPriorityNodes',
        type: {
          name: 'Number'
        }
      },
      enableAutoScale: {
        required: false,
        serializedName: 'enableAutoScale',
        type: {
          name: 'Boolean'
        }
      },
      autoScaleFormula: {
        required: false,
        serializedName: 'autoScaleFormula',
        type: {
          name: 'String'
        }
      },
      autoScaleEvaluationInterval: {
        required: false,
        serializedName: 'autoScaleEvaluationInterval',
        type: {
          name: 'TimeSpan'
        }
      },
      autoScaleRun: {
        required: false,
        serializedName: 'autoScaleRun',
        type: {
          name: 'Composite',
          className: 'AutoScaleRun'
        }
      },
      enableInterNodeCommunication: {
        required: false,
        serializedName: 'enableInterNodeCommunication',
        type: {
          name: 'Boolean'
        }
      },
      networkConfiguration: {
        required: false,
        serializedName: 'networkConfiguration',
        type: {
          name: 'Composite',
          className: 'NetworkConfiguration'
        }
      },
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      certificateReferences: {
        required: false,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      applicationLicenses: {
        required: false,
        serializedName: 'applicationLicenses',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      maxTasksPerNode: {
        required: false,
        serializedName: 'maxTasksPerNode',
        type: {
          name: 'Number'
        }
      },
      taskSchedulingPolicy: {
        required: false,
        serializedName: 'taskSchedulingPolicy',
        type: {
          name: 'Composite',
          className: 'TaskSchedulingPolicy'
        }
      },
      userAccounts: {
        required: false,
        serializedName: 'userAccounts',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'UserAccountElementType',
              type: {
                name: 'Composite',
                className: 'UserAccount'
              }
          }
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      },
      stats: {
        required: false,
        serializedName: 'stats',
        type: {
          name: 'Composite',
          className: 'PoolStatistics'
        }
      }
    }
  }
};

export const PoolAddParameter = {
  required: false,
  serializedName: 'PoolAddParameter',
  type: {
    name: 'Composite',
    className: 'PoolAddParameter',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      vmSize: {
        required: true,
        serializedName: 'vmSize',
        type: {
          name: 'String'
        }
      },
      cloudServiceConfiguration: {
        required: false,
        serializedName: 'cloudServiceConfiguration',
        type: {
          name: 'Composite',
          className: 'CloudServiceConfiguration'
        }
      },
      virtualMachineConfiguration: {
        required: false,
        serializedName: 'virtualMachineConfiguration',
        type: {
          name: 'Composite',
          className: 'VirtualMachineConfiguration'
        }
      },
      resizeTimeout: {
        required: false,
        serializedName: 'resizeTimeout',
        type: {
          name: 'TimeSpan'
        }
      },
      targetDedicatedNodes: {
        required: false,
        serializedName: 'targetDedicatedNodes',
        type: {
          name: 'Number'
        }
      },
      targetLowPriorityNodes: {
        required: false,
        serializedName: 'targetLowPriorityNodes',
        type: {
          name: 'Number'
        }
      },
      enableAutoScale: {
        required: false,
        serializedName: 'enableAutoScale',
        type: {
          name: 'Boolean'
        }
      },
      autoScaleFormula: {
        required: false,
        serializedName: 'autoScaleFormula',
        type: {
          name: 'String'
        }
      },
      autoScaleEvaluationInterval: {
        required: false,
        serializedName: 'autoScaleEvaluationInterval',
        type: {
          name: 'TimeSpan'
        }
      },
      enableInterNodeCommunication: {
        required: false,
        serializedName: 'enableInterNodeCommunication',
        type: {
          name: 'Boolean'
        }
      },
      networkConfiguration: {
        required: false,
        serializedName: 'networkConfiguration',
        type: {
          name: 'Composite',
          className: 'NetworkConfiguration'
        }
      },
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      certificateReferences: {
        required: false,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      applicationLicenses: {
        required: false,
        serializedName: 'applicationLicenses',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      maxTasksPerNode: {
        required: false,
        serializedName: 'maxTasksPerNode',
        type: {
          name: 'Number'
        }
      },
      taskSchedulingPolicy: {
        required: false,
        serializedName: 'taskSchedulingPolicy',
        type: {
          name: 'Composite',
          className: 'TaskSchedulingPolicy'
        }
      },
      userAccounts: {
        required: false,
        serializedName: 'userAccounts',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'UserAccountElementType',
              type: {
                name: 'Composite',
                className: 'UserAccount'
              }
          }
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const AffinityInformation = {
  required: false,
  serializedName: 'AffinityInformation',
  type: {
    name: 'Composite',
    className: 'AffinityInformation',
    modelProperties: {
      affinityId: {
        required: true,
        serializedName: 'affinityId',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const TaskExecutionInformation = {
  required: false,
  serializedName: 'TaskExecutionInformation',
  type: {
    name: 'Composite',
    className: 'TaskExecutionInformation',
    modelProperties: {
      startTime: {
        required: false,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      exitCode: {
        required: false,
        serializedName: 'exitCode',
        type: {
          name: 'Number'
        }
      },
      containerInfo: {
        required: false,
        serializedName: 'containerInfo',
        type: {
          name: 'Composite',
          className: 'TaskContainerExecutionInformation'
        }
      },
      failureInfo: {
        required: false,
        serializedName: 'failureInfo',
        type: {
          name: 'Composite',
          className: 'TaskFailureInformation'
        }
      },
      retryCount: {
        required: true,
        serializedName: 'retryCount',
        type: {
          name: 'Number'
        }
      },
      lastRetryTime: {
        required: false,
        serializedName: 'lastRetryTime',
        type: {
          name: 'DateTime'
        }
      },
      requeueCount: {
        required: true,
        serializedName: 'requeueCount',
        type: {
          name: 'Number'
        }
      },
      lastRequeueTime: {
        required: false,
        serializedName: 'lastRequeueTime',
        type: {
          name: 'DateTime'
        }
      },
      result: {
        required: false,
        serializedName: 'result',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'failure' ]
        }
      }
    }
  }
};

export const ComputeNodeInformation = {
  required: false,
  serializedName: 'ComputeNodeInformation',
  type: {
    name: 'Composite',
    className: 'ComputeNodeInformation',
    modelProperties: {
      affinityId: {
        required: false,
        serializedName: 'affinityId',
        type: {
          name: 'String'
        }
      },
      nodeUrl: {
        required: false,
        serializedName: 'nodeUrl',
        type: {
          name: 'String'
        }
      },
      poolId: {
        required: false,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      nodeId: {
        required: false,
        serializedName: 'nodeId',
        type: {
          name: 'String'
        }
      },
      taskRootDirectory: {
        required: false,
        serializedName: 'taskRootDirectory',
        type: {
          name: 'String'
        }
      },
      taskRootDirectoryUrl: {
        required: false,
        serializedName: 'taskRootDirectoryUrl',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const MultiInstanceSettings = {
  required: false,
  serializedName: 'MultiInstanceSettings',
  type: {
    name: 'Composite',
    className: 'MultiInstanceSettings',
    modelProperties: {
      numberOfInstances: {
        required: false,
        serializedName: 'numberOfInstances',
        type: {
          name: 'Number'
        }
      },
      coordinationCommandLine: {
        required: true,
        serializedName: 'coordinationCommandLine',
        type: {
          name: 'String'
        }
      },
      commonResourceFiles: {
        required: false,
        serializedName: 'commonResourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      }
    }
  }
};

export const TaskStatistics = {
  required: false,
  serializedName: 'TaskStatistics',
  type: {
    name: 'Composite',
    className: 'TaskStatistics',
    modelProperties: {
      url: {
        required: true,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      lastUpdateTime: {
        required: true,
        serializedName: 'lastUpdateTime',
        type: {
          name: 'DateTime'
        }
      },
      userCPUTime: {
        required: true,
        serializedName: 'userCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      kernelCPUTime: {
        required: true,
        serializedName: 'kernelCPUTime',
        type: {
          name: 'TimeSpan'
        }
      },
      wallClockTime: {
        required: true,
        serializedName: 'wallClockTime',
        type: {
          name: 'TimeSpan'
        }
      },
      readIOps: {
        required: true,
        serializedName: 'readIOps',
        type: {
          name: 'Number'
        }
      },
      writeIOps: {
        required: true,
        serializedName: 'writeIOps',
        type: {
          name: 'Number'
        }
      },
      readIOGiB: {
        required: true,
        serializedName: 'readIOGiB',
        type: {
          name: 'Number'
        }
      },
      writeIOGiB: {
        required: true,
        serializedName: 'writeIOGiB',
        type: {
          name: 'Number'
        }
      },
      waitTime: {
        required: true,
        serializedName: 'waitTime',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const TaskIdRange = {
  required: false,
  serializedName: 'TaskIdRange',
  type: {
    name: 'Composite',
    className: 'TaskIdRange',
    modelProperties: {
      start: {
        required: true,
        serializedName: 'start',
        type: {
          name: 'Number'
        }
      },
      end: {
        required: true,
        serializedName: 'end',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const TaskDependencies = {
  required: false,
  serializedName: 'TaskDependencies',
  type: {
    name: 'Composite',
    className: 'TaskDependencies',
    modelProperties: {
      taskIds: {
        required: false,
        serializedName: 'taskIds',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      taskIdRanges: {
        required: false,
        serializedName: 'taskIdRanges',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'TaskIdRangeElementType',
              type: {
                name: 'Composite',
                className: 'TaskIdRange'
              }
          }
        }
      }
    }
  }
};

export const CloudTask = {
  required: false,
  serializedName: 'CloudTask',
  type: {
    name: 'Composite',
    className: 'CloudTask',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      eTag: {
        required: false,
        serializedName: 'eTag',
        type: {
          name: 'String'
        }
      },
      lastModified: {
        required: false,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      creationTime: {
        required: false,
        serializedName: 'creationTime',
        type: {
          name: 'DateTime'
        }
      },
      exitConditions: {
        required: false,
        serializedName: 'exitConditions',
        type: {
          name: 'Composite',
          className: 'ExitConditions'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      previousState: {
        required: false,
        serializedName: 'previousState',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
        }
      },
      previousStateTransitionTime: {
        required: false,
        serializedName: 'previousStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      commandLine: {
        required: false,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      outputFiles: {
        required: false,
        serializedName: 'outputFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'OutputFileElementType',
              type: {
                name: 'Composite',
                className: 'OutputFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      affinityInfo: {
        required: false,
        serializedName: 'affinityInfo',
        type: {
          name: 'Composite',
          className: 'AffinityInformation'
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'TaskConstraints'
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      },
      executionInfo: {
        required: false,
        serializedName: 'executionInfo',
        type: {
          name: 'Composite',
          className: 'TaskExecutionInformation'
        }
      },
      nodeInfo: {
        required: false,
        serializedName: 'nodeInfo',
        type: {
          name: 'Composite',
          className: 'ComputeNodeInformation'
        }
      },
      multiInstanceSettings: {
        required: false,
        serializedName: 'multiInstanceSettings',
        type: {
          name: 'Composite',
          className: 'MultiInstanceSettings'
        }
      },
      stats: {
        required: false,
        serializedName: 'stats',
        type: {
          name: 'Composite',
          className: 'TaskStatistics'
        }
      },
      dependsOn: {
        required: false,
        serializedName: 'dependsOn',
        type: {
          name: 'Composite',
          className: 'TaskDependencies'
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      authenticationTokenSettings: {
        required: false,
        serializedName: 'authenticationTokenSettings',
        type: {
          name: 'Composite',
          className: 'AuthenticationTokenSettings'
        }
      }
    }
  }
};

export const TaskAddParameter = {
  required: false,
  serializedName: 'TaskAddParameter',
  type: {
    name: 'Composite',
    className: 'TaskAddParameter',
    modelProperties: {
      id: {
        required: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      displayName: {
        required: false,
        serializedName: 'displayName',
        type: {
          name: 'String'
        }
      },
      commandLine: {
        required: true,
        serializedName: 'commandLine',
        type: {
          name: 'String'
        }
      },
      containerSettings: {
        required: false,
        serializedName: 'containerSettings',
        type: {
          name: 'Composite',
          className: 'TaskContainerSettings'
        }
      },
      exitConditions: {
        required: false,
        serializedName: 'exitConditions',
        type: {
          name: 'Composite',
          className: 'ExitConditions'
        }
      },
      resourceFiles: {
        required: false,
        serializedName: 'resourceFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ResourceFileElementType',
              type: {
                name: 'Composite',
                className: 'ResourceFile'
              }
          }
        }
      },
      outputFiles: {
        required: false,
        serializedName: 'outputFiles',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'OutputFileElementType',
              type: {
                name: 'Composite',
                className: 'OutputFile'
              }
          }
        }
      },
      environmentSettings: {
        required: false,
        serializedName: 'environmentSettings',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'EnvironmentSettingElementType',
              type: {
                name: 'Composite',
                className: 'EnvironmentSetting'
              }
          }
        }
      },
      affinityInfo: {
        required: false,
        serializedName: 'affinityInfo',
        type: {
          name: 'Composite',
          className: 'AffinityInformation'
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'TaskConstraints'
        }
      },
      userIdentity: {
        required: false,
        serializedName: 'userIdentity',
        type: {
          name: 'Composite',
          className: 'UserIdentity'
        }
      },
      multiInstanceSettings: {
        required: false,
        serializedName: 'multiInstanceSettings',
        type: {
          name: 'Composite',
          className: 'MultiInstanceSettings'
        }
      },
      dependsOn: {
        required: false,
        serializedName: 'dependsOn',
        type: {
          name: 'Composite',
          className: 'TaskDependencies'
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      authenticationTokenSettings: {
        required: false,
        serializedName: 'authenticationTokenSettings',
        type: {
          name: 'Composite',
          className: 'AuthenticationTokenSettings'
        }
      }
    }
  }
};

export const TaskAddCollectionParameter = {
  required: false,
  serializedName: 'TaskAddCollectionParameter',
  type: {
    name: 'Composite',
    className: 'TaskAddCollectionParameter',
    modelProperties: {
      value: {
        required: true,
        serializedName: 'value',
        constraints: {
          MaxItems: 100
        },
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'TaskAddParameterElementType',
              type: {
                name: 'Composite',
                className: 'TaskAddParameter'
              }
          }
        }
      }
    }
  }
};

export const ErrorMessage = {
  required: false,
  serializedName: 'ErrorMessage',
  type: {
    name: 'Composite',
    className: 'ErrorMessage',
    modelProperties: {
      lang: {
        required: false,
        serializedName: 'lang',
        type: {
          name: 'String'
        }
      },
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const BatchErrorDetail = {
  required: false,
  serializedName: 'BatchErrorDetail',
  type: {
    name: 'Composite',
    className: 'BatchErrorDetail',
    modelProperties: {
      key: {
        required: false,
        serializedName: 'key',
        type: {
          name: 'String'
        }
      },
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const BatchError = {
  required: false,
  serializedName: 'BatchError',
  type: {
    name: 'Composite',
    className: 'BatchError',
    modelProperties: {
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'Composite',
          className: 'ErrorMessage'
        }
      },
      values: {
        required: false,
        serializedName: 'values',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'BatchErrorDetailElementType',
              type: {
                name: 'Composite',
                className: 'BatchErrorDetail'
              }
          }
        }
      }
    }
  }
};

export const TaskAddResult = {
  required: false,
  serializedName: 'TaskAddResult',
  type: {
    name: 'Composite',
    className: 'TaskAddResult',
    modelProperties: {
      status: {
        required: true,
        serializedName: 'status',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'clienterror', 'servererror' ]
        }
      },
      taskId: {
        required: true,
        serializedName: 'taskId',
        type: {
          name: 'String'
        }
      },
      eTag: {
        required: false,
        serializedName: 'eTag',
        type: {
          name: 'String'
        }
      },
      lastModified: {
        required: false,
        serializedName: 'lastModified',
        type: {
          name: 'DateTime'
        }
      },
      location: {
        required: false,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      error: {
        required: false,
        serializedName: 'error',
        type: {
          name: 'Composite',
          className: 'BatchError'
        }
      }
    }
  }
};

export const TaskAddCollectionResult = {
  required: false,
  serializedName: 'TaskAddCollectionResult',
  type: {
    name: 'Composite',
    className: 'TaskAddCollectionResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'TaskAddResultElementType',
              type: {
                name: 'Composite',
                className: 'TaskAddResult'
              }
          }
        }
      }
    }
  }
};

export const SubtaskInformation = {
  required: false,
  serializedName: 'SubtaskInformation',
  type: {
    name: 'Composite',
    className: 'SubtaskInformation',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'Number'
        }
      },
      nodeInfo: {
        required: false,
        serializedName: 'nodeInfo',
        type: {
          name: 'Composite',
          className: 'ComputeNodeInformation'
        }
      },
      startTime: {
        required: false,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      exitCode: {
        required: false,
        serializedName: 'exitCode',
        type: {
          name: 'Number'
        }
      },
      containerInfo: {
        required: false,
        serializedName: 'containerInfo',
        type: {
          name: 'Composite',
          className: 'TaskContainerExecutionInformation'
        }
      },
      failureInfo: {
        required: false,
        serializedName: 'failureInfo',
        type: {
          name: 'Composite',
          className: 'TaskFailureInformation'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'preparing', 'running', 'completed' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      previousState: {
        required: false,
        serializedName: 'previousState',
        type: {
          name: 'Enum',
          allowedValues: [ 'preparing', 'running', 'completed' ]
        }
      },
      previousStateTransitionTime: {
        required: false,
        serializedName: 'previousStateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      result: {
        required: false,
        serializedName: 'result',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'failure' ]
        }
      }
    }
  }
};

export const CloudTaskListSubtasksResult = {
  required: false,
  serializedName: 'CloudTaskListSubtasksResult',
  type: {
    name: 'Composite',
    className: 'CloudTaskListSubtasksResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'SubtaskInformationElementType',
              type: {
                name: 'Composite',
                className: 'SubtaskInformation'
              }
          }
        }
      }
    }
  }
};

export const TaskInformation = {
  required: false,
  serializedName: 'TaskInformation',
  type: {
    name: 'Composite',
    className: 'TaskInformation',
    modelProperties: {
      taskUrl: {
        required: false,
        serializedName: 'taskUrl',
        type: {
          name: 'String'
        }
      },
      jobId: {
        required: false,
        serializedName: 'jobId',
        type: {
          name: 'String'
        }
      },
      taskId: {
        required: false,
        serializedName: 'taskId',
        type: {
          name: 'String'
        }
      },
      subtaskId: {
        required: false,
        serializedName: 'subtaskId',
        type: {
          name: 'Number'
        }
      },
      taskState: {
        required: true,
        serializedName: 'taskState',
        type: {
          name: 'Enum',
          allowedValues: [ 'active', 'preparing', 'running', 'completed' ]
        }
      },
      executionInfo: {
        required: false,
        serializedName: 'executionInfo',
        type: {
          name: 'Composite',
          className: 'TaskExecutionInformation'
        }
      }
    }
  }
};

export const StartTaskInformation = {
  required: false,
  serializedName: 'StartTaskInformation',
  type: {
    name: 'Composite',
    className: 'StartTaskInformation',
    modelProperties: {
      state: {
        required: true,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'running', 'completed' ]
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      },
      exitCode: {
        required: false,
        serializedName: 'exitCode',
        type: {
          name: 'Number'
        }
      },
      containerInfo: {
        required: false,
        serializedName: 'containerInfo',
        type: {
          name: 'Composite',
          className: 'TaskContainerExecutionInformation'
        }
      },
      failureInfo: {
        required: false,
        serializedName: 'failureInfo',
        type: {
          name: 'Composite',
          className: 'TaskFailureInformation'
        }
      },
      retryCount: {
        required: true,
        serializedName: 'retryCount',
        type: {
          name: 'Number'
        }
      },
      lastRetryTime: {
        required: false,
        serializedName: 'lastRetryTime',
        type: {
          name: 'DateTime'
        }
      },
      result: {
        required: false,
        serializedName: 'result',
        type: {
          name: 'Enum',
          allowedValues: [ 'success', 'failure' ]
        }
      }
    }
  }
};

export const ComputeNodeError = {
  required: false,
  serializedName: 'ComputeNodeError',
  type: {
    name: 'Composite',
    className: 'ComputeNodeError',
    modelProperties: {
      code: {
        required: false,
        serializedName: 'code',
        type: {
          name: 'String'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      errorDetails: {
        required: false,
        serializedName: 'errorDetails',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NameValuePairElementType',
              type: {
                name: 'Composite',
                className: 'NameValuePair'
              }
          }
        }
      }
    }
  }
};

export const InboundEndpoint = {
  required: false,
  serializedName: 'InboundEndpoint',
  type: {
    name: 'Composite',
    className: 'InboundEndpoint',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      protocol: {
        required: true,
        serializedName: 'protocol',
        type: {
          name: 'Enum',
          allowedValues: [ 'tcp', 'udp' ]
        }
      },
      publicIPAddress: {
        required: true,
        serializedName: 'publicIPAddress',
        type: {
          name: 'String'
        }
      },
      publicFQDN: {
        required: true,
        serializedName: 'publicFQDN',
        type: {
          name: 'String'
        }
      },
      frontendPort: {
        required: true,
        serializedName: 'frontendPort',
        type: {
          name: 'Number'
        }
      },
      backendPort: {
        required: true,
        serializedName: 'backendPort',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const ComputeNodeEndpointConfiguration = {
  required: false,
  serializedName: 'ComputeNodeEndpointConfiguration',
  type: {
    name: 'Composite',
    className: 'ComputeNodeEndpointConfiguration',
    modelProperties: {
      inboundEndpoints: {
        required: true,
        serializedName: 'inboundEndpoints',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'InboundEndpointElementType',
              type: {
                name: 'Composite',
                className: 'InboundEndpoint'
              }
          }
        }
      }
    }
  }
};

export const ComputeNode = {
  required: false,
  serializedName: 'ComputeNode',
  type: {
    name: 'Composite',
    className: 'ComputeNode',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      url: {
        required: false,
        serializedName: 'url',
        type: {
          name: 'String'
        }
      },
      state: {
        required: false,
        serializedName: 'state',
        type: {
          name: 'Enum',
          allowedValues: [ 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingforstarttask', 'starttaskfailed', 'unknown', 'leavingpool', 'offline', 'preempted' ]
        }
      },
      schedulingState: {
        required: false,
        serializedName: 'schedulingState',
        type: {
          name: 'Enum',
          allowedValues: [ 'enabled', 'disabled' ]
        }
      },
      stateTransitionTime: {
        required: false,
        serializedName: 'stateTransitionTime',
        type: {
          name: 'DateTime'
        }
      },
      lastBootTime: {
        required: false,
        serializedName: 'lastBootTime',
        type: {
          name: 'DateTime'
        }
      },
      allocationTime: {
        required: false,
        serializedName: 'allocationTime',
        type: {
          name: 'DateTime'
        }
      },
      ipAddress: {
        required: false,
        serializedName: 'ipAddress',
        type: {
          name: 'String'
        }
      },
      affinityId: {
        required: false,
        serializedName: 'affinityId',
        type: {
          name: 'String'
        }
      },
      vmSize: {
        required: false,
        serializedName: 'vmSize',
        type: {
          name: 'String'
        }
      },
      totalTasksRun: {
        required: false,
        serializedName: 'totalTasksRun',
        type: {
          name: 'Number'
        }
      },
      runningTasksCount: {
        required: false,
        serializedName: 'runningTasksCount',
        type: {
          name: 'Number'
        }
      },
      totalTasksSucceeded: {
        required: false,
        serializedName: 'totalTasksSucceeded',
        type: {
          name: 'Number'
        }
      },
      recentTasks: {
        required: false,
        serializedName: 'recentTasks',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'TaskInformationElementType',
              type: {
                name: 'Composite',
                className: 'TaskInformation'
              }
          }
        }
      },
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      startTaskInfo: {
        required: false,
        serializedName: 'startTaskInfo',
        type: {
          name: 'Composite',
          className: 'StartTaskInformation'
        }
      },
      certificateReferences: {
        required: false,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      errors: {
        required: false,
        serializedName: 'errors',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ComputeNodeErrorElementType',
              type: {
                name: 'Composite',
                className: 'ComputeNodeError'
              }
          }
        }
      },
      isDedicated: {
        required: false,
        serializedName: 'isDedicated',
        type: {
          name: 'Boolean'
        }
      },
      endpointConfiguration: {
        required: false,
        serializedName: 'endpointConfiguration',
        type: {
          name: 'Composite',
          className: 'ComputeNodeEndpointConfiguration'
        }
      }
    }
  }
};

export const ComputeNodeUser = {
  required: false,
  serializedName: 'ComputeNodeUser',
  type: {
    name: 'Composite',
    className: 'ComputeNodeUser',
    modelProperties: {
      name: {
        required: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      isAdmin: {
        required: false,
        serializedName: 'isAdmin',
        type: {
          name: 'Boolean'
        }
      },
      expiryTime: {
        required: false,
        serializedName: 'expiryTime',
        type: {
          name: 'DateTime'
        }
      },
      password: {
        required: false,
        serializedName: 'password',
        type: {
          name: 'String'
        }
      },
      sshPublicKey: {
        required: false,
        serializedName: 'sshPublicKey',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsResult = {
  required: false,
  serializedName: 'ComputeNodeGetRemoteLoginSettingsResult',
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetRemoteLoginSettingsResult',
    modelProperties: {
      remoteLoginIPAddress: {
        required: true,
        serializedName: 'remoteLoginIPAddress',
        type: {
          name: 'String'
        }
      },
      remoteLoginPort: {
        required: true,
        serializedName: 'remoteLoginPort',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const JobSchedulePatchParameter = {
  required: false,
  serializedName: 'JobSchedulePatchParameter',
  type: {
    name: 'Composite',
    className: 'JobSchedulePatchParameter',
    modelProperties: {
      schedule: {
        required: false,
        serializedName: 'schedule',
        type: {
          name: 'Composite',
          className: 'Schedule'
        }
      },
      jobSpecification: {
        required: false,
        serializedName: 'jobSpecification',
        type: {
          name: 'Composite',
          className: 'JobSpecification'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const JobScheduleUpdateParameter = {
  required: false,
  serializedName: 'JobScheduleUpdateParameter',
  type: {
    name: 'Composite',
    className: 'JobScheduleUpdateParameter',
    modelProperties: {
      schedule: {
        required: true,
        serializedName: 'schedule',
        type: {
          name: 'Composite',
          className: 'Schedule'
        }
      },
      jobSpecification: {
        required: true,
        serializedName: 'jobSpecification',
        defaultValue: {},
        type: {
          name: 'Composite',
          className: 'JobSpecification'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const JobDisableParameter = {
  required: false,
  serializedName: 'JobDisableParameter',
  type: {
    name: 'Composite',
    className: 'JobDisableParameter',
    modelProperties: {
      disableTasks: {
        required: true,
        serializedName: 'disableTasks',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'wait' ]
        }
      }
    }
  }
};

export const JobTerminateParameter = {
  required: false,
  serializedName: 'JobTerminateParameter',
  type: {
    name: 'Composite',
    className: 'JobTerminateParameter',
    modelProperties: {
      terminateReason: {
        required: false,
        serializedName: 'terminateReason',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const JobPatchParameter = {
  required: false,
  serializedName: 'JobPatchParameter',
  type: {
    name: 'Composite',
    className: 'JobPatchParameter',
    modelProperties: {
      priority: {
        required: false,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      onAllTasksComplete: {
        required: false,
        serializedName: 'onAllTasksComplete',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'terminatejob' ]
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'JobConstraints'
        }
      },
      poolInfo: {
        required: false,
        serializedName: 'poolInfo',
        type: {
          name: 'Composite',
          className: 'PoolInformation'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const JobUpdateParameter = {
  required: false,
  serializedName: 'JobUpdateParameter',
  type: {
    name: 'Composite',
    className: 'JobUpdateParameter',
    modelProperties: {
      priority: {
        required: false,
        serializedName: 'priority',
        type: {
          name: 'Number'
        }
      },
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'JobConstraints'
        }
      },
      poolInfo: {
        required: true,
        serializedName: 'poolInfo',
        defaultValue: {},
        type: {
          name: 'Composite',
          className: 'PoolInformation'
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      },
      onAllTasksComplete: {
        required: false,
        serializedName: 'onAllTasksComplete',
        type: {
          name: 'Enum',
          allowedValues: [ 'noaction', 'terminatejob' ]
        }
      }
    }
  }
};

export const PoolEnableAutoScaleParameter = {
  required: false,
  serializedName: 'PoolEnableAutoScaleParameter',
  type: {
    name: 'Composite',
    className: 'PoolEnableAutoScaleParameter',
    modelProperties: {
      autoScaleFormula: {
        required: false,
        serializedName: 'autoScaleFormula',
        type: {
          name: 'String'
        }
      },
      autoScaleEvaluationInterval: {
        required: false,
        serializedName: 'autoScaleEvaluationInterval',
        type: {
          name: 'TimeSpan'
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleParameter = {
  required: false,
  serializedName: 'PoolEvaluateAutoScaleParameter',
  type: {
    name: 'Composite',
    className: 'PoolEvaluateAutoScaleParameter',
    modelProperties: {
      autoScaleFormula: {
        required: true,
        serializedName: 'autoScaleFormula',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const PoolResizeParameter = {
  required: false,
  serializedName: 'PoolResizeParameter',
  type: {
    name: 'Composite',
    className: 'PoolResizeParameter',
    modelProperties: {
      targetDedicatedNodes: {
        required: false,
        serializedName: 'targetDedicatedNodes',
        type: {
          name: 'Number'
        }
      },
      targetLowPriorityNodes: {
        required: false,
        serializedName: 'targetLowPriorityNodes',
        type: {
          name: 'Number'
        }
      },
      resizeTimeout: {
        required: false,
        serializedName: 'resizeTimeout',
        type: {
          name: 'TimeSpan'
        }
      },
      nodeDeallocationOption: {
        required: false,
        serializedName: 'nodeDeallocationOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'taskcompletion', 'retaineddata' ]
        }
      }
    }
  }
};

export const PoolUpdatePropertiesParameter = {
  required: false,
  serializedName: 'PoolUpdatePropertiesParameter',
  type: {
    name: 'Composite',
    className: 'PoolUpdatePropertiesParameter',
    modelProperties: {
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      certificateReferences: {
        required: true,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      applicationPackageReferences: {
        required: true,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      metadata: {
        required: true,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const PoolUpgradeOSParameter = {
  required: false,
  serializedName: 'PoolUpgradeOSParameter',
  type: {
    name: 'Composite',
    className: 'PoolUpgradeOSParameter',
    modelProperties: {
      targetOSVersion: {
        required: true,
        serializedName: 'targetOSVersion',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const PoolPatchParameter = {
  required: false,
  serializedName: 'PoolPatchParameter',
  type: {
    name: 'Composite',
    className: 'PoolPatchParameter',
    modelProperties: {
      startTask: {
        required: false,
        serializedName: 'startTask',
        type: {
          name: 'Composite',
          className: 'StartTask'
        }
      },
      certificateReferences: {
        required: false,
        serializedName: 'certificateReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateReferenceElementType',
              type: {
                name: 'Composite',
                className: 'CertificateReference'
              }
          }
        }
      },
      applicationPackageReferences: {
        required: false,
        serializedName: 'applicationPackageReferences',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationPackageReferenceElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationPackageReference'
              }
          }
        }
      },
      metadata: {
        required: false,
        serializedName: 'metadata',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'MetadataItemElementType',
              type: {
                name: 'Composite',
                className: 'MetadataItem'
              }
          }
        }
      }
    }
  }
};

export const TaskUpdateParameter = {
  required: false,
  serializedName: 'TaskUpdateParameter',
  type: {
    name: 'Composite',
    className: 'TaskUpdateParameter',
    modelProperties: {
      constraints: {
        required: false,
        serializedName: 'constraints',
        type: {
          name: 'Composite',
          className: 'TaskConstraints'
        }
      }
    }
  }
};

export const NodeUpdateUserParameter = {
  required: false,
  serializedName: 'NodeUpdateUserParameter',
  type: {
    name: 'Composite',
    className: 'NodeUpdateUserParameter',
    modelProperties: {
      password: {
        required: false,
        serializedName: 'password',
        type: {
          name: 'String'
        }
      },
      expiryTime: {
        required: false,
        serializedName: 'expiryTime',
        type: {
          name: 'DateTime'
        }
      },
      sshPublicKey: {
        required: false,
        serializedName: 'sshPublicKey',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NodeRebootParameter = {
  required: false,
  serializedName: 'NodeRebootParameter',
  type: {
    name: 'Composite',
    className: 'NodeRebootParameter',
    modelProperties: {
      nodeRebootOption: {
        required: false,
        serializedName: 'nodeRebootOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'taskcompletion', 'retaineddata' ]
        }
      }
    }
  }
};

export const NodeReimageParameter = {
  required: false,
  serializedName: 'NodeReimageParameter',
  type: {
    name: 'Composite',
    className: 'NodeReimageParameter',
    modelProperties: {
      nodeReimageOption: {
        required: false,
        serializedName: 'nodeReimageOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'taskcompletion', 'retaineddata' ]
        }
      }
    }
  }
};

export const NodeDisableSchedulingParameter = {
  required: false,
  serializedName: 'NodeDisableSchedulingParameter',
  type: {
    name: 'Composite',
    className: 'NodeDisableSchedulingParameter',
    modelProperties: {
      nodeDisableSchedulingOption: {
        required: false,
        serializedName: 'nodeDisableSchedulingOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'taskcompletion' ]
        }
      }
    }
  }
};

export const NodeRemoveParameter = {
  required: false,
  serializedName: 'NodeRemoveParameter',
  type: {
    name: 'Composite',
    className: 'NodeRemoveParameter',
    modelProperties: {
      nodeList: {
        required: true,
        serializedName: 'nodeList',
        constraints: {
          MaxItems: 100
        },
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      resizeTimeout: {
        required: false,
        serializedName: 'resizeTimeout',
        type: {
          name: 'TimeSpan'
        }
      },
      nodeDeallocationOption: {
        required: false,
        serializedName: 'nodeDeallocationOption',
        type: {
          name: 'Enum',
          allowedValues: [ 'requeue', 'terminate', 'taskcompletion', 'retaineddata' ]
        }
      }
    }
  }
};

export const UploadBatchServiceLogsConfiguration = {
  required: false,
  serializedName: 'UploadBatchServiceLogsConfiguration',
  type: {
    name: 'Composite',
    className: 'UploadBatchServiceLogsConfiguration',
    modelProperties: {
      containerUrl: {
        required: true,
        serializedName: 'containerUrl',
        type: {
          name: 'String'
        }
      },
      startTime: {
        required: true,
        serializedName: 'startTime',
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        serializedName: 'endTime',
        type: {
          name: 'DateTime'
        }
      }
    }
  }
};

export const UploadBatchServiceLogsResult = {
  required: false,
  serializedName: 'UploadBatchServiceLogsResult',
  type: {
    name: 'Composite',
    className: 'UploadBatchServiceLogsResult',
    modelProperties: {
      virtualDirectoryName: {
        required: true,
        serializedName: 'virtualDirectoryName',
        type: {
          name: 'String'
        }
      },
      numberOfFilesUploaded: {
        required: true,
        serializedName: 'numberOfFilesUploaded',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const NodeCounts = {
  required: false,
  serializedName: 'NodeCounts',
  type: {
    name: 'Composite',
    className: 'NodeCounts',
    modelProperties: {
      creating: {
        required: true,
        serializedName: 'creating',
        type: {
          name: 'Number'
        }
      },
      idle: {
        required: true,
        serializedName: 'idle',
        type: {
          name: 'Number'
        }
      },
      offline: {
        required: true,
        serializedName: 'offline',
        type: {
          name: 'Number'
        }
      },
      preempted: {
        required: true,
        serializedName: 'preempted',
        type: {
          name: 'Number'
        }
      },
      rebooting: {
        required: true,
        serializedName: 'rebooting',
        type: {
          name: 'Number'
        }
      },
      reimaging: {
        required: true,
        serializedName: 'reimaging',
        type: {
          name: 'Number'
        }
      },
      running: {
        required: true,
        serializedName: 'running',
        type: {
          name: 'Number'
        }
      },
      starting: {
        required: true,
        serializedName: 'starting',
        type: {
          name: 'Number'
        }
      },
      startTaskFailed: {
        required: true,
        serializedName: 'startTaskFailed',
        type: {
          name: 'Number'
        }
      },
      unknown: {
        required: true,
        serializedName: 'unknown',
        type: {
          name: 'Number'
        }
      },
      unusable: {
        required: true,
        serializedName: 'unusable',
        type: {
          name: 'Number'
        }
      },
      waitingForStartTask: {
        required: true,
        serializedName: 'waitingForStartTask',
        type: {
          name: 'Number'
        }
      },
      total: {
        required: true,
        serializedName: 'total',
        type: {
          name: 'Number'
        }
      }
    }
  }
};

export const PoolNodeCounts = {
  required: false,
  serializedName: 'PoolNodeCounts',
  type: {
    name: 'Composite',
    className: 'PoolNodeCounts',
    modelProperties: {
      poolId: {
        required: true,
        serializedName: 'poolId',
        type: {
          name: 'String'
        }
      },
      dedicated: {
        required: false,
        serializedName: 'dedicated',
        type: {
          name: 'Composite',
          className: 'NodeCounts'
        }
      },
      lowPriority: {
        required: false,
        serializedName: 'lowPriority',
        type: {
          name: 'Composite',
          className: 'NodeCounts'
        }
      }
    }
  }
};

export const ApplicationListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ApplicationListOptions',
    modelProperties: {
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ApplicationGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ApplicationGetOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolListUsageMetricsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolListUsageMetricsOptions',
    modelProperties: {
      startTime: {
        required: false,
        type: {
          name: 'DateTime'
        }
      },
      endTime: {
        required: false,
        type: {
          name: 'DateTime'
        }
      },
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolGetAllLifetimeStatisticsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolAddOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolAddOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolDeleteMethodOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolDeleteMethodOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolExistsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolExistsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolPatchOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolPatchOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolDisableAutoScaleOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolDisableAutoScaleOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolEnableAutoScaleOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolEnableAutoScaleOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolEvaluateAutoScaleOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolResizeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolResizeOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolStopResizeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolStopResizeOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolUpdatePropertiesOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolUpdatePropertiesOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolUpgradeOSOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolUpgradeOSOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolRemoveNodesOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolRemoveNodesOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const AccountListNodeAgentSkusOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'AccountListNodeAgentSkusOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'AccountListPoolNodeCountsOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 10,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobGetAllLifetimeStatisticsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobGetAllLifetimeStatisticsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobDeleteMethodOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobDeleteMethodOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobPatchOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobPatchOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobUpdateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobUpdateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobDisableOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobDisableOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobEnableOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobEnableOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobTerminateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobTerminateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobAddOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobAddOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListFromJobScheduleOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListFromJobScheduleOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListPreparationAndReleaseTaskStatusOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobGetTaskCountsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobGetTaskCountsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateAddOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateAddOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateCancelDeletionOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateCancelDeletionOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateDeleteMethodOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateDeleteMethodOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileDeleteFromTaskOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileDeleteFromTaskOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileGetFromTaskOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileGetFromTaskOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ocpRange: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileGetPropertiesFromTaskOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileGetPropertiesFromTaskOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileDeleteFromComputeNodeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileDeleteFromComputeNodeOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileGetFromComputeNodeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileGetFromComputeNodeOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ocpRange: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileGetPropertiesFromComputeNodeOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileListFromTaskOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileListFromTaskOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileListFromComputeNodeOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileListFromComputeNodeOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleExistsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleExistsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleDeleteMethodOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleDeleteMethodOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobSchedulePatchOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobSchedulePatchOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleUpdateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleUpdateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleDisableOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleDisableOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleEnableOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleEnableOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleTerminateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleTerminateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleAddOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleAddOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskAddOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskAddOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskAddCollectionOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskAddCollectionOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskDeleteMethodOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskDeleteMethodOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      expand: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskUpdateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskUpdateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskListSubtasksOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskListSubtasksOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskTerminateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskTerminateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskReactivateOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskReactivateOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifNoneMatch: {
        required: false,
        type: {
          name: 'String'
        }
      },
      ifModifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      },
      ifUnmodifiedSince: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeAddUserOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeAddUserOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeDeleteUserOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeDeleteUserOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeUpdateUserOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeUpdateUserOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeGetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetOptions',
    modelProperties: {
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeRebootOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeRebootOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeReimageOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeReimageOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeDisableSchedulingOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeDisableSchedulingOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeEnableSchedulingOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeEnableSchedulingOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetRemoteLoginSettingsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetRemoteDesktopOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeUploadBatchServiceLogsOptions',
    modelProperties: {
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeListOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeListOptions',
    modelProperties: {
      filter: {
        required: false,
        type: {
          name: 'String'
        }
      },
      select: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxResults: {
        required: false,
        defaultValue: 1000,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      },
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ApplicationListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ApplicationListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolListUsageMetricsNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolListUsageMetricsNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const PoolListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PoolListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const AccountListNodeAgentSkusNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'AccountListNodeAgentSkusNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'AccountListPoolNodeCountsNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListFromJobScheduleNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListFromJobScheduleNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobListPreparationAndReleaseTaskStatusNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const CertificateListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CertificateListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileListFromTaskNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileListFromTaskNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const FileListFromComputeNodeNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FileListFromComputeNodeNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const JobScheduleListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'JobScheduleListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const TaskListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'TaskListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ComputeNodeListNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'ComputeNodeListNextOptions',
    modelProperties: {
      clientRequestId: {
        required: false,
        type: {
          name: 'String'
        }
      },
      returnClientRequestId: {
        required: false,
        defaultValue: false,
        type: {
          name: 'Boolean'
        }
      },
      ocpDate: {
        required: false,
        type: {
          name: 'DateTimeRfc1123'
        }
      }
    }
  }
};

export const ApplicationListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'ApplicationListOptionalParams',
    modelProperties: {
      applicationListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ApplicationListOptions'
        }
      }
    }
  }
};

export const ApplicationGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'ApplicationGetOptionalParams',
    modelProperties: {
      applicationGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ApplicationGetOptions'
        }
      }
    }
  }
};

export const ApplicationListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'ApplicationListNextOptionalParams',
    modelProperties: {
      applicationListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ApplicationListNextOptions'
        }
      }
    }
  }
};

export const PoolListUsageMetricsOptionalParams = {
  required: false,
  serializedName: 'ListUsageMetricsOptions',
  type: {
    name: 'Composite',
    className: 'PoolListUsageMetricsOptionalParams',
    modelProperties: {
      poolListUsageMetricsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolListUsageMetricsOptions'
        }
      }
    }
  }
};

export const PoolGetAllLifetimeStatisticsOptionalParams = {
  required: false,
  serializedName: 'GetAllLifetimeStatisticsOptions',
  type: {
    name: 'Composite',
    className: 'PoolGetAllLifetimeStatisticsOptionalParams',
    modelProperties: {
      poolGetAllLifetimeStatisticsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolGetAllLifetimeStatisticsOptions'
        }
      }
    }
  }
};

export const PoolAddOptionalParams = {
  required: false,
  serializedName: 'AddOptions',
  type: {
    name: 'Composite',
    className: 'PoolAddOptionalParams',
    modelProperties: {
      poolAddOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolAddOptions'
        }
      }
    }
  }
};

export const PoolListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'PoolListOptionalParams',
    modelProperties: {
      poolListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolListOptions'
        }
      }
    }
  }
};

export const PoolDeleteMethodOptionalParams = {
  required: false,
  serializedName: 'DeleteMethodOptions',
  type: {
    name: 'Composite',
    className: 'PoolDeleteMethodOptionalParams',
    modelProperties: {
      poolDeleteMethodOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolDeleteMethodOptions'
        }
      }
    }
  }
};

export const PoolExistsOptionalParams = {
  required: false,
  serializedName: 'ExistsOptions',
  type: {
    name: 'Composite',
    className: 'PoolExistsOptionalParams',
    modelProperties: {
      poolExistsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolExistsOptions'
        }
      }
    }
  }
};

export const PoolGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'PoolGetOptionalParams',
    modelProperties: {
      poolGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolGetOptions'
        }
      }
    }
  }
};

export const PoolPatchOptionalParams = {
  required: false,
  serializedName: 'PatchOptions',
  type: {
    name: 'Composite',
    className: 'PoolPatchOptionalParams',
    modelProperties: {
      poolPatchOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolPatchOptions'
        }
      }
    }
  }
};

export const PoolDisableAutoScaleOptionalParams = {
  required: false,
  serializedName: 'DisableAutoScaleOptions',
  type: {
    name: 'Composite',
    className: 'PoolDisableAutoScaleOptionalParams',
    modelProperties: {
      poolDisableAutoScaleOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolDisableAutoScaleOptions'
        }
      }
    }
  }
};

export const PoolEnableAutoScaleOptionalParams = {
  required: false,
  serializedName: 'EnableAutoScaleOptions',
  type: {
    name: 'Composite',
    className: 'PoolEnableAutoScaleOptionalParams',
    modelProperties: {
      poolEnableAutoScaleOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolEnableAutoScaleOptions'
        }
      }
    }
  }
};

export const PoolEvaluateAutoScaleOptionalParams = {
  required: false,
  serializedName: 'EvaluateAutoScaleOptions',
  type: {
    name: 'Composite',
    className: 'PoolEvaluateAutoScaleOptionalParams',
    modelProperties: {
      poolEvaluateAutoScaleOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolEvaluateAutoScaleOptions'
        }
      }
    }
  }
};

export const PoolResizeOptionalParams = {
  required: false,
  serializedName: 'ResizeOptions',
  type: {
    name: 'Composite',
    className: 'PoolResizeOptionalParams',
    modelProperties: {
      poolResizeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolResizeOptions'
        }
      }
    }
  }
};

export const PoolStopResizeOptionalParams = {
  required: false,
  serializedName: 'StopResizeOptions',
  type: {
    name: 'Composite',
    className: 'PoolStopResizeOptionalParams',
    modelProperties: {
      poolStopResizeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolStopResizeOptions'
        }
      }
    }
  }
};

export const PoolUpdatePropertiesOptionalParams = {
  required: false,
  serializedName: 'UpdatePropertiesOptions',
  type: {
    name: 'Composite',
    className: 'PoolUpdatePropertiesOptionalParams',
    modelProperties: {
      poolUpdatePropertiesOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolUpdatePropertiesOptions'
        }
      }
    }
  }
};

export const PoolUpgradeOSOptionalParams = {
  required: false,
  serializedName: 'UpgradeOSOptions',
  type: {
    name: 'Composite',
    className: 'PoolUpgradeOSOptionalParams',
    modelProperties: {
      poolUpgradeOSOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolUpgradeOSOptions'
        }
      }
    }
  }
};

export const PoolRemoveNodesOptionalParams = {
  required: false,
  serializedName: 'RemoveNodesOptions',
  type: {
    name: 'Composite',
    className: 'PoolRemoveNodesOptionalParams',
    modelProperties: {
      poolRemoveNodesOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolRemoveNodesOptions'
        }
      }
    }
  }
};

export const PoolListUsageMetricsNextOptionalParams = {
  required: false,
  serializedName: 'ListUsageMetricsNextOptions',
  type: {
    name: 'Composite',
    className: 'PoolListUsageMetricsNextOptionalParams',
    modelProperties: {
      poolListUsageMetricsNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolListUsageMetricsNextOptions'
        }
      }
    }
  }
};

export const PoolListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'PoolListNextOptionalParams',
    modelProperties: {
      poolListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'PoolListNextOptions'
        }
      }
    }
  }
};

export const AccountListNodeAgentSkusOptionalParams = {
  required: false,
  serializedName: 'ListNodeAgentSkusOptions',
  type: {
    name: 'Composite',
    className: 'AccountListNodeAgentSkusOptionalParams',
    modelProperties: {
      accountListNodeAgentSkusOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'AccountListNodeAgentSkusOptions'
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsOptionalParams = {
  required: false,
  serializedName: 'ListPoolNodeCountsOptions',
  type: {
    name: 'Composite',
    className: 'AccountListPoolNodeCountsOptionalParams',
    modelProperties: {
      accountListPoolNodeCountsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'AccountListPoolNodeCountsOptions'
        }
      }
    }
  }
};

export const AccountListNodeAgentSkusNextOptionalParams = {
  required: false,
  serializedName: 'ListNodeAgentSkusNextOptions',
  type: {
    name: 'Composite',
    className: 'AccountListNodeAgentSkusNextOptionalParams',
    modelProperties: {
      accountListNodeAgentSkusNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'AccountListNodeAgentSkusNextOptions'
        }
      }
    }
  }
};

export const AccountListPoolNodeCountsNextOptionalParams = {
  required: false,
  serializedName: 'ListPoolNodeCountsNextOptions',
  type: {
    name: 'Composite',
    className: 'AccountListPoolNodeCountsNextOptionalParams',
    modelProperties: {
      accountListPoolNodeCountsNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'AccountListPoolNodeCountsNextOptions'
        }
      }
    }
  }
};

export const JobGetAllLifetimeStatisticsOptionalParams = {
  required: false,
  serializedName: 'GetAllLifetimeStatisticsOptions',
  type: {
    name: 'Composite',
    className: 'JobGetAllLifetimeStatisticsOptionalParams',
    modelProperties: {
      jobGetAllLifetimeStatisticsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobGetAllLifetimeStatisticsOptions'
        }
      }
    }
  }
};

export const JobDeleteMethodOptionalParams = {
  required: false,
  serializedName: 'DeleteMethodOptions',
  type: {
    name: 'Composite',
    className: 'JobDeleteMethodOptionalParams',
    modelProperties: {
      jobDeleteMethodOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobDeleteMethodOptions'
        }
      }
    }
  }
};

export const JobGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'JobGetOptionalParams',
    modelProperties: {
      jobGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobGetOptions'
        }
      }
    }
  }
};

export const JobPatchOptionalParams = {
  required: false,
  serializedName: 'PatchOptions',
  type: {
    name: 'Composite',
    className: 'JobPatchOptionalParams',
    modelProperties: {
      jobPatchOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobPatchOptions'
        }
      }
    }
  }
};

export const JobUpdateOptionalParams = {
  required: false,
  serializedName: 'UpdateOptions',
  type: {
    name: 'Composite',
    className: 'JobUpdateOptionalParams',
    modelProperties: {
      jobUpdateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobUpdateOptions'
        }
      }
    }
  }
};

export const JobDisableOptionalParams = {
  required: false,
  serializedName: 'DisableOptions',
  type: {
    name: 'Composite',
    className: 'JobDisableOptionalParams',
    modelProperties: {
      jobDisableOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobDisableOptions'
        }
      }
    }
  }
};

export const JobEnableOptionalParams = {
  required: false,
  serializedName: 'EnableOptions',
  type: {
    name: 'Composite',
    className: 'JobEnableOptionalParams',
    modelProperties: {
      jobEnableOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobEnableOptions'
        }
      }
    }
  }
};

export const JobTerminateOptionalParams = {
  required: false,
  serializedName: 'TerminateOptions',
  type: {
    name: 'Composite',
    className: 'JobTerminateOptionalParams',
    modelProperties: {
      jobTerminateParameter: {
        required: false,
        serializedName: 'jobTerminateParameter',
        type: {
          name: 'Composite',
          className: 'JobTerminateParameter'
        }
      },
      jobTerminateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobTerminateOptions'
        }
      }
    }
  }
};

export const JobAddOptionalParams = {
  required: false,
  serializedName: 'AddOptions',
  type: {
    name: 'Composite',
    className: 'JobAddOptionalParams',
    modelProperties: {
      jobAddOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobAddOptions'
        }
      }
    }
  }
};

export const JobListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'JobListOptionalParams',
    modelProperties: {
      jobListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListOptions'
        }
      }
    }
  }
};

export const JobListFromJobScheduleOptionalParams = {
  required: false,
  serializedName: 'ListFromJobScheduleOptions',
  type: {
    name: 'Composite',
    className: 'JobListFromJobScheduleOptionalParams',
    modelProperties: {
      jobListFromJobScheduleOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListFromJobScheduleOptions'
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusOptionalParams = {
  required: false,
  serializedName: 'ListPreparationAndReleaseTaskStatusOptions',
  type: {
    name: 'Composite',
    className: 'JobListPreparationAndReleaseTaskStatusOptionalParams',
    modelProperties: {
      jobListPreparationAndReleaseTaskStatusOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListPreparationAndReleaseTaskStatusOptions'
        }
      }
    }
  }
};

export const JobGetTaskCountsOptionalParams = {
  required: false,
  serializedName: 'GetTaskCountsOptions',
  type: {
    name: 'Composite',
    className: 'JobGetTaskCountsOptionalParams',
    modelProperties: {
      jobGetTaskCountsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobGetTaskCountsOptions'
        }
      }
    }
  }
};

export const JobListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'JobListNextOptionalParams',
    modelProperties: {
      jobListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListNextOptions'
        }
      }
    }
  }
};

export const JobListFromJobScheduleNextOptionalParams = {
  required: false,
  serializedName: 'ListFromJobScheduleNextOptions',
  type: {
    name: 'Composite',
    className: 'JobListFromJobScheduleNextOptionalParams',
    modelProperties: {
      jobListFromJobScheduleNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListFromJobScheduleNextOptions'
        }
      }
    }
  }
};

export const JobListPreparationAndReleaseTaskStatusNextOptionalParams = {
  required: false,
  serializedName: 'ListPreparationAndReleaseTaskStatusNextOptions',
  type: {
    name: 'Composite',
    className: 'JobListPreparationAndReleaseTaskStatusNextOptionalParams',
    modelProperties: {
      jobListPreparationAndReleaseTaskStatusNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobListPreparationAndReleaseTaskStatusNextOptions'
        }
      }
    }
  }
};

export const CertificateAddOptionalParams = {
  required: false,
  serializedName: 'AddOptions',
  type: {
    name: 'Composite',
    className: 'CertificateAddOptionalParams',
    modelProperties: {
      certificateAddOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateAddOptions'
        }
      }
    }
  }
};

export const CertificateListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'CertificateListOptionalParams',
    modelProperties: {
      certificateListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateListOptions'
        }
      }
    }
  }
};

export const CertificateCancelDeletionOptionalParams = {
  required: false,
  serializedName: 'CancelDeletionOptions',
  type: {
    name: 'Composite',
    className: 'CertificateCancelDeletionOptionalParams',
    modelProperties: {
      certificateCancelDeletionOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateCancelDeletionOptions'
        }
      }
    }
  }
};

export const CertificateDeleteMethodOptionalParams = {
  required: false,
  serializedName: 'DeleteMethodOptions',
  type: {
    name: 'Composite',
    className: 'CertificateDeleteMethodOptionalParams',
    modelProperties: {
      certificateDeleteMethodOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateDeleteMethodOptions'
        }
      }
    }
  }
};

export const CertificateGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'CertificateGetOptionalParams',
    modelProperties: {
      certificateGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateGetOptions'
        }
      }
    }
  }
};

export const CertificateListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'CertificateListNextOptionalParams',
    modelProperties: {
      certificateListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'CertificateListNextOptions'
        }
      }
    }
  }
};

export const FileDeleteFromTaskOptionalParams = {
  required: false,
  serializedName: 'DeleteFromTaskOptions',
  type: {
    name: 'Composite',
    className: 'FileDeleteFromTaskOptionalParams',
    modelProperties: {
      recursive: {
        required: false,
        serializedName: 'recursive',
        type: {
          name: 'Boolean'
        }
      },
      fileDeleteFromTaskOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileDeleteFromTaskOptions'
        }
      }
    }
  }
};

export const FileGetFromTaskOptionalParams = {
  required: false,
  serializedName: 'GetFromTaskOptions',
  type: {
    name: 'Composite',
    className: 'FileGetFromTaskOptionalParams',
    modelProperties: {
      fileGetFromTaskOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileGetFromTaskOptions'
        }
      }
    }
  }
};

export const FileGetPropertiesFromTaskOptionalParams = {
  required: false,
  serializedName: 'GetPropertiesFromTaskOptions',
  type: {
    name: 'Composite',
    className: 'FileGetPropertiesFromTaskOptionalParams',
    modelProperties: {
      fileGetPropertiesFromTaskOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileGetPropertiesFromTaskOptions'
        }
      }
    }
  }
};

export const FileDeleteFromComputeNodeOptionalParams = {
  required: false,
  serializedName: 'DeleteFromComputeNodeOptions',
  type: {
    name: 'Composite',
    className: 'FileDeleteFromComputeNodeOptionalParams',
    modelProperties: {
      recursive: {
        required: false,
        serializedName: 'recursive',
        type: {
          name: 'Boolean'
        }
      },
      fileDeleteFromComputeNodeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileDeleteFromComputeNodeOptions'
        }
      }
    }
  }
};

export const FileGetFromComputeNodeOptionalParams = {
  required: false,
  serializedName: 'GetFromComputeNodeOptions',
  type: {
    name: 'Composite',
    className: 'FileGetFromComputeNodeOptionalParams',
    modelProperties: {
      fileGetFromComputeNodeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileGetFromComputeNodeOptions'
        }
      }
    }
  }
};

export const FileGetPropertiesFromComputeNodeOptionalParams = {
  required: false,
  serializedName: 'GetPropertiesFromComputeNodeOptions',
  type: {
    name: 'Composite',
    className: 'FileGetPropertiesFromComputeNodeOptionalParams',
    modelProperties: {
      fileGetPropertiesFromComputeNodeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileGetPropertiesFromComputeNodeOptions'
        }
      }
    }
  }
};

export const FileListFromTaskOptionalParams = {
  required: false,
  serializedName: 'ListFromTaskOptions',
  type: {
    name: 'Composite',
    className: 'FileListFromTaskOptionalParams',
    modelProperties: {
      recursive: {
        required: false,
        serializedName: 'recursive',
        type: {
          name: 'Boolean'
        }
      },
      fileListFromTaskOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileListFromTaskOptions'
        }
      }
    }
  }
};

export const FileListFromComputeNodeOptionalParams = {
  required: false,
  serializedName: 'ListFromComputeNodeOptions',
  type: {
    name: 'Composite',
    className: 'FileListFromComputeNodeOptionalParams',
    modelProperties: {
      recursive: {
        required: false,
        serializedName: 'recursive',
        type: {
          name: 'Boolean'
        }
      },
      fileListFromComputeNodeOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileListFromComputeNodeOptions'
        }
      }
    }
  }
};

export const FileListFromTaskNextOptionalParams = {
  required: false,
  serializedName: 'ListFromTaskNextOptions',
  type: {
    name: 'Composite',
    className: 'FileListFromTaskNextOptionalParams',
    modelProperties: {
      fileListFromTaskNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileListFromTaskNextOptions'
        }
      }
    }
  }
};

export const FileListFromComputeNodeNextOptionalParams = {
  required: false,
  serializedName: 'ListFromComputeNodeNextOptions',
  type: {
    name: 'Composite',
    className: 'FileListFromComputeNodeNextOptionalParams',
    modelProperties: {
      fileListFromComputeNodeNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'FileListFromComputeNodeNextOptions'
        }
      }
    }
  }
};

export const JobScheduleExistsOptionalParams = {
  required: false,
  serializedName: 'ExistsOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleExistsOptionalParams',
    modelProperties: {
      jobScheduleExistsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleExistsOptions'
        }
      }
    }
  }
};

export const JobScheduleDeleteMethodOptionalParams = {
  required: false,
  serializedName: 'DeleteMethodOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleDeleteMethodOptionalParams',
    modelProperties: {
      jobScheduleDeleteMethodOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleDeleteMethodOptions'
        }
      }
    }
  }
};

export const JobScheduleGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleGetOptionalParams',
    modelProperties: {
      jobScheduleGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleGetOptions'
        }
      }
    }
  }
};

export const JobSchedulePatchOptionalParams = {
  required: false,
  serializedName: 'PatchOptions',
  type: {
    name: 'Composite',
    className: 'JobSchedulePatchOptionalParams',
    modelProperties: {
      jobSchedulePatchOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobSchedulePatchOptions'
        }
      }
    }
  }
};

export const JobScheduleUpdateOptionalParams = {
  required: false,
  serializedName: 'UpdateOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleUpdateOptionalParams',
    modelProperties: {
      jobScheduleUpdateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleUpdateOptions'
        }
      }
    }
  }
};

export const JobScheduleDisableOptionalParams = {
  required: false,
  serializedName: 'DisableOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleDisableOptionalParams',
    modelProperties: {
      jobScheduleDisableOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleDisableOptions'
        }
      }
    }
  }
};

export const JobScheduleEnableOptionalParams = {
  required: false,
  serializedName: 'EnableOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleEnableOptionalParams',
    modelProperties: {
      jobScheduleEnableOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleEnableOptions'
        }
      }
    }
  }
};

export const JobScheduleTerminateOptionalParams = {
  required: false,
  serializedName: 'TerminateOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleTerminateOptionalParams',
    modelProperties: {
      jobScheduleTerminateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleTerminateOptions'
        }
      }
    }
  }
};

export const JobScheduleAddOptionalParams = {
  required: false,
  serializedName: 'AddOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleAddOptionalParams',
    modelProperties: {
      jobScheduleAddOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleAddOptions'
        }
      }
    }
  }
};

export const JobScheduleListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleListOptionalParams',
    modelProperties: {
      jobScheduleListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleListOptions'
        }
      }
    }
  }
};

export const JobScheduleListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'JobScheduleListNextOptionalParams',
    modelProperties: {
      jobScheduleListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'JobScheduleListNextOptions'
        }
      }
    }
  }
};

export const TaskAddOptionalParams = {
  required: false,
  serializedName: 'AddOptions',
  type: {
    name: 'Composite',
    className: 'TaskAddOptionalParams',
    modelProperties: {
      taskAddOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskAddOptions'
        }
      }
    }
  }
};

export const TaskListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'TaskListOptionalParams',
    modelProperties: {
      taskListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskListOptions'
        }
      }
    }
  }
};

export const TaskAddCollectionOptionalParams = {
  required: false,
  serializedName: 'AddCollectionOptions',
  type: {
    name: 'Composite',
    className: 'TaskAddCollectionOptionalParams',
    modelProperties: {
      taskAddCollectionOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskAddCollectionOptions'
        }
      }
    }
  }
};

export const TaskDeleteMethodOptionalParams = {
  required: false,
  serializedName: 'DeleteMethodOptions',
  type: {
    name: 'Composite',
    className: 'TaskDeleteMethodOptionalParams',
    modelProperties: {
      taskDeleteMethodOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskDeleteMethodOptions'
        }
      }
    }
  }
};

export const TaskGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'TaskGetOptionalParams',
    modelProperties: {
      taskGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskGetOptions'
        }
      }
    }
  }
};

export const TaskUpdateOptionalParams = {
  required: false,
  serializedName: 'UpdateOptions',
  type: {
    name: 'Composite',
    className: 'TaskUpdateOptionalParams',
    modelProperties: {
      taskUpdateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskUpdateOptions'
        }
      }
    }
  }
};

export const TaskListSubtasksOptionalParams = {
  required: false,
  serializedName: 'ListSubtasksOptions',
  type: {
    name: 'Composite',
    className: 'TaskListSubtasksOptionalParams',
    modelProperties: {
      taskListSubtasksOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskListSubtasksOptions'
        }
      }
    }
  }
};

export const TaskTerminateOptionalParams = {
  required: false,
  serializedName: 'TerminateOptions',
  type: {
    name: 'Composite',
    className: 'TaskTerminateOptionalParams',
    modelProperties: {
      taskTerminateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskTerminateOptions'
        }
      }
    }
  }
};

export const TaskReactivateOptionalParams = {
  required: false,
  serializedName: 'ReactivateOptions',
  type: {
    name: 'Composite',
    className: 'TaskReactivateOptionalParams',
    modelProperties: {
      taskReactivateOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskReactivateOptions'
        }
      }
    }
  }
};

export const TaskListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'TaskListNextOptionalParams',
    modelProperties: {
      taskListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'TaskListNextOptions'
        }
      }
    }
  }
};

export const ComputeNodeAddUserOptionalParams = {
  required: false,
  serializedName: 'AddUserOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeAddUserOptionalParams',
    modelProperties: {
      computeNodeAddUserOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeAddUserOptions'
        }
      }
    }
  }
};

export const ComputeNodeDeleteUserOptionalParams = {
  required: false,
  serializedName: 'DeleteUserOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeDeleteUserOptionalParams',
    modelProperties: {
      computeNodeDeleteUserOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeDeleteUserOptions'
        }
      }
    }
  }
};

export const ComputeNodeUpdateUserOptionalParams = {
  required: false,
  serializedName: 'UpdateUserOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeUpdateUserOptionalParams',
    modelProperties: {
      computeNodeUpdateUserOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeUpdateUserOptions'
        }
      }
    }
  }
};

export const ComputeNodeGetOptionalParams = {
  required: false,
  serializedName: 'GetOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetOptionalParams',
    modelProperties: {
      computeNodeGetOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeGetOptions'
        }
      }
    }
  }
};

export const ComputeNodeRebootOptionalParams = {
  required: false,
  serializedName: 'RebootOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeRebootOptionalParams',
    modelProperties: {
      nodeRebootParameter: {
        required: false,
        serializedName: 'nodeRebootParameter',
        type: {
          name: 'Composite',
          className: 'NodeRebootParameter'
        }
      },
      computeNodeRebootOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeRebootOptions'
        }
      }
    }
  }
};

export const ComputeNodeReimageOptionalParams = {
  required: false,
  serializedName: 'ReimageOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeReimageOptionalParams',
    modelProperties: {
      nodeReimageParameter: {
        required: false,
        serializedName: 'nodeReimageParameter',
        type: {
          name: 'Composite',
          className: 'NodeReimageParameter'
        }
      },
      computeNodeReimageOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeReimageOptions'
        }
      }
    }
  }
};

export const ComputeNodeDisableSchedulingOptionalParams = {
  required: false,
  serializedName: 'DisableSchedulingOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeDisableSchedulingOptionalParams',
    modelProperties: {
      nodeDisableSchedulingParameter: {
        required: false,
        serializedName: 'nodeDisableSchedulingParameter',
        type: {
          name: 'Composite',
          className: 'NodeDisableSchedulingParameter'
        }
      },
      computeNodeDisableSchedulingOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeDisableSchedulingOptions'
        }
      }
    }
  }
};

export const ComputeNodeEnableSchedulingOptionalParams = {
  required: false,
  serializedName: 'EnableSchedulingOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeEnableSchedulingOptionalParams',
    modelProperties: {
      computeNodeEnableSchedulingOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeEnableSchedulingOptions'
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteLoginSettingsOptionalParams = {
  required: false,
  serializedName: 'GetRemoteLoginSettingsOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetRemoteLoginSettingsOptionalParams',
    modelProperties: {
      computeNodeGetRemoteLoginSettingsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeGetRemoteLoginSettingsOptions'
        }
      }
    }
  }
};

export const ComputeNodeGetRemoteDesktopOptionalParams = {
  required: false,
  serializedName: 'GetRemoteDesktopOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeGetRemoteDesktopOptionalParams',
    modelProperties: {
      computeNodeGetRemoteDesktopOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeGetRemoteDesktopOptions'
        }
      }
    }
  }
};

export const ComputeNodeUploadBatchServiceLogsOptionalParams = {
  required: false,
  serializedName: 'UploadBatchServiceLogsOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeUploadBatchServiceLogsOptionalParams',
    modelProperties: {
      computeNodeUploadBatchServiceLogsOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeUploadBatchServiceLogsOptions'
        }
      }
    }
  }
};

export const ComputeNodeListOptionalParams = {
  required: false,
  serializedName: 'ListOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeListOptionalParams',
    modelProperties: {
      computeNodeListOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeListOptions'
        }
      }
    }
  }
};

export const ComputeNodeListNextOptionalParams = {
  required: false,
  serializedName: 'ListNextOptions',
  type: {
    name: 'Composite',
    className: 'ComputeNodeListNextOptionalParams',
    modelProperties: {
      computeNodeListNextOptions: {
        required: false,
        serializedName: '',
        type: {
          name: 'Composite',
          className: 'ComputeNodeListNextOptions'
        }
      }
    }
  }
};

export const ApplicationListResult = {
  required: false,
  serializedName: 'ApplicationListResult',
  type: {
    name: 'Composite',
    className: 'ApplicationListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ApplicationSummaryElementType',
              type: {
                name: 'Composite',
                className: 'ApplicationSummary'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const PoolListUsageMetricsResult = {
  required: false,
  serializedName: 'PoolListUsageMetricsResult',
  type: {
    name: 'Composite',
    className: 'PoolListUsageMetricsResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'PoolUsageMetricsElementType',
              type: {
                name: 'Composite',
                className: 'PoolUsageMetrics'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudPoolListResult = {
  required: false,
  serializedName: 'CloudPoolListResult',
  type: {
    name: 'Composite',
    className: 'CloudPoolListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CloudPoolElementType',
              type: {
                name: 'Composite',
                className: 'CloudPool'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const AccountListNodeAgentSkusResult = {
  required: false,
  serializedName: 'AccountListNodeAgentSkusResult',
  type: {
    name: 'Composite',
    className: 'AccountListNodeAgentSkusResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NodeAgentSkuElementType',
              type: {
                name: 'Composite',
                className: 'NodeAgentSku'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const PoolNodeCountsListResult = {
  required: false,
  serializedName: 'PoolNodeCountsListResult',
  type: {
    name: 'Composite',
    className: 'PoolNodeCountsListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'PoolNodeCountsElementType',
              type: {
                name: 'Composite',
                className: 'PoolNodeCounts'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudJobListResult = {
  required: false,
  serializedName: 'CloudJobListResult',
  type: {
    name: 'Composite',
    className: 'CloudJobListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CloudJobElementType',
              type: {
                name: 'Composite',
                className: 'CloudJob'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudJobListPreparationAndReleaseTaskStatusResult = {
  required: false,
  serializedName: 'CloudJobListPreparationAndReleaseTaskStatusResult',
  type: {
    name: 'Composite',
    className: 'CloudJobListPreparationAndReleaseTaskStatusResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'JobPreparationAndReleaseTaskExecutionInformationElementType',
              type: {
                name: 'Composite',
                className: 'JobPreparationAndReleaseTaskExecutionInformation'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CertificateListResult = {
  required: false,
  serializedName: 'CertificateListResult',
  type: {
    name: 'Composite',
    className: 'CertificateListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CertificateElementType',
              type: {
                name: 'Composite',
                className: 'Certificate'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const NodeFileListResult = {
  required: false,
  serializedName: 'NodeFileListResult',
  type: {
    name: 'Composite',
    className: 'NodeFileListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'NodeFileElementType',
              type: {
                name: 'Composite',
                className: 'NodeFile'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudJobScheduleListResult = {
  required: false,
  serializedName: 'CloudJobScheduleListResult',
  type: {
    name: 'Composite',
    className: 'CloudJobScheduleListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CloudJobScheduleElementType',
              type: {
                name: 'Composite',
                className: 'CloudJobSchedule'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const CloudTaskListResult = {
  required: false,
  serializedName: 'CloudTaskListResult',
  type: {
    name: 'Composite',
    className: 'CloudTaskListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'CloudTaskElementType',
              type: {
                name: 'Composite',
                className: 'CloudTask'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const ComputeNodeListResult = {
  required: false,
  serializedName: 'ComputeNodeListResult',
  type: {
    name: 'Composite',
    className: 'ComputeNodeListResult',
    modelProperties: {
      value: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ComputeNodeElementType',
              type: {
                name: 'Composite',
                className: 'ComputeNode'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};
