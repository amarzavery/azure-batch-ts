/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClient } from "../batchServiceClient";

const WebResource = msRest.WebResource;

/** Class representing a Task. */
export class Task {
  private readonly client: BatchServiceClient;
  /**
   * Create a Task.
   * @param {BatchServiceClient} client Reference to the service client.
   */
  constructor(client: BatchServiceClient) {
    this.client = client;
  }

  /**
   * @summary Adds a task to the specified job.
   *
   * The maximum lifetime of a task from addition to completion is 7 days. If a
   * task has not completed within 7 days of being added it will be terminated by
   * the Batch service and left in whatever state it was in at that time.
   *
   * @param {string} jobId The ID of the job to which the task is to be added.
   *
   * @param {TaskAddParameter} task The task to be added.
   *
   * @param {TaskAddOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async addWithHttpOperationResponse(jobId: string, task: Models.TaskAddParameter, options?: Models.TaskAddOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskAddOptions = (options && options.taskAddOptions !== undefined) ? options.taskAddOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (task === null || task === undefined) {
        throw new Error('task cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (taskAddOptions !== null && taskAddOptions !== undefined)
      {
        timeout = taskAddOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskAddOptions !== null && taskAddOptions !== undefined)
      {
        clientRequestId = taskAddOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskAddOptions !== null && taskAddOptions !== undefined)
      {
        returnClientRequestId = taskAddOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskAddOptions !== null && taskAddOptions !== undefined)
      {
        ocpDate = taskAddOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (task !== null && task !== undefined) {
        let requestModelMapper = Mappers.TaskAddParameter;
        requestModel = client.serializer.serialize(requestModelMapper, task, 'task');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(task, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 201) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the tasks that are associated with the specified job.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} jobId The ID of the job.
   *
   * @param {TaskListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(jobId: string, options?: Models.TaskListOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskListOptions = (options && options.taskListOptions !== undefined) ? options.taskListOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let select: any;
    let expand: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        filter = taskListOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        select = taskListOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        expand = taskListOptions.expand;
        if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
          throw new Error('expand must be of type string.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        maxResults = taskListOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        timeout = taskListOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        clientRequestId = taskListOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        returnClientRequestId = taskListOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskListOptions !== null && taskListOptions !== undefined)
      {
        ocpDate = taskListOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (filter !== null && filter !== undefined) {
      queryParamsArray.push('$filter=' + encodeURIComponent(filter));
    }
    if (select !== null && select !== undefined) {
      queryParamsArray.push('$select=' + encodeURIComponent(select));
    }
    if (expand !== null && expand !== undefined) {
      queryParamsArray.push('$expand=' + encodeURIComponent(expand));
    }
    if (maxResults !== null && maxResults !== undefined) {
      queryParamsArray.push('maxresults=' + encodeURIComponent(maxResults.toString()));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudTaskListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Adds a collection of tasks to the specified job.
   *
   * Note that each task must have a unique ID. The Batch service may not return
   * the results for each task in the same order the tasks were submitted in this
   * request. If the server times out or the connection is closed during the
   * request, the request may have been partially or fully processed, or not at
   * all. In such cases, the user should re-issue the request. Note that it is up
   * to the user to correctly handle failures when re-issuing a request. For
   * example, you should use the same task IDs during a retry so that if the
   * prior operation succeeded, the retry will not create extra tasks
   * unexpectedly. If the response contains any tasks which failed to add, a
   * client can retry the request. In a retry, it is most efficient to resubmit
   * only tasks that failed to add, and to omit tasks that were successfully
   * added on the first attempt. The maximum lifetime of a task from addition to
   * completion is 7 days. If a task has not completed within 7 days of being
   * added it will be terminated by the Batch service and left in whatever state
   * it was in at that time.
   *
   * @param {string} jobId The ID of the job to which the task collection is to
   * be added.
   *
   * @param {TaskAddParameter[]} value The collection of tasks to add. The total
   * serialized size of this collection must be less than 4MB. If it is greater
   * than 4MB (for example if each task has 100's of resource files or
   * environment variables), the request will fail with code
   * 'RequestBodyTooLarge' and should be retried again with fewer tasks.
   *
   * @param {TaskAddCollectionOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async addCollectionWithHttpOperationResponse(jobId: string, value: Models.TaskAddParameter[], options?: Models.TaskAddCollectionOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskAddCollectionOptions = (options && options.taskAddCollectionOptions !== undefined) ? options.taskAddCollectionOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (value !== null && value !== undefined) {
        if (value.length > 100)
        {
          throw new Error('"value" should satisfy the constraint - "MaxItems": 100');
        }
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let taskCollection: any = {};
    try {
      if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined)
      {
        timeout = taskAddCollectionOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined)
      {
        clientRequestId = taskAddCollectionOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined)
      {
        returnClientRequestId = taskAddCollectionOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskAddCollectionOptions !== null && taskAddCollectionOptions !== undefined)
      {
        ocpDate = taskAddCollectionOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (value !== null && value !== undefined)
      {
        taskCollection.value = value;
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/addtaskcollection';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (taskCollection !== null && taskCollection !== undefined) {
        let requestModelMapper = Mappers.TaskAddCollectionParameter;
        requestModel = client.serializer.serialize(requestModelMapper, taskCollection, 'taskCollection');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(taskCollection, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.TaskAddCollectionResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes a task from the specified job.
   *
   * When a task is deleted, all of the files in its directory on the compute
   * node where it ran are also deleted (regardless of the retention time). For
   * multi-instance tasks, the delete task operation applies synchronously to the
   * primary task; subtasks and their files are then deleted asynchronously in
   * the background.
   *
   * @param {string} jobId The ID of the job from which to delete the task.
   *
   * @param {string} taskId The ID of the task to delete.
   *
   * @param {TaskDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteMethodWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskDeleteMethodOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskDeleteMethodOptions = (options && options.taskDeleteMethodOptions !== undefined) ? options.taskDeleteMethodOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        timeout = taskDeleteMethodOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        clientRequestId = taskDeleteMethodOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        returnClientRequestId = taskDeleteMethodOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        ocpDate = taskDeleteMethodOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        ifMatch = taskDeleteMethodOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        ifNoneMatch = taskDeleteMethodOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        ifModifiedSince = taskDeleteMethodOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (taskDeleteMethodOptions !== null && taskDeleteMethodOptions !== undefined)
      {
        ifUnmodifiedSince = taskDeleteMethodOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets information about the specified task.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task to get information about.
   *
   * @param {TaskGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskGetOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskGetOptions = (options && options.taskGetOptions !== undefined) ? options.taskGetOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let select: any;
    let expand: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        select = taskGetOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        expand = taskGetOptions.expand;
        if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
          throw new Error('expand must be of type string.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        timeout = taskGetOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        clientRequestId = taskGetOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        returnClientRequestId = taskGetOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        ocpDate = taskGetOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        ifMatch = taskGetOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        ifNoneMatch = taskGetOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        ifModifiedSince = taskGetOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (taskGetOptions !== null && taskGetOptions !== undefined)
      {
        ifUnmodifiedSince = taskGetOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (select !== null && select !== undefined) {
      queryParamsArray.push('$select=' + encodeURIComponent(select));
    }
    if (expand !== null && expand !== undefined) {
      queryParamsArray.push('$expand=' + encodeURIComponent(expand));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudTask;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Updates the properties of the specified task.
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to update.
   *
   * @param {TaskUpdateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async updateWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskUpdateOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let constraints = (options && options.constraints !== undefined) ? options.constraints : undefined;
    let taskUpdateOptions = (options && options.taskUpdateOptions !== undefined) ? options.taskUpdateOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    let taskUpdateParameter: any = {};
    try {
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        timeout = taskUpdateOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        clientRequestId = taskUpdateOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        returnClientRequestId = taskUpdateOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        ocpDate = taskUpdateOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        ifMatch = taskUpdateOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        ifNoneMatch = taskUpdateOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        ifModifiedSince = taskUpdateOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (taskUpdateOptions !== null && taskUpdateOptions !== undefined)
      {
        ifUnmodifiedSince = taskUpdateOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
      if (constraints !== null && constraints !== undefined)
      {
        taskUpdateParameter.constraints = constraints;
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (taskUpdateParameter !== null && taskUpdateParameter !== undefined) {
        let requestModelMapper = Mappers.TaskUpdateParameter;
        requestModel = client.serializer.serialize(requestModelMapper, taskUpdateParameter, 'taskUpdateParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(taskUpdateParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the subtasks that are associated with the specified
   * multi-instance task.
   *
   * If the task is not a multi-instance task then this returns an empty
   * collection.
   *
   * @param {string} jobId The ID of the job.
   *
   * @param {string} taskId The ID of the task.
   *
   * @param {TaskListSubtasksOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listSubtasksWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskListSubtasksOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskListSubtasksOptions = (options && options.taskListSubtasksOptions !== undefined) ? options.taskListSubtasksOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let select: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined)
      {
        select = taskListSubtasksOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined)
      {
        timeout = taskListSubtasksOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined)
      {
        clientRequestId = taskListSubtasksOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined)
      {
        returnClientRequestId = taskListSubtasksOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskListSubtasksOptions !== null && taskListSubtasksOptions !== undefined)
      {
        ocpDate = taskListSubtasksOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/subtasksinfo';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (select !== null && select !== undefined) {
      queryParamsArray.push('$select=' + encodeURIComponent(select));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudTaskListSubtasksResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Terminates the specified task.
   *
   * When the task has been terminated, it moves to the completed state. For
   * multi-instance tasks, the terminate task operation applies synchronously to
   * the primary task; subtasks are then terminated asynchronously in the
   * background.
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to terminate.
   *
   * @param {TaskTerminateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async terminateWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskTerminateOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskTerminateOptions = (options && options.taskTerminateOptions !== undefined) ? options.taskTerminateOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        timeout = taskTerminateOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        clientRequestId = taskTerminateOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        returnClientRequestId = taskTerminateOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        ocpDate = taskTerminateOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        ifMatch = taskTerminateOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        ifNoneMatch = taskTerminateOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        ifModifiedSince = taskTerminateOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (taskTerminateOptions !== null && taskTerminateOptions !== undefined)
      {
        ifUnmodifiedSince = taskTerminateOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/terminate';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 204) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Reactivates a task, allowing it to run again even if its retry
   * count has been exhausted.
   *
   * Reactivation makes a task eligible to be retried again up to its maximum
   * retry count. The task's state is changed to active. As the task is no longer
   * in the completed state, any previous exit code or failure information is no
   * longer available after reactivation. Each time a task is reactivated, its
   * retry count is reset to 0. Reactivation will fail for tasks that are not
   * completed or that previously completed successfully (with an exit code of
   * 0). Additionally, it will fail if the job has completed (or is terminating
   * or deleting).
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to reactivate.
   *
   * @param {TaskReactivateOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async reactivateWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.TaskReactivateOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskReactivateOptions = (options && options.taskReactivateOptions !== undefined) ? options.taskReactivateOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        timeout = taskReactivateOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        clientRequestId = taskReactivateOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        returnClientRequestId = taskReactivateOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        ocpDate = taskReactivateOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        ifMatch = taskReactivateOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        ifNoneMatch = taskReactivateOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        ifModifiedSince = taskReactivateOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (taskReactivateOptions !== null && taskReactivateOptions !== undefined)
      {
        ifUnmodifiedSince = taskReactivateOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/reactivate';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 204) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the tasks that are associated with the specified job.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {TaskListNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: Models.TaskListNextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let taskListNextOptions = (options && options.taskListNextOptions !== undefined) ? options.taskListNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (taskListNextOptions !== null && taskListNextOptions !== undefined)
      {
        clientRequestId = taskListNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (taskListNextOptions !== null && taskListNextOptions !== undefined)
      {
        returnClientRequestId = taskListNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (taskListNextOptions !== null && taskListNextOptions !== undefined)
      {
        ocpDate = taskListNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let requestUrl = '{nextLink}';
    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    httpRequest.body = null;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudTaskListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Adds a task to the specified job.
   *
   * The maximum lifetime of a task from addition to completion is 7 days. If a
   * task has not completed within 7 days of being added it will be terminated by
   * the Batch service and left in whatever state it was in at that time.
   *
   * @param {string} jobId The ID of the job to which the task is to be added.
   *
   * @param {TaskAddParameter} task The task to be added.
   *
   * @param {TaskAddOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  add(jobId: string, task: Models.TaskAddParameter): Promise<void>;
  add(jobId: string, task: Models.TaskAddParameter, options: Models.TaskAddOptionalParams): Promise<void>;
  add(jobId: string, task: Models.TaskAddParameter, callback: msRest.ServiceCallback<void>): void;
  add(jobId: string, task: Models.TaskAddParameter, options: Models.TaskAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(jobId: string, task: Models.TaskAddParameter, options?: Models.TaskAddOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.addWithHttpOperationResponse(jobId, task, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.addWithHttpOperationResponse(jobId, task, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the tasks that are associated with the specified job.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} jobId The ID of the job.
   *
   * @param {TaskListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudTaskListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudTaskListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  list(jobId: string): Promise<Models.CloudTaskListResult>;
  list(jobId: string, options: Models.TaskListOptionalParams): Promise<Models.CloudTaskListResult>;
  list(jobId: string, callback: msRest.ServiceCallback<Models.CloudTaskListResult>): void;
  list(jobId: string, options: Models.TaskListOptionalParams, callback: msRest.ServiceCallback<Models.CloudTaskListResult>): void;
  list(jobId: string, options?: Models.TaskListOptionalParams, callback?: msRest.ServiceCallback<Models.CloudTaskListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudTaskListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(jobId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudTaskListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(jobId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudTaskListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Adds a collection of tasks to the specified job.
   *
   * Note that each task must have a unique ID. The Batch service may not return
   * the results for each task in the same order the tasks were submitted in this
   * request. If the server times out or the connection is closed during the
   * request, the request may have been partially or fully processed, or not at
   * all. In such cases, the user should re-issue the request. Note that it is up
   * to the user to correctly handle failures when re-issuing a request. For
   * example, you should use the same task IDs during a retry so that if the
   * prior operation succeeded, the retry will not create extra tasks
   * unexpectedly. If the response contains any tasks which failed to add, a
   * client can retry the request. In a retry, it is most efficient to resubmit
   * only tasks that failed to add, and to omit tasks that were successfully
   * added on the first attempt. The maximum lifetime of a task from addition to
   * completion is 7 days. If a task has not completed within 7 days of being
   * added it will be terminated by the Batch service and left in whatever state
   * it was in at that time.
   *
   * @param {string} jobId The ID of the job to which the task collection is to
   * be added.
   *
   * @param {TaskAddParameter[]} value The collection of tasks to add. The total
   * serialized size of this collection must be less than 4MB. If it is greater
   * than 4MB (for example if each task has 100's of resource files or
   * environment variables), the request will fail with code
   * 'RequestBodyTooLarge' and should be retried again with fewer tasks.
   *
   * @param {TaskAddCollectionOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.TaskAddCollectionResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.TaskAddCollectionResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  addCollection(jobId: string, value: Models.TaskAddParameter[]): Promise<Models.TaskAddCollectionResult>;
  addCollection(jobId: string, value: Models.TaskAddParameter[], options: Models.TaskAddCollectionOptionalParams): Promise<Models.TaskAddCollectionResult>;
  addCollection(jobId: string, value: Models.TaskAddParameter[], callback: msRest.ServiceCallback<Models.TaskAddCollectionResult>): void;
  addCollection(jobId: string, value: Models.TaskAddParameter[], options: Models.TaskAddCollectionOptionalParams, callback: msRest.ServiceCallback<Models.TaskAddCollectionResult>): void;
  addCollection(jobId: string, value: Models.TaskAddParameter[], options?: Models.TaskAddCollectionOptionalParams, callback?: msRest.ServiceCallback<Models.TaskAddCollectionResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.TaskAddCollectionResult>;
    if (!callback) {
      return this.addCollectionWithHttpOperationResponse(jobId, value, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.TaskAddCollectionResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.addCollectionWithHttpOperationResponse(jobId, value, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.TaskAddCollectionResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Deletes a task from the specified job.
   *
   * When a task is deleted, all of the files in its directory on the compute
   * node where it ran are also deleted (regardless of the retention time). For
   * multi-instance tasks, the delete task operation applies synchronously to the
   * primary task; subtasks and their files are then deleted asynchronously in
   * the background.
   *
   * @param {string} jobId The ID of the job from which to delete the task.
   *
   * @param {string} taskId The ID of the task to delete.
   *
   * @param {TaskDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(jobId: string, taskId: string): Promise<void>;
  deleteMethod(jobId: string, taskId: string, options: Models.TaskDeleteMethodOptionalParams): Promise<void>;
  deleteMethod(jobId: string, taskId: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(jobId: string, taskId: string, options: Models.TaskDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(jobId: string, taskId: string, options?: Models.TaskDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteMethodWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Gets information about the specified task.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task to get information about.
   *
   * @param {TaskGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudTask} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudTask} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  get(jobId: string, taskId: string): Promise<Models.CloudTask>;
  get(jobId: string, taskId: string, options: Models.TaskGetOptionalParams): Promise<Models.CloudTask>;
  get(jobId: string, taskId: string, callback: msRest.ServiceCallback<Models.CloudTask>): void;
  get(jobId: string, taskId: string, options: Models.TaskGetOptionalParams, callback: msRest.ServiceCallback<Models.CloudTask>): void;
  get(jobId: string, taskId: string, options?: Models.TaskGetOptionalParams, callback?: msRest.ServiceCallback<Models.CloudTask>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudTask>;
    if (!callback) {
      return this.getWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudTask);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudTask;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Updates the properties of the specified task.
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to update.
   *
   * @param {TaskUpdateOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  update(jobId: string, taskId: string): Promise<void>;
  update(jobId: string, taskId: string, options: Models.TaskUpdateOptionalParams): Promise<void>;
  update(jobId: string, taskId: string, callback: msRest.ServiceCallback<void>): void;
  update(jobId: string, taskId: string, options: Models.TaskUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(jobId: string, taskId: string, options?: Models.TaskUpdateOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.updateWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.updateWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the subtasks that are associated with the specified
   * multi-instance task.
   *
   * If the task is not a multi-instance task then this returns an empty
   * collection.
   *
   * @param {string} jobId The ID of the job.
   *
   * @param {string} taskId The ID of the task.
   *
   * @param {TaskListSubtasksOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudTaskListSubtasksResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudTaskListSubtasksResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listSubtasks(jobId: string, taskId: string): Promise<Models.CloudTaskListSubtasksResult>;
  listSubtasks(jobId: string, taskId: string, options: Models.TaskListSubtasksOptionalParams): Promise<Models.CloudTaskListSubtasksResult>;
  listSubtasks(jobId: string, taskId: string, callback: msRest.ServiceCallback<Models.CloudTaskListSubtasksResult>): void;
  listSubtasks(jobId: string, taskId: string, options: Models.TaskListSubtasksOptionalParams, callback: msRest.ServiceCallback<Models.CloudTaskListSubtasksResult>): void;
  listSubtasks(jobId: string, taskId: string, options?: Models.TaskListSubtasksOptionalParams, callback?: msRest.ServiceCallback<Models.CloudTaskListSubtasksResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudTaskListSubtasksResult>;
    if (!callback) {
      return this.listSubtasksWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudTaskListSubtasksResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listSubtasksWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudTaskListSubtasksResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Terminates the specified task.
   *
   * When the task has been terminated, it moves to the completed state. For
   * multi-instance tasks, the terminate task operation applies synchronously to
   * the primary task; subtasks are then terminated asynchronously in the
   * background.
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to terminate.
   *
   * @param {TaskTerminateOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  terminate(jobId: string, taskId: string): Promise<void>;
  terminate(jobId: string, taskId: string, options: Models.TaskTerminateOptionalParams): Promise<void>;
  terminate(jobId: string, taskId: string, callback: msRest.ServiceCallback<void>): void;
  terminate(jobId: string, taskId: string, options: Models.TaskTerminateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  terminate(jobId: string, taskId: string, options?: Models.TaskTerminateOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.terminateWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.terminateWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Reactivates a task, allowing it to run again even if its retry
   * count has been exhausted.
   *
   * Reactivation makes a task eligible to be retried again up to its maximum
   * retry count. The task's state is changed to active. As the task is no longer
   * in the completed state, any previous exit code or failure information is no
   * longer available after reactivation. Each time a task is reactivated, its
   * retry count is reset to 0. Reactivation will fail for tasks that are not
   * completed or that previously completed successfully (with an exit code of
   * 0). Additionally, it will fail if the job has completed (or is terminating
   * or deleting).
   *
   * @param {string} jobId The ID of the job containing the task.
   *
   * @param {string} taskId The ID of the task to reactivate.
   *
   * @param {TaskReactivateOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  reactivate(jobId: string, taskId: string): Promise<void>;
  reactivate(jobId: string, taskId: string, options: Models.TaskReactivateOptionalParams): Promise<void>;
  reactivate(jobId: string, taskId: string, callback: msRest.ServiceCallback<void>): void;
  reactivate(jobId: string, taskId: string, options: Models.TaskReactivateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reactivate(jobId: string, taskId: string, options?: Models.TaskReactivateOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.reactivateWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.reactivateWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the tasks that are associated with the specified job.
   *
   * For multi-instance tasks, information such as affinityId, executionInfo and
   * nodeInfo refer to the primary task. Use the list subtasks API to retrieve
   * information about subtasks.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {TaskListNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudTaskListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudTaskListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.CloudTaskListResult>;
  listNext(nextPageLink: string, options: Models.TaskListNextOptionalParams): Promise<Models.CloudTaskListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudTaskListResult>): void;
  listNext(nextPageLink: string, options: Models.TaskListNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudTaskListResult>): void;
  listNext(nextPageLink: string, options?: Models.TaskListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudTaskListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudTaskListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudTaskListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudTaskListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

}
