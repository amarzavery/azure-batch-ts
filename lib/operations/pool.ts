/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClient } from "../batchServiceClient";

const WebResource = msRest.WebResource;

/** Class representing a Pool. */
export class Pool {
  private readonly client: BatchServiceClient;
  /**
   * Create a Pool.
   * @param {BatchServiceClient} client Reference to the service client.
   */
  constructor(client: BatchServiceClient) {
    this.client = client;
  }

  /**
   * @summary Lists the usage metrics, aggregated by pool across individual time
   * intervals, for the specified account.
   *
   * If you do not specify a $filter clause including a poolId, the response
   * includes all pools that existed in the account in the time range of the
   * returned aggregation intervals. If you do not specify a $filter clause
   * including a startTime or endTime these filters default to the start and end
   * times of the last aggregation interval currently available; that is, only
   * the last aggregation interval is returned.
   *
   * @param {PoolListUsageMetricsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listUsageMetricsWithHttpOperationResponse(options?: Models.PoolListUsageMetricsOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolListUsageMetricsOptions = (options && options.poolListUsageMetricsOptions !== undefined) ? options.poolListUsageMetricsOptions : undefined;
    // Validate
    try {
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let startTime: any;
    let endTime: any;
    let filter: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        startTime = poolListUsageMetricsOptions.startTime;
        if (startTime && !(startTime instanceof Date ||
            (typeof (startTime as string).valueOf() === 'string' && !isNaN(Date.parse(startTime as string))))) {
              throw new Error('startTime must be of type date.');
            }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        endTime = poolListUsageMetricsOptions.endTime;
        if (endTime && !(endTime instanceof Date ||
            (typeof (endTime as string).valueOf() === 'string' && !isNaN(Date.parse(endTime as string))))) {
              throw new Error('endTime must be of type date.');
            }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        filter = poolListUsageMetricsOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        maxResults = poolListUsageMetricsOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        timeout = poolListUsageMetricsOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        clientRequestId = poolListUsageMetricsOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        returnClientRequestId = poolListUsageMetricsOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolListUsageMetricsOptions !== null && poolListUsageMetricsOptions !== undefined)
      {
        ocpDate = poolListUsageMetricsOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'poolusagemetrics';
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (startTime !== null && startTime !== undefined) {
      queryParamsArray.push('starttime=' + encodeURIComponent(msRest.serializeObject(startTime)));
    }
    if (endTime !== null && endTime !== undefined) {
      queryParamsArray.push('endtime=' + encodeURIComponent(msRest.serializeObject(endTime)));
    }
    if (filter !== null && filter !== undefined) {
      queryParamsArray.push('$filter=' + encodeURIComponent(filter));
    }
    if (maxResults !== null && maxResults !== undefined) {
      queryParamsArray.push('maxresults=' + encodeURIComponent(maxResults.toString()));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.PoolListUsageMetricsResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets lifetime summary statistics for all of the pools in the
   * specified account.
   *
   * Statistics are aggregated across all pools that have ever existed in the
   * account, from account creation to the last update time of the statistics.
   *
   * @param {PoolGetAllLifetimeStatisticsOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getAllLifetimeStatisticsWithHttpOperationResponse(options?: Models.PoolGetAllLifetimeStatisticsOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolGetAllLifetimeStatisticsOptions = (options && options.poolGetAllLifetimeStatisticsOptions !== undefined) ? options.poolGetAllLifetimeStatisticsOptions : undefined;
    // Validate
    try {
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolGetAllLifetimeStatisticsOptions !== null && poolGetAllLifetimeStatisticsOptions !== undefined)
      {
        timeout = poolGetAllLifetimeStatisticsOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolGetAllLifetimeStatisticsOptions !== null && poolGetAllLifetimeStatisticsOptions !== undefined)
      {
        clientRequestId = poolGetAllLifetimeStatisticsOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolGetAllLifetimeStatisticsOptions !== null && poolGetAllLifetimeStatisticsOptions !== undefined)
      {
        returnClientRequestId = poolGetAllLifetimeStatisticsOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolGetAllLifetimeStatisticsOptions !== null && poolGetAllLifetimeStatisticsOptions !== undefined)
      {
        ocpDate = poolGetAllLifetimeStatisticsOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'lifetimepoolstats';
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.PoolStatistics;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Adds a pool to the specified account.
   *
   * When naming pools, avoid including sensitive information such as user names
   * or secret project names. This information may appear in telemetry logs
   * accessible to Microsoft Support engineers.
   *
   * @param {PoolAddParameter} pool The pool to be added.
   *
   * @param {PoolAddOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async addWithHttpOperationResponse(pool: Models.PoolAddParameter, options?: Models.PoolAddOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolAddOptions = (options && options.poolAddOptions !== undefined) ? options.poolAddOptions : undefined;
    if (pool === null || pool === undefined)
    {
      pool = {} as any;
    }
    // Validate
    try {
      if (pool === null || pool === undefined) {
        throw new Error('pool cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolAddOptions !== null && poolAddOptions !== undefined)
      {
        timeout = poolAddOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolAddOptions !== null && poolAddOptions !== undefined)
      {
        clientRequestId = poolAddOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolAddOptions !== null && poolAddOptions !== undefined)
      {
        returnClientRequestId = poolAddOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolAddOptions !== null && poolAddOptions !== undefined)
      {
        ocpDate = poolAddOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools';
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (pool !== null && pool !== undefined) {
        let requestModelMapper = Mappers.PoolAddParameter;
        requestModel = client.serializer.serialize(requestModelMapper, pool, 'pool');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(pool, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 201) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the pools in the specified account.
   *
   * @param {PoolListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(options?: Models.PoolListOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolListOptions = (options && options.poolListOptions !== undefined) ? options.poolListOptions : undefined;
    // Validate
    try {
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let select: any;
    let expand: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        filter = poolListOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        select = poolListOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        expand = poolListOptions.expand;
        if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
          throw new Error('expand must be of type string.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        maxResults = poolListOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        timeout = poolListOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        clientRequestId = poolListOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        returnClientRequestId = poolListOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolListOptions !== null && poolListOptions !== undefined)
      {
        ocpDate = poolListOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools';
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (filter !== null && filter !== undefined) {
      queryParamsArray.push('$filter=' + encodeURIComponent(filter));
    }
    if (select !== null && select !== undefined) {
      queryParamsArray.push('$select=' + encodeURIComponent(select));
    }
    if (expand !== null && expand !== undefined) {
      queryParamsArray.push('$expand=' + encodeURIComponent(expand));
    }
    if (maxResults !== null && maxResults !== undefined) {
      queryParamsArray.push('maxresults=' + encodeURIComponent(maxResults.toString()));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudPoolListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes a pool from the specified account.
   *
   * When you request that a pool be deleted, the following actions occur: the
   * pool state is set to deleting; any ongoing resize operation on the pool are
   * stopped; the Batch service starts resizing the pool to zero nodes; any tasks
   * running on existing nodes are terminated and requeued (as if a resize pool
   * operation had been requested with the default requeue option); finally, the
   * pool is removed from the system. Because running tasks are requeued, the
   * user can rerun these tasks by updating their job to target a different pool.
   * The tasks can then run on the new pool. If you want to override the requeue
   * behavior, then you should call resize pool explicitly to shrink the pool to
   * zero size before deleting the pool. If you call an Update, Patch or Delete
   * API on a pool in the deleting state, it will fail with HTTP status code 409
   * with error code PoolBeingDeleted.
   *
   * @param {string} poolId The ID of the pool to delete.
   *
   * @param {PoolDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteMethodWithHttpOperationResponse(poolId: string, options?: Models.PoolDeleteMethodOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolDeleteMethodOptions = (options && options.poolDeleteMethodOptions !== undefined) ? options.poolDeleteMethodOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        timeout = poolDeleteMethodOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        clientRequestId = poolDeleteMethodOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        returnClientRequestId = poolDeleteMethodOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        ocpDate = poolDeleteMethodOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        ifMatch = poolDeleteMethodOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        ifNoneMatch = poolDeleteMethodOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        ifModifiedSince = poolDeleteMethodOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolDeleteMethodOptions !== null && poolDeleteMethodOptions !== undefined)
      {
        ifUnmodifiedSince = poolDeleteMethodOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets basic properties of a pool.
   *
   * @param {string} poolId The ID of the pool to get.
   *
   * @param {PoolExistsOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async existsWithHttpOperationResponse(poolId: string, options?: Models.PoolExistsOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolExistsOptions = (options && options.poolExistsOptions !== undefined) ? options.poolExistsOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        timeout = poolExistsOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        clientRequestId = poolExistsOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        returnClientRequestId = poolExistsOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        ocpDate = poolExistsOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        ifMatch = poolExistsOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        ifNoneMatch = poolExistsOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        ifModifiedSince = poolExistsOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolExistsOptions !== null && poolExistsOptions !== undefined)
      {
        ifUnmodifiedSince = poolExistsOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200 && statusCode !== 404) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      operationRes.bodyAsJson = (statusCode === 200);

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets information about the specified pool.
   *
   * @param {string} poolId The ID of the pool to get.
   *
   * @param {PoolGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(poolId: string, options?: Models.PoolGetOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolGetOptions = (options && options.poolGetOptions !== undefined) ? options.poolGetOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let select: any;
    let expand: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        select = poolGetOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        expand = poolGetOptions.expand;
        if (expand !== null && expand !== undefined && typeof expand.valueOf() !== 'string') {
          throw new Error('expand must be of type string.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        timeout = poolGetOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        clientRequestId = poolGetOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        returnClientRequestId = poolGetOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        ocpDate = poolGetOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        ifMatch = poolGetOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        ifNoneMatch = poolGetOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        ifModifiedSince = poolGetOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolGetOptions !== null && poolGetOptions !== undefined)
      {
        ifUnmodifiedSince = poolGetOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (select !== null && select !== undefined) {
      queryParamsArray.push('$select=' + encodeURIComponent(select));
    }
    if (expand !== null && expand !== undefined) {
      queryParamsArray.push('$expand=' + encodeURIComponent(expand));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudPool;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Updates the properties of the specified pool.
   *
   * This only replaces the pool properties specified in the request. For
   * example, if the pool has a start task associated with it, and a request does
   * not specify a start task element, then the pool keeps the existing start
   * task.
   *
   * @param {string} poolId The ID of the pool to update.
   *
   * @param {PoolPatchParameter} poolPatchParameter The parameters for the
   * request.
   *
   * @param {PoolPatchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async patchWithHttpOperationResponse(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options?: Models.PoolPatchOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolPatchOptions = (options && options.poolPatchOptions !== undefined) ? options.poolPatchOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolPatchParameter === null || poolPatchParameter === undefined) {
        throw new Error('poolPatchParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        timeout = poolPatchOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        clientRequestId = poolPatchOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        returnClientRequestId = poolPatchOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        ocpDate = poolPatchOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        ifMatch = poolPatchOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        ifNoneMatch = poolPatchOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        ifModifiedSince = poolPatchOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolPatchOptions !== null && poolPatchOptions !== undefined)
      {
        ifUnmodifiedSince = poolPatchOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolPatchParameter !== null && poolPatchParameter !== undefined) {
        let requestModelMapper = Mappers.PoolPatchParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolPatchParameter, 'poolPatchParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolPatchParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Disables automatic scaling for a pool.
   *
   * @param {string} poolId The ID of the pool on which to disable automatic
   * scaling.
   *
   * @param {PoolDisableAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async disableAutoScaleWithHttpOperationResponse(poolId: string, options?: Models.PoolDisableAutoScaleOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolDisableAutoScaleOptions = (options && options.poolDisableAutoScaleOptions !== undefined) ? options.poolDisableAutoScaleOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolDisableAutoScaleOptions !== null && poolDisableAutoScaleOptions !== undefined)
      {
        timeout = poolDisableAutoScaleOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolDisableAutoScaleOptions !== null && poolDisableAutoScaleOptions !== undefined)
      {
        clientRequestId = poolDisableAutoScaleOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolDisableAutoScaleOptions !== null && poolDisableAutoScaleOptions !== undefined)
      {
        returnClientRequestId = poolDisableAutoScaleOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolDisableAutoScaleOptions !== null && poolDisableAutoScaleOptions !== undefined)
      {
        ocpDate = poolDisableAutoScaleOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/disableautoscale';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Enables automatic scaling for a pool.
   *
   * You cannot enable automatic scaling on a pool if a resize operation is in
   * progress on the pool. If automatic scaling of the pool is currently
   * disabled, you must specify a valid autoscale formula as part of the request.
   * If automatic scaling of the pool is already enabled, you may specify a new
   * autoscale formula and/or a new evaluation interval. You cannot call this API
   * for the same pool more than once every 30 seconds.
   *
   * @param {string} poolId The ID of the pool on which to enable automatic
   * scaling.
   *
   * @param {PoolEnableAutoScaleParameter} poolEnableAutoScaleParameter The
   * parameters for the request.
   *
   * @param {PoolEnableAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async enableAutoScaleWithHttpOperationResponse(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options?: Models.PoolEnableAutoScaleOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolEnableAutoScaleOptions = (options && options.poolEnableAutoScaleOptions !== undefined) ? options.poolEnableAutoScaleOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolEnableAutoScaleParameter === null || poolEnableAutoScaleParameter === undefined) {
        throw new Error('poolEnableAutoScaleParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        timeout = poolEnableAutoScaleOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        clientRequestId = poolEnableAutoScaleOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        returnClientRequestId = poolEnableAutoScaleOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        ocpDate = poolEnableAutoScaleOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        ifMatch = poolEnableAutoScaleOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        ifNoneMatch = poolEnableAutoScaleOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        ifModifiedSince = poolEnableAutoScaleOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolEnableAutoScaleOptions !== null && poolEnableAutoScaleOptions !== undefined)
      {
        ifUnmodifiedSince = poolEnableAutoScaleOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/enableautoscale';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolEnableAutoScaleParameter !== null && poolEnableAutoScaleParameter !== undefined) {
        let requestModelMapper = Mappers.PoolEnableAutoScaleParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolEnableAutoScaleParameter, 'poolEnableAutoScaleParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolEnableAutoScaleParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets the result of evaluating an automatic scaling formula on the
   * pool.
   *
   * This API is primarily for validating an autoscale formula, as it simply
   * returns the result without applying the formula to the pool. The pool must
   * have auto scaling enabled in order to evaluate a formula.
   *
   * @param {string} poolId The ID of the pool on which to evaluate the automatic
   * scaling formula.
   *
   * @param {PoolEvaluateAutoScaleParameter} poolEvaluateAutoScaleParameter The
   * parameters for the request.
   *
   * @param {PoolEvaluateAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async evaluateAutoScaleWithHttpOperationResponse(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter, options?: Models.PoolEvaluateAutoScaleOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolEvaluateAutoScaleOptions = (options && options.poolEvaluateAutoScaleOptions !== undefined) ? options.poolEvaluateAutoScaleOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolEvaluateAutoScaleParameter === null || poolEvaluateAutoScaleParameter === undefined) {
        throw new Error('poolEvaluateAutoScaleParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolEvaluateAutoScaleOptions !== null && poolEvaluateAutoScaleOptions !== undefined)
      {
        timeout = poolEvaluateAutoScaleOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolEvaluateAutoScaleOptions !== null && poolEvaluateAutoScaleOptions !== undefined)
      {
        clientRequestId = poolEvaluateAutoScaleOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolEvaluateAutoScaleOptions !== null && poolEvaluateAutoScaleOptions !== undefined)
      {
        returnClientRequestId = poolEvaluateAutoScaleOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolEvaluateAutoScaleOptions !== null && poolEvaluateAutoScaleOptions !== undefined)
      {
        ocpDate = poolEvaluateAutoScaleOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/evaluateautoscale';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolEvaluateAutoScaleParameter !== null && poolEvaluateAutoScaleParameter !== undefined) {
        let requestModelMapper = Mappers.PoolEvaluateAutoScaleParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolEvaluateAutoScaleParameter, 'poolEvaluateAutoScaleParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolEvaluateAutoScaleParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.AutoScaleRun;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Changes the number of compute nodes that are assigned to a pool.
   *
   * You can only resize a pool when its allocation state is steady. If the pool
   * is already resizing, the request fails with status code 409. When you resize
   * a pool, the pool's allocation state changes from steady to resizing. You
   * cannot resize pools which are configured for automatic scaling. If you try
   * to do this, the Batch service returns an error 409. If you resize a pool
   * downwards, the Batch service chooses which nodes to remove. To remove
   * specific nodes, use the pool remove nodes API instead.
   *
   * @param {string} poolId The ID of the pool to resize.
   *
   * @param {PoolResizeParameter} poolResizeParameter The parameters for the
   * request.
   *
   * @param {PoolResizeOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async resizeWithHttpOperationResponse(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options?: Models.PoolResizeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolResizeOptions = (options && options.poolResizeOptions !== undefined) ? options.poolResizeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolResizeParameter === null || poolResizeParameter === undefined) {
        throw new Error('poolResizeParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        timeout = poolResizeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        clientRequestId = poolResizeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        returnClientRequestId = poolResizeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        ocpDate = poolResizeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        ifMatch = poolResizeOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        ifNoneMatch = poolResizeOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        ifModifiedSince = poolResizeOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolResizeOptions !== null && poolResizeOptions !== undefined)
      {
        ifUnmodifiedSince = poolResizeOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/resize';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolResizeParameter !== null && poolResizeParameter !== undefined) {
        let requestModelMapper = Mappers.PoolResizeParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolResizeParameter, 'poolResizeParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolResizeParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Stops an ongoing resize operation on the pool.
   *
   * This does not restore the pool to its previous state before the resize
   * operation: it only stops any further changes being made, and the pool
   * maintains its current state. After stopping, the pool stabilizes at the
   * number of nodes it was at when the stop operation was done. During the stop
   * operation, the pool allocation state changes first to stopping and then to
   * steady. A resize operation need not be an explicit resize pool request; this
   * API can also be used to halt the initial sizing of the pool when it is
   * created.
   *
   * @param {string} poolId The ID of the pool whose resizing you want to stop.
   *
   * @param {PoolStopResizeOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async stopResizeWithHttpOperationResponse(poolId: string, options?: Models.PoolStopResizeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolStopResizeOptions = (options && options.poolStopResizeOptions !== undefined) ? options.poolStopResizeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        timeout = poolStopResizeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        clientRequestId = poolStopResizeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        returnClientRequestId = poolStopResizeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        ocpDate = poolStopResizeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        ifMatch = poolStopResizeOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        ifNoneMatch = poolStopResizeOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        ifModifiedSince = poolStopResizeOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolStopResizeOptions !== null && poolStopResizeOptions !== undefined)
      {
        ifUnmodifiedSince = poolStopResizeOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/stopresize';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Updates the properties of the specified pool.
   *
   * This fully replaces all the updateable properties of the pool. For example,
   * if the pool has a start task associated with it and if start task is not
   * specified with this request, then the Batch service will remove the existing
   * start task.
   *
   * @param {string} poolId The ID of the pool to update.
   *
   * @param {PoolUpdatePropertiesParameter} poolUpdatePropertiesParameter The
   * parameters for the request.
   *
   * @param {PoolUpdatePropertiesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async updatePropertiesWithHttpOperationResponse(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options?: Models.PoolUpdatePropertiesOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolUpdatePropertiesOptions = (options && options.poolUpdatePropertiesOptions !== undefined) ? options.poolUpdatePropertiesOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolUpdatePropertiesParameter === null || poolUpdatePropertiesParameter === undefined) {
        throw new Error('poolUpdatePropertiesParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolUpdatePropertiesOptions !== null && poolUpdatePropertiesOptions !== undefined)
      {
        timeout = poolUpdatePropertiesOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolUpdatePropertiesOptions !== null && poolUpdatePropertiesOptions !== undefined)
      {
        clientRequestId = poolUpdatePropertiesOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolUpdatePropertiesOptions !== null && poolUpdatePropertiesOptions !== undefined)
      {
        returnClientRequestId = poolUpdatePropertiesOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolUpdatePropertiesOptions !== null && poolUpdatePropertiesOptions !== undefined)
      {
        ocpDate = poolUpdatePropertiesOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/updateproperties';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolUpdatePropertiesParameter !== null && poolUpdatePropertiesParameter !== undefined) {
        let requestModelMapper = Mappers.PoolUpdatePropertiesParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolUpdatePropertiesParameter, 'poolUpdatePropertiesParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolUpdatePropertiesParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 204) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Upgrades the operating system of the specified pool.
   *
   * During an upgrade, the Batch service upgrades each compute node in the pool.
   * When a compute node is chosen for upgrade, any tasks running on that node
   * are removed from the node and returned to the queue to be rerun later (or on
   * a different compute node). The node will be unavailable until the upgrade is
   * complete. This operation results in temporarily reduced pool capacity as
   * nodes are taken out of service to be upgraded. Although the Batch service
   * tries to avoid upgrading all compute nodes at the same time, it does not
   * guarantee to do this (particularly on small pools); therefore, the pool may
   * be temporarily unavailable to run tasks. When this operation runs, the pool
   * state changes to upgrading. When all compute nodes have finished upgrading,
   * the pool state returns to active. While the upgrade is in progress, the
   * pool's currentOSVersion reflects the OS version that nodes are upgrading
   * from, and targetOSVersion reflects the OS version that nodes are upgrading
   * to. Once the upgrade is complete, currentOSVersion is updated to reflect the
   * OS version now running on all nodes. This operation can only be invoked on
   * pools created with the cloudServiceConfiguration property.
   *
   * @param {string} poolId The ID of the pool to upgrade.
   *
   * @param {PoolUpgradeOSParameter} poolUpgradeOSParameter The parameters for
   * the request.
   *
   * @param {PoolUpgradeOSOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async upgradeOSWithHttpOperationResponse(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter, options?: Models.PoolUpgradeOSOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolUpgradeOSOptions = (options && options.poolUpgradeOSOptions !== undefined) ? options.poolUpgradeOSOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (poolUpgradeOSParameter === null || poolUpgradeOSParameter === undefined) {
        throw new Error('poolUpgradeOSParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        timeout = poolUpgradeOSOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        clientRequestId = poolUpgradeOSOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        returnClientRequestId = poolUpgradeOSOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        ocpDate = poolUpgradeOSOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        ifMatch = poolUpgradeOSOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        ifNoneMatch = poolUpgradeOSOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        ifModifiedSince = poolUpgradeOSOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolUpgradeOSOptions !== null && poolUpgradeOSOptions !== undefined)
      {
        ifUnmodifiedSince = poolUpgradeOSOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/upgradeos';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (poolUpgradeOSParameter !== null && poolUpgradeOSParameter !== undefined) {
        let requestModelMapper = Mappers.PoolUpgradeOSParameter;
        requestModel = client.serializer.serialize(requestModelMapper, poolUpgradeOSParameter, 'poolUpgradeOSParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(poolUpgradeOSParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Removes compute nodes from the specified pool.
   *
   * This operation can only run when the allocation state of the pool is steady.
   * When this operation runs, the allocation state changes from steady to
   * resizing.
   *
   * @param {string} poolId The ID of the pool from which you want to remove
   * nodes.
   *
   * @param {NodeRemoveParameter} nodeRemoveParameter The parameters for the
   * request.
   *
   * @param {PoolRemoveNodesOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async removeNodesWithHttpOperationResponse(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options?: Models.PoolRemoveNodesOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolRemoveNodesOptions = (options && options.poolRemoveNodesOptions !== undefined) ? options.poolRemoveNodesOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeRemoveParameter === null || nodeRemoveParameter === undefined) {
        throw new Error('nodeRemoveParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifMatch: any;
    let ifNoneMatch: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        timeout = poolRemoveNodesOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        clientRequestId = poolRemoveNodesOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        returnClientRequestId = poolRemoveNodesOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        ocpDate = poolRemoveNodesOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        ifMatch = poolRemoveNodesOptions.ifMatch;
        if (ifMatch !== null && ifMatch !== undefined && typeof ifMatch.valueOf() !== 'string') {
          throw new Error('ifMatch must be of type string.');
        }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        ifNoneMatch = poolRemoveNodesOptions.ifNoneMatch;
        if (ifNoneMatch !== null && ifNoneMatch !== undefined && typeof ifNoneMatch.valueOf() !== 'string') {
          throw new Error('ifNoneMatch must be of type string.');
        }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        ifModifiedSince = poolRemoveNodesOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (poolRemoveNodesOptions !== null && poolRemoveNodesOptions !== undefined)
      {
        ifUnmodifiedSince = poolRemoveNodesOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/removenodes';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifMatch !== undefined && ifMatch !== null) {
      httpRequest.headers['If-Match'] = ifMatch;
    }
    if (ifNoneMatch !== undefined && ifNoneMatch !== null) {
      httpRequest.headers['If-None-Match'] = ifNoneMatch;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Serialize Request
    let requestContent = null;
    let requestModel = null;
    try {
      if (nodeRemoveParameter !== null && nodeRemoveParameter !== undefined) {
        let requestModelMapper = Mappers.NodeRemoveParameter;
        requestModel = client.serializer.serialize(requestModelMapper, nodeRemoveParameter, 'nodeRemoveParameter');
        requestContent = JSON.stringify(requestModel);
      }
    } catch (error) {
      let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
          `payload - ${JSON.stringify(nodeRemoveParameter, null, 2)}.`);
      return Promise.reject(serializationError);
    }
    httpRequest.body = requestContent;
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the usage metrics, aggregated by pool across individual time
   * intervals, for the specified account.
   *
   * If you do not specify a $filter clause including a poolId, the response
   * includes all pools that existed in the account in the time range of the
   * returned aggregation intervals. If you do not specify a $filter clause
   * including a startTime or endTime these filters default to the start and end
   * times of the last aggregation interval currently available; that is, only
   * the last aggregation interval is returned.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {PoolListUsageMetricsNextOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listUsageMetricsNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PoolListUsageMetricsNextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolListUsageMetricsNextOptions = (options && options.poolListUsageMetricsNextOptions !== undefined) ? options.poolListUsageMetricsNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolListUsageMetricsNextOptions !== null && poolListUsageMetricsNextOptions !== undefined)
      {
        clientRequestId = poolListUsageMetricsNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolListUsageMetricsNextOptions !== null && poolListUsageMetricsNextOptions !== undefined)
      {
        returnClientRequestId = poolListUsageMetricsNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolListUsageMetricsNextOptions !== null && poolListUsageMetricsNextOptions !== undefined)
      {
        ocpDate = poolListUsageMetricsNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let requestUrl = '{nextLink}';
    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.PoolListUsageMetricsResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the pools in the specified account.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {PoolListNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: Models.PoolListNextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let poolListNextOptions = (options && options.poolListNextOptions !== undefined) ? options.poolListNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (poolListNextOptions !== null && poolListNextOptions !== undefined)
      {
        clientRequestId = poolListNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (poolListNextOptions !== null && poolListNextOptions !== undefined)
      {
        returnClientRequestId = poolListNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (poolListNextOptions !== null && poolListNextOptions !== undefined)
      {
        ocpDate = poolListNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let requestUrl = '{nextLink}';
    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.CloudPoolListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the usage metrics, aggregated by pool across individual time
   * intervals, for the specified account.
   *
   * If you do not specify a $filter clause including a poolId, the response
   * includes all pools that existed in the account in the time range of the
   * returned aggregation intervals. If you do not specify a $filter clause
   * including a startTime or endTime these filters default to the start and end
   * times of the last aggregation interval currently available; that is, only
   * the last aggregation interval is returned.
   *
   * @param {PoolListUsageMetricsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.PoolListUsageMetricsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PoolListUsageMetricsResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listUsageMetrics(): Promise<Models.PoolListUsageMetricsResult>;
  listUsageMetrics(options: Models.PoolListUsageMetricsOptionalParams): Promise<Models.PoolListUsageMetricsResult>;
  listUsageMetrics(callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetrics(options: Models.PoolListUsageMetricsOptionalParams, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetrics(options?: Models.PoolListUsageMetricsOptionalParams, callback?: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.PoolListUsageMetricsResult>;
    if (!callback) {
      return this.listUsageMetricsWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.PoolListUsageMetricsResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listUsageMetricsWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.PoolListUsageMetricsResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Gets lifetime summary statistics for all of the pools in the
   * specified account.
   *
   * Statistics are aggregated across all pools that have ever existed in the
   * account, from account creation to the last update time of the statistics.
   *
   * @param {PoolGetAllLifetimeStatisticsOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.PoolStatistics} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PoolStatistics} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllLifetimeStatistics(): Promise<Models.PoolStatistics>;
  getAllLifetimeStatistics(options: Models.PoolGetAllLifetimeStatisticsOptionalParams): Promise<Models.PoolStatistics>;
  getAllLifetimeStatistics(callback: msRest.ServiceCallback<Models.PoolStatistics>): void;
  getAllLifetimeStatistics(options: Models.PoolGetAllLifetimeStatisticsOptionalParams, callback: msRest.ServiceCallback<Models.PoolStatistics>): void;
  getAllLifetimeStatistics(options?: Models.PoolGetAllLifetimeStatisticsOptionalParams, callback?: msRest.ServiceCallback<Models.PoolStatistics>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.PoolStatistics>;
    if (!callback) {
      return this.getAllLifetimeStatisticsWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.PoolStatistics);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getAllLifetimeStatisticsWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.PoolStatistics;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Adds a pool to the specified account.
   *
   * When naming pools, avoid including sensitive information such as user names
   * or secret project names. This information may appear in telemetry logs
   * accessible to Microsoft Support engineers.
   *
   * @param {PoolAddParameter} pool The pool to be added.
   *
   * @param {PoolAddOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  add(pool: Models.PoolAddParameter): Promise<void>;
  add(pool: Models.PoolAddParameter, options: Models.PoolAddOptionalParams): Promise<void>;
  add(pool: Models.PoolAddParameter, callback: msRest.ServiceCallback<void>): void;
  add(pool: Models.PoolAddParameter, options: Models.PoolAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(pool: Models.PoolAddParameter, options?: Models.PoolAddOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.addWithHttpOperationResponse(pool, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.addWithHttpOperationResponse(pool, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the pools in the specified account.
   *
   * @param {PoolListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudPoolListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudPoolListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  list(): Promise<Models.CloudPoolListResult>;
  list(options: Models.PoolListOptionalParams): Promise<Models.CloudPoolListResult>;
  list(callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  list(options: Models.PoolListOptionalParams, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  list(options?: Models.PoolListOptionalParams, callback?: msRest.ServiceCallback<Models.CloudPoolListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudPoolListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudPoolListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudPoolListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Deletes a pool from the specified account.
   *
   * When you request that a pool be deleted, the following actions occur: the
   * pool state is set to deleting; any ongoing resize operation on the pool are
   * stopped; the Batch service starts resizing the pool to zero nodes; any tasks
   * running on existing nodes are terminated and requeued (as if a resize pool
   * operation had been requested with the default requeue option); finally, the
   * pool is removed from the system. Because running tasks are requeued, the
   * user can rerun these tasks by updating their job to target a different pool.
   * The tasks can then run on the new pool. If you want to override the requeue
   * behavior, then you should call resize pool explicitly to shrink the pool to
   * zero size before deleting the pool. If you call an Update, Patch or Delete
   * API on a pool in the deleting state, it will fail with HTTP status code 409
   * with error code PoolBeingDeleted.
   *
   * @param {string} poolId The ID of the pool to delete.
   *
   * @param {PoolDeleteMethodOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(poolId: string): Promise<void>;
  deleteMethod(poolId: string, options: Models.PoolDeleteMethodOptionalParams): Promise<void>;
  deleteMethod(poolId: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(poolId: string, options: Models.PoolDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(poolId: string, options?: Models.PoolDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteMethodWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Gets basic properties of a pool.
   *
   * @param {string} poolId The ID of the pool to get.
   *
   * @param {PoolExistsOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {boolean} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  exists(poolId: string): Promise<boolean>;
  exists(poolId: string, options: Models.PoolExistsOptionalParams): Promise<boolean>;
  exists(poolId: string, callback: msRest.ServiceCallback<boolean>): void;
  exists(poolId: string, options: Models.PoolExistsOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  exists(poolId: string, options?: Models.PoolExistsOptionalParams, callback?: msRest.ServiceCallback<boolean>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<boolean>;
    if (!callback) {
      return this.existsWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as boolean);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.existsWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as boolean;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Gets information about the specified pool.
   *
   * @param {string} poolId The ID of the pool to get.
   *
   * @param {PoolGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudPool} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudPool} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  get(poolId: string): Promise<Models.CloudPool>;
  get(poolId: string, options: Models.PoolGetOptionalParams): Promise<Models.CloudPool>;
  get(poolId: string, callback: msRest.ServiceCallback<Models.CloudPool>): void;
  get(poolId: string, options: Models.PoolGetOptionalParams, callback: msRest.ServiceCallback<Models.CloudPool>): void;
  get(poolId: string, options?: Models.PoolGetOptionalParams, callback?: msRest.ServiceCallback<Models.CloudPool>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudPool>;
    if (!callback) {
      return this.getWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudPool);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudPool;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Updates the properties of the specified pool.
   *
   * This only replaces the pool properties specified in the request. For
   * example, if the pool has a start task associated with it, and a request does
   * not specify a start task element, then the pool keeps the existing start
   * task.
   *
   * @param {string} poolId The ID of the pool to update.
   *
   * @param {PoolPatchParameter} poolPatchParameter The parameters for the
   * request.
   *
   * @param {PoolPatchOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter): Promise<void>;
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options: Models.PoolPatchOptionalParams): Promise<void>;
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, callback: msRest.ServiceCallback<void>): void;
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options: Models.PoolPatchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options?: Models.PoolPatchOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.patchWithHttpOperationResponse(poolId, poolPatchParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.patchWithHttpOperationResponse(poolId, poolPatchParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Disables automatic scaling for a pool.
   *
   * @param {string} poolId The ID of the pool on which to disable automatic
   * scaling.
   *
   * @param {PoolDisableAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  disableAutoScale(poolId: string): Promise<void>;
  disableAutoScale(poolId: string, options: Models.PoolDisableAutoScaleOptionalParams): Promise<void>;
  disableAutoScale(poolId: string, callback: msRest.ServiceCallback<void>): void;
  disableAutoScale(poolId: string, options: Models.PoolDisableAutoScaleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableAutoScale(poolId: string, options?: Models.PoolDisableAutoScaleOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.disableAutoScaleWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.disableAutoScaleWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Enables automatic scaling for a pool.
   *
   * You cannot enable automatic scaling on a pool if a resize operation is in
   * progress on the pool. If automatic scaling of the pool is currently
   * disabled, you must specify a valid autoscale formula as part of the request.
   * If automatic scaling of the pool is already enabled, you may specify a new
   * autoscale formula and/or a new evaluation interval. You cannot call this API
   * for the same pool more than once every 30 seconds.
   *
   * @param {string} poolId The ID of the pool on which to enable automatic
   * scaling.
   *
   * @param {PoolEnableAutoScaleParameter} poolEnableAutoScaleParameter The
   * parameters for the request.
   *
   * @param {PoolEnableAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter): Promise<void>;
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options: Models.PoolEnableAutoScaleOptionalParams): Promise<void>;
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, callback: msRest.ServiceCallback<void>): void;
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options: Models.PoolEnableAutoScaleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options?: Models.PoolEnableAutoScaleOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.enableAutoScaleWithHttpOperationResponse(poolId, poolEnableAutoScaleParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.enableAutoScaleWithHttpOperationResponse(poolId, poolEnableAutoScaleParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Gets the result of evaluating an automatic scaling formula on the
   * pool.
   *
   * This API is primarily for validating an autoscale formula, as it simply
   * returns the result without applying the formula to the pool. The pool must
   * have auto scaling enabled in order to evaluate a formula.
   *
   * @param {string} poolId The ID of the pool on which to evaluate the automatic
   * scaling formula.
   *
   * @param {PoolEvaluateAutoScaleParameter} poolEvaluateAutoScaleParameter The
   * parameters for the request.
   *
   * @param {PoolEvaluateAutoScaleOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.AutoScaleRun} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.AutoScaleRun} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  evaluateAutoScale(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter): Promise<Models.AutoScaleRun>;
  evaluateAutoScale(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter, options: Models.PoolEvaluateAutoScaleOptionalParams): Promise<Models.AutoScaleRun>;
  evaluateAutoScale(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter, callback: msRest.ServiceCallback<Models.AutoScaleRun>): void;
  evaluateAutoScale(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter, options: Models.PoolEvaluateAutoScaleOptionalParams, callback: msRest.ServiceCallback<Models.AutoScaleRun>): void;
  evaluateAutoScale(poolId: string, poolEvaluateAutoScaleParameter: Models.PoolEvaluateAutoScaleParameter, options?: Models.PoolEvaluateAutoScaleOptionalParams, callback?: msRest.ServiceCallback<Models.AutoScaleRun>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.AutoScaleRun>;
    if (!callback) {
      return this.evaluateAutoScaleWithHttpOperationResponse(poolId, poolEvaluateAutoScaleParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.AutoScaleRun);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.evaluateAutoScaleWithHttpOperationResponse(poolId, poolEvaluateAutoScaleParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.AutoScaleRun;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Changes the number of compute nodes that are assigned to a pool.
   *
   * You can only resize a pool when its allocation state is steady. If the pool
   * is already resizing, the request fails with status code 409. When you resize
   * a pool, the pool's allocation state changes from steady to resizing. You
   * cannot resize pools which are configured for automatic scaling. If you try
   * to do this, the Batch service returns an error 409. If you resize a pool
   * downwards, the Batch service chooses which nodes to remove. To remove
   * specific nodes, use the pool remove nodes API instead.
   *
   * @param {string} poolId The ID of the pool to resize.
   *
   * @param {PoolResizeParameter} poolResizeParameter The parameters for the
   * request.
   *
   * @param {PoolResizeOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter): Promise<void>;
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options: Models.PoolResizeOptionalParams): Promise<void>;
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, callback: msRest.ServiceCallback<void>): void;
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options: Models.PoolResizeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options?: Models.PoolResizeOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.resizeWithHttpOperationResponse(poolId, poolResizeParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.resizeWithHttpOperationResponse(poolId, poolResizeParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Stops an ongoing resize operation on the pool.
   *
   * This does not restore the pool to its previous state before the resize
   * operation: it only stops any further changes being made, and the pool
   * maintains its current state. After stopping, the pool stabilizes at the
   * number of nodes it was at when the stop operation was done. During the stop
   * operation, the pool allocation state changes first to stopping and then to
   * steady. A resize operation need not be an explicit resize pool request; this
   * API can also be used to halt the initial sizing of the pool when it is
   * created.
   *
   * @param {string} poolId The ID of the pool whose resizing you want to stop.
   *
   * @param {PoolStopResizeOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  stopResize(poolId: string): Promise<void>;
  stopResize(poolId: string, options: Models.PoolStopResizeOptionalParams): Promise<void>;
  stopResize(poolId: string, callback: msRest.ServiceCallback<void>): void;
  stopResize(poolId: string, options: Models.PoolStopResizeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  stopResize(poolId: string, options?: Models.PoolStopResizeOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.stopResizeWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.stopResizeWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Updates the properties of the specified pool.
   *
   * This fully replaces all the updateable properties of the pool. For example,
   * if the pool has a start task associated with it and if start task is not
   * specified with this request, then the Batch service will remove the existing
   * start task.
   *
   * @param {string} poolId The ID of the pool to update.
   *
   * @param {PoolUpdatePropertiesParameter} poolUpdatePropertiesParameter The
   * parameters for the request.
   *
   * @param {PoolUpdatePropertiesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter): Promise<void>;
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options: Models.PoolUpdatePropertiesOptionalParams): Promise<void>;
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, callback: msRest.ServiceCallback<void>): void;
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options: Models.PoolUpdatePropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options?: Models.PoolUpdatePropertiesOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.updatePropertiesWithHttpOperationResponse(poolId, poolUpdatePropertiesParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.updatePropertiesWithHttpOperationResponse(poolId, poolUpdatePropertiesParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Upgrades the operating system of the specified pool.
   *
   * During an upgrade, the Batch service upgrades each compute node in the pool.
   * When a compute node is chosen for upgrade, any tasks running on that node
   * are removed from the node and returned to the queue to be rerun later (or on
   * a different compute node). The node will be unavailable until the upgrade is
   * complete. This operation results in temporarily reduced pool capacity as
   * nodes are taken out of service to be upgraded. Although the Batch service
   * tries to avoid upgrading all compute nodes at the same time, it does not
   * guarantee to do this (particularly on small pools); therefore, the pool may
   * be temporarily unavailable to run tasks. When this operation runs, the pool
   * state changes to upgrading. When all compute nodes have finished upgrading,
   * the pool state returns to active. While the upgrade is in progress, the
   * pool's currentOSVersion reflects the OS version that nodes are upgrading
   * from, and targetOSVersion reflects the OS version that nodes are upgrading
   * to. Once the upgrade is complete, currentOSVersion is updated to reflect the
   * OS version now running on all nodes. This operation can only be invoked on
   * pools created with the cloudServiceConfiguration property.
   *
   * @param {string} poolId The ID of the pool to upgrade.
   *
   * @param {PoolUpgradeOSParameter} poolUpgradeOSParameter The parameters for
   * the request.
   *
   * @param {PoolUpgradeOSOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  upgradeOS(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter): Promise<void>;
  upgradeOS(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter, options: Models.PoolUpgradeOSOptionalParams): Promise<void>;
  upgradeOS(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter, callback: msRest.ServiceCallback<void>): void;
  upgradeOS(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter, options: Models.PoolUpgradeOSOptionalParams, callback: msRest.ServiceCallback<void>): void;
  upgradeOS(poolId: string, poolUpgradeOSParameter: Models.PoolUpgradeOSParameter, options?: Models.PoolUpgradeOSOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.upgradeOSWithHttpOperationResponse(poolId, poolUpgradeOSParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.upgradeOSWithHttpOperationResponse(poolId, poolUpgradeOSParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Removes compute nodes from the specified pool.
   *
   * This operation can only run when the allocation state of the pool is steady.
   * When this operation runs, the allocation state changes from steady to
   * resizing.
   *
   * @param {string} poolId The ID of the pool from which you want to remove
   * nodes.
   *
   * @param {NodeRemoveParameter} nodeRemoveParameter The parameters for the
   * request.
   *
   * @param {PoolRemoveNodesOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter): Promise<void>;
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options: Models.PoolRemoveNodesOptionalParams): Promise<void>;
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, callback: msRest.ServiceCallback<void>): void;
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options: Models.PoolRemoveNodesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options?: Models.PoolRemoveNodesOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.removeNodesWithHttpOperationResponse(poolId, nodeRemoveParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.removeNodesWithHttpOperationResponse(poolId, nodeRemoveParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists the usage metrics, aggregated by pool across individual time
   * intervals, for the specified account.
   *
   * If you do not specify a $filter clause including a poolId, the response
   * includes all pools that existed in the account in the time range of the
   * returned aggregation intervals. If you do not specify a $filter clause
   * including a startTime or endTime these filters default to the start and end
   * times of the last aggregation interval currently available; that is, only
   * the last aggregation interval is returned.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {PoolListUsageMetricsNextOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.PoolListUsageMetricsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.PoolListUsageMetricsResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listUsageMetricsNext(nextPageLink: string): Promise<Models.PoolListUsageMetricsResult>;
  listUsageMetricsNext(nextPageLink: string, options: Models.PoolListUsageMetricsNextOptionalParams): Promise<Models.PoolListUsageMetricsResult>;
  listUsageMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetricsNext(nextPageLink: string, options: Models.PoolListUsageMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetricsNext(nextPageLink: string, options?: Models.PoolListUsageMetricsNextOptionalParams, callback?: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.PoolListUsageMetricsResult>;
    if (!callback) {
      return this.listUsageMetricsNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.PoolListUsageMetricsResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listUsageMetricsNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.PoolListUsageMetricsResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the pools in the specified account.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {PoolListNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CloudPoolListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CloudPoolListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.CloudPoolListResult>;
  listNext(nextPageLink: string, options: Models.PoolListNextOptionalParams): Promise<Models.CloudPoolListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  listNext(nextPageLink: string, options: Models.PoolListNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  listNext(nextPageLink: string, options?: Models.PoolListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CloudPoolListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CloudPoolListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.CloudPoolListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.CloudPoolListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

}
