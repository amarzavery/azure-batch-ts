/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClient } from "../batchServiceClient";

const WebResource = msRest.WebResource;

/** Class representing a File. */
export class File {
  private readonly client: BatchServiceClient;
  /**
   * Create a File.
   * @param {BatchServiceClient} client Reference to the service client.
   */
  constructor(client: BatchServiceClient) {
    this.client = client;
  }

  /**
   * @summary Deletes the specified task file from the compute node where the
   * task ran.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to delete.
   *
   * @param {string} filePath The path to the task file or directory that you
   * want to delete.
   *
   * @param {FileDeleteFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteFromTaskWithHttpOperationResponse(jobId: string, taskId: string, filePath: string, options?: Models.FileDeleteFromTaskOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
    let fileDeleteFromTaskOptions = (options && options.fileDeleteFromTaskOptions !== undefined) ? options.fileDeleteFromTaskOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
        throw new Error('recursive must be of type boolean.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined)
      {
        timeout = fileDeleteFromTaskOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined)
      {
        clientRequestId = fileDeleteFromTaskOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined)
      {
        returnClientRequestId = fileDeleteFromTaskOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileDeleteFromTaskOptions !== null && fileDeleteFromTaskOptions !== undefined)
      {
        ocpDate = fileDeleteFromTaskOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/files/{filePath}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    if (recursive !== null && recursive !== undefined) {
      queryParamsArray.push('recursive=' + encodeURIComponent(recursive.toString()));
    }
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Returns the content of the specified task file.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to retrieve.
   *
   * @param {string} filePath The path to the task file that you want to get the
   * content of.
   *
   * @param {FileGetFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getFromTaskWithHttpOperationResponse(jobId: string, taskId: string, filePath: string, options?: Models.FileGetFromTaskOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileGetFromTaskOptions = (options && options.fileGetFromTaskOptions !== undefined) ? options.fileGetFromTaskOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ocpRange: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        timeout = fileGetFromTaskOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        clientRequestId = fileGetFromTaskOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        returnClientRequestId = fileGetFromTaskOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        ocpDate = fileGetFromTaskOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        ocpRange = fileGetFromTaskOptions.ocpRange;
        if (ocpRange !== null && ocpRange !== undefined && typeof ocpRange.valueOf() !== 'string') {
          throw new Error('ocpRange must be of type string.');
        }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        ifModifiedSince = fileGetFromTaskOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (fileGetFromTaskOptions !== null && fileGetFromTaskOptions !== undefined)
      {
        ifUnmodifiedSince = fileGetFromTaskOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/files/{filePath}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ocpRange !== undefined && ocpRange !== null) {
      httpRequest.headers['ocp-range'] = ocpRange;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    httpRequest.rawResponse = true;
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;

      if (statusCode !== 200) {
        let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }

        return Promise.reject(error);
      }

    } catch(error) {
      return Promise.reject(error);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets the properties of the specified task file.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to get the
   * properties of.
   *
   * @param {string} filePath The path to the task file that you want to get the
   * properties of.
   *
   * @param {FileGetPropertiesFromTaskOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getPropertiesFromTaskWithHttpOperationResponse(jobId: string, taskId: string, filePath: string, options?: Models.FileGetPropertiesFromTaskOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileGetPropertiesFromTaskOptions = (options && options.fileGetPropertiesFromTaskOptions !== undefined) ? options.fileGetPropertiesFromTaskOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        timeout = fileGetPropertiesFromTaskOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        clientRequestId = fileGetPropertiesFromTaskOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        returnClientRequestId = fileGetPropertiesFromTaskOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        ocpDate = fileGetPropertiesFromTaskOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        ifModifiedSince = fileGetPropertiesFromTaskOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (fileGetPropertiesFromTaskOptions !== null && fileGetPropertiesFromTaskOptions !== undefined)
      {
        ifUnmodifiedSince = fileGetPropertiesFromTaskOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/files/{filePath}';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes the specified file from the compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * delete the file.
   *
   * @param {string} filePath The path to the file or directory that you want to
   * delete.
   *
   * @param {FileDeleteFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteFromComputeNodeWithHttpOperationResponse(poolId: string, nodeId: string, filePath: string, options?: Models.FileDeleteFromComputeNodeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
    let fileDeleteFromComputeNodeOptions = (options && options.fileDeleteFromComputeNodeOptions !== undefined) ? options.fileDeleteFromComputeNodeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
        throw new Error('recursive must be of type boolean.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined)
      {
        timeout = fileDeleteFromComputeNodeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined)
      {
        clientRequestId = fileDeleteFromComputeNodeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined)
      {
        returnClientRequestId = fileDeleteFromComputeNodeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileDeleteFromComputeNodeOptions !== null && fileDeleteFromComputeNodeOptions !== undefined)
      {
        ocpDate = fileDeleteFromComputeNodeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/files/{filePath}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    if (recursive !== null && recursive !== undefined) {
      queryParamsArray.push('recursive=' + encodeURIComponent(recursive.toString()));
    }
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Returns the content of the specified compute node file.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that contains the file.
   *
   * @param {string} filePath The path to the compute node file that you want to
   * get the content of.
   *
   * @param {FileGetFromComputeNodeOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getFromComputeNodeWithHttpOperationResponse(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetFromComputeNodeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileGetFromComputeNodeOptions = (options && options.fileGetFromComputeNodeOptions !== undefined) ? options.fileGetFromComputeNodeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ocpRange: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        timeout = fileGetFromComputeNodeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        clientRequestId = fileGetFromComputeNodeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        returnClientRequestId = fileGetFromComputeNodeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        ocpDate = fileGetFromComputeNodeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        ocpRange = fileGetFromComputeNodeOptions.ocpRange;
        if (ocpRange !== null && ocpRange !== undefined && typeof ocpRange.valueOf() !== 'string') {
          throw new Error('ocpRange must be of type string.');
        }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        ifModifiedSince = fileGetFromComputeNodeOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (fileGetFromComputeNodeOptions !== null && fileGetFromComputeNodeOptions !== undefined)
      {
        ifUnmodifiedSince = fileGetFromComputeNodeOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/files/{filePath}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ocpRange !== undefined && ocpRange !== null) {
      httpRequest.headers['ocp-range'] = ocpRange;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    httpRequest.rawResponse = true;
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;

      if (statusCode !== 200) {
        let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }

        return Promise.reject(error);
      }

    } catch(error) {
      return Promise.reject(error);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets the properties of the specified compute node file.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that contains the file.
   *
   * @param {string} filePath The path to the compute node file that you want to
   * get the properties of.
   *
   * @param {FileGetPropertiesFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getPropertiesFromComputeNodeWithHttpOperationResponse(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetPropertiesFromComputeNodeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileGetPropertiesFromComputeNodeOptions = (options && options.fileGetPropertiesFromComputeNodeOptions !== undefined) ? options.fileGetPropertiesFromComputeNodeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (filePath === null || filePath === undefined || typeof filePath.valueOf() !== 'string') {
        throw new Error('filePath cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    let ifModifiedSince: any;
    let ifUnmodifiedSince: any;
    try {
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        timeout = fileGetPropertiesFromComputeNodeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        clientRequestId = fileGetPropertiesFromComputeNodeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        returnClientRequestId = fileGetPropertiesFromComputeNodeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        ocpDate = fileGetPropertiesFromComputeNodeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        ifModifiedSince = fileGetPropertiesFromComputeNodeOptions.ifModifiedSince;
        if (ifModifiedSince && !(ifModifiedSince instanceof Date ||
            (typeof (ifModifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifModifiedSince as string))))) {
              throw new Error('ifModifiedSince must be of type date.');
            }
      }
      if (fileGetPropertiesFromComputeNodeOptions !== null && fileGetPropertiesFromComputeNodeOptions !== undefined)
      {
        ifUnmodifiedSince = fileGetPropertiesFromComputeNodeOptions.ifUnmodifiedSince;
        if (ifUnmodifiedSince && !(ifUnmodifiedSince instanceof Date ||
            (typeof (ifUnmodifiedSince as string).valueOf() === 'string' && !isNaN(Date.parse(ifUnmodifiedSince as string))))) {
              throw new Error('ifUnmodifiedSince must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/files/{filePath}';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
    requestUrl = requestUrl.replace('{filePath}', encodeURIComponent(filePath));
    let queryParamsArray: Array<any> = [];
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'HEAD';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if (ifModifiedSince !== undefined && ifModifiedSince !== null) {
      httpRequest.headers['If-Modified-Since'] = ifModifiedSince instanceof Date ? ifModifiedSince.toUTCString() : ifModifiedSince;
    }
    if (ifUnmodifiedSince !== undefined && ifUnmodifiedSince !== null) {
      httpRequest.headers['If-Unmodified-Since'] = ifUnmodifiedSince instanceof Date ? ifUnmodifiedSince.toUTCString() : ifUnmodifiedSince;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the files in a task's directory on its compute node.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose files you want to list.
   *
   * @param {FileListFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listFromTaskWithHttpOperationResponse(jobId: string, taskId: string, options?: Models.FileListFromTaskOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
    let fileListFromTaskOptions = (options && options.fileListFromTaskOptions !== undefined) ? options.fileListFromTaskOptions : undefined;
    // Validate
    try {
      if (jobId === null || jobId === undefined || typeof jobId.valueOf() !== 'string') {
        throw new Error('jobId cannot be null or undefined and it must be of type string.');
      }
      if (taskId === null || taskId === undefined || typeof taskId.valueOf() !== 'string') {
        throw new Error('taskId cannot be null or undefined and it must be of type string.');
      }
      if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
        throw new Error('recursive must be of type boolean.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        filter = fileListFromTaskOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        maxResults = fileListFromTaskOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        timeout = fileListFromTaskOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        clientRequestId = fileListFromTaskOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        returnClientRequestId = fileListFromTaskOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileListFromTaskOptions !== null && fileListFromTaskOptions !== undefined)
      {
        ocpDate = fileListFromTaskOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'jobs/{jobId}/tasks/{taskId}/files';
    requestUrl = requestUrl.replace('{jobId}', encodeURIComponent(jobId));
    requestUrl = requestUrl.replace('{taskId}', encodeURIComponent(taskId));
    let queryParamsArray: Array<any> = [];
    if (recursive !== null && recursive !== undefined) {
      queryParamsArray.push('recursive=' + encodeURIComponent(recursive.toString()));
    }
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (filter !== null && filter !== undefined) {
      queryParamsArray.push('$filter=' + encodeURIComponent(filter));
    }
    if (maxResults !== null && maxResults !== undefined) {
      queryParamsArray.push('maxresults=' + encodeURIComponent(maxResults.toString()));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.NodeFileListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the files in task directories on the specified compute
   * node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node whose files you want to
   * list.
   *
   * @param {FileListFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listFromComputeNodeWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.FileListFromComputeNodeOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let recursive = (options && options.recursive !== undefined) ? options.recursive : undefined;
    let fileListFromComputeNodeOptions = (options && options.fileListFromComputeNodeOptions !== undefined) ? options.fileListFromComputeNodeOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (recursive !== null && recursive !== undefined && typeof recursive !== 'boolean') {
        throw new Error('recursive must be of type boolean.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        filter = fileListFromComputeNodeOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        maxResults = fileListFromComputeNodeOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        timeout = fileListFromComputeNodeOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        clientRequestId = fileListFromComputeNodeOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        returnClientRequestId = fileListFromComputeNodeOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileListFromComputeNodeOptions !== null && fileListFromComputeNodeOptions !== undefined)
      {
        ocpDate = fileListFromComputeNodeOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let baseUrl = this.client.baseUri;
    let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'pools/{poolId}/nodes/{nodeId}/files';
    requestUrl = requestUrl.replace('{poolId}', encodeURIComponent(poolId));
    requestUrl = requestUrl.replace('{nodeId}', encodeURIComponent(nodeId));
    let queryParamsArray: Array<any> = [];
    if (recursive !== null && recursive !== undefined) {
      queryParamsArray.push('recursive=' + encodeURIComponent(recursive.toString()));
    }
    queryParamsArray.push('api-version=' + encodeURIComponent(this.client.apiVersion));
    if (filter !== null && filter !== undefined) {
      queryParamsArray.push('$filter=' + encodeURIComponent(filter));
    }
    if (maxResults !== null && maxResults !== undefined) {
      queryParamsArray.push('maxresults=' + encodeURIComponent(maxResults.toString()));
    }
    if (timeout !== null && timeout !== undefined) {
      queryParamsArray.push('timeout=' + encodeURIComponent(timeout.toString()));
    }
    if (queryParamsArray.length > 0) {
      requestUrl += '?' + queryParamsArray.join('&');
    }

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.NodeFileListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the files in a task's directory on its compute node.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {FileListFromTaskNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listFromTaskNextWithHttpOperationResponse(nextPageLink: string, options?: Models.FileListFromTaskNextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileListFromTaskNextOptions = (options && options.fileListFromTaskNextOptions !== undefined) ? options.fileListFromTaskNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined)
      {
        clientRequestId = fileListFromTaskNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined)
      {
        returnClientRequestId = fileListFromTaskNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileListFromTaskNextOptions !== null && fileListFromTaskNextOptions !== undefined)
      {
        ocpDate = fileListFromTaskNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let requestUrl = '{nextLink}';
    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.NodeFileListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the files in task directories on the specified compute
   * node.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {FileListFromComputeNodeNextOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listFromComputeNodeNextWithHttpOperationResponse(nextPageLink: string, options?: Models.FileListFromComputeNodeNextOptionalParams): Promise<msRest.HttpOperationResponse> {
    let client = this.client;
    let fileListFromComputeNodeNextOptions = (options && options.fileListFromComputeNodeNextOptions !== undefined) ? options.fileListFromComputeNodeNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined)
      {
        clientRequestId = fileListFromComputeNodeNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined)
      {
        returnClientRequestId = fileListFromComputeNodeNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (fileListFromComputeNodeNextOptions !== null && fileListFromComputeNodeNextOptions !== undefined)
      {
        ocpDate = fileListFromComputeNodeNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Construct URL
    let requestUrl = '{nextLink}';
    requestUrl = requestUrl.replace('{nextLink}', nextPageLink);

    // Create HTTP transport objects
    let httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.url = requestUrl;
    httpRequest.headers = {};
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json; odata=minimalmetadata; charset=utf-8';
    if (this.client.generateClientRequestId) {
        httpRequest.headers['client-request-id'] = msRest.generateUuid();
    }
    if (this.client.acceptLanguage !== undefined && this.client.acceptLanguage !== null) {
      httpRequest.headers['accept-language'] = this.client.acceptLanguage;
    }
    if (clientRequestId !== undefined && clientRequestId !== null) {
      httpRequest.headers['client-request-id'] = clientRequestId.toString();
    }
    if (returnClientRequestId !== undefined && returnClientRequestId !== null) {
      httpRequest.headers['return-client-request-id'] = returnClientRequestId.toString();
    }
    if (ocpDate !== undefined && ocpDate !== null) {
      httpRequest.headers['ocp-date'] = ocpDate instanceof Date ? ocpDate.toUTCString() : ocpDate;
    }
    if(options && options.customHeaders) {
      for(let headerName in options.customHeaders) {
        if (options.customHeaders.hasOwnProperty(headerName)) {
          httpRequest.headers[headerName] = options.customHeaders[headerName];
        }
      }
    }
    // Send Request
    let operationRes: msRest.HttpOperationResponse;
    try {
      operationRes = await client.pipeline(httpRequest);
      let response = operationRes.response;
      let statusCode = response.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = response.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        let parsedErrorResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            let resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.bodyAsJson as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            let resultMapper = Mappers.NodeFileListResult;
            operationRes.bodyAsJson = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.bodyAsJson');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(response);
          return Promise.reject(deserializationError);
        }
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes the specified task file from the compute node where the
   * task ran.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to delete.
   *
   * @param {string} filePath The path to the task file or directory that you
   * want to delete.
   *
   * @param {FileDeleteFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteFromTask(jobId: string, taskId: string, filePath: string): Promise<void>;
  deleteFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileDeleteFromTaskOptionalParams): Promise<void>;
  deleteFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  deleteFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileDeleteFromTaskOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileDeleteFromTaskOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Returns the content of the specified task file.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to retrieve.
   *
   * @param {string} filePath The path to the task file that you want to get the
   * content of.
   *
   * @param {FileGetFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Response} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getFromTask(jobId: string, taskId: string, filePath: string): Promise<Response>;
  getFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetFromTaskOptionalParams): Promise<Response>;
  getFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<Response>): void;
  getFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetFromTaskOptionalParams, callback: msRest.ServiceCallback<Response>): void;
  getFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetFromTaskOptionalParams, callback?: msRest.ServiceCallback<Response>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Response>;
    if (!callback) {
      return this.getFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.response);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.response;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Gets the properties of the specified task file.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose file you want to get the
   * properties of.
   *
   * @param {string} filePath The path to the task file that you want to get the
   * properties of.
   *
   * @param {FileGetPropertiesFromTaskOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string): Promise<void>;
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetPropertiesFromTaskOptionalParams): Promise<void>;
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetPropertiesFromTaskOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetPropertiesFromTaskOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getPropertiesFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getPropertiesFromTaskWithHttpOperationResponse(jobId, taskId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Deletes the specified file from the compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * delete the file.
   *
   * @param {string} filePath The path to the file or directory that you want to
   * delete.
   *
   * @param {FileDeleteFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string): Promise<void>;
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileDeleteFromComputeNodeOptionalParams): Promise<void>;
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileDeleteFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileDeleteFromComputeNodeOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Returns the content of the specified compute node file.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that contains the file.
   *
   * @param {string} filePath The path to the compute node file that you want to
   * get the content of.
   *
   * @param {FileGetFromComputeNodeOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Response} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getFromComputeNode(poolId: string, nodeId: string, filePath: string): Promise<Response>;
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetFromComputeNodeOptionalParams): Promise<Response>;
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<Response>): void;
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<Response>): void;
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetFromComputeNodeOptionalParams, callback?: msRest.ServiceCallback<Response>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Response>;
    if (!callback) {
      return this.getFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.response);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.response;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * Gets the properties of the specified compute node file.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that contains the file.
   *
   * @param {string} filePath The path to the compute node file that you want to
   * get the properties of.
   *
   * @param {FileGetPropertiesFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string): Promise<void>;
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetPropertiesFromComputeNodeOptionalParams): Promise<void>;
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetPropertiesFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetPropertiesFromComputeNodeOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.getPropertiesFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getPropertiesFromComputeNodeWithHttpOperationResponse(poolId, nodeId, filePath, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as void;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists the files in a task's directory on its compute node.
   *
   * @param {string} jobId The ID of the job that contains the task.
   *
   * @param {string} taskId The ID of the task whose files you want to list.
   *
   * @param {FileListFromTaskOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NodeFileListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NodeFileListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listFromTask(jobId: string, taskId: string): Promise<Models.NodeFileListResult>;
  listFromTask(jobId: string, taskId: string, options: Models.FileListFromTaskOptionalParams): Promise<Models.NodeFileListResult>;
  listFromTask(jobId: string, taskId: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTask(jobId: string, taskId: string, options: Models.FileListFromTaskOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTask(jobId: string, taskId: string, options?: Models.FileListFromTaskOptionalParams, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.NodeFileListResult>;
    if (!callback) {
      return this.listFromTaskWithHttpOperationResponse(jobId, taskId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.NodeFileListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listFromTaskWithHttpOperationResponse(jobId, taskId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.NodeFileListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the files in task directories on the specified compute
   * node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node whose files you want to
   * list.
   *
   * @param {FileListFromComputeNodeOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NodeFileListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NodeFileListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listFromComputeNode(poolId: string, nodeId: string): Promise<Models.NodeFileListResult>;
  listFromComputeNode(poolId: string, nodeId: string, options: Models.FileListFromComputeNodeOptionalParams): Promise<Models.NodeFileListResult>;
  listFromComputeNode(poolId: string, nodeId: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNode(poolId: string, nodeId: string, options: Models.FileListFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNode(poolId: string, nodeId: string, options?: Models.FileListFromComputeNodeOptionalParams, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.NodeFileListResult>;
    if (!callback) {
      return this.listFromComputeNodeWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.NodeFileListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listFromComputeNodeWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.NodeFileListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists the files in a task's directory on its compute node.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {FileListFromTaskNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NodeFileListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NodeFileListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listFromTaskNext(nextPageLink: string): Promise<Models.NodeFileListResult>;
  listFromTaskNext(nextPageLink: string, options: Models.FileListFromTaskNextOptionalParams): Promise<Models.NodeFileListResult>;
  listFromTaskNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTaskNext(nextPageLink: string, options: Models.FileListFromTaskNextOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTaskNext(nextPageLink: string, options?: Models.FileListFromTaskNextOptionalParams, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.NodeFileListResult>;
    if (!callback) {
      return this.listFromTaskNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.NodeFileListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listFromTaskNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.NodeFileListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

  /**
   * @summary Lists all of the files in task directories on the specified compute
   * node.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {FileListFromComputeNodeNextOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.NodeFileListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.NodeFileListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {Response} [response] - The HTTP Response stream if an error did not occur.
   */
  listFromComputeNodeNext(nextPageLink: string): Promise<Models.NodeFileListResult>;
  listFromComputeNodeNext(nextPageLink: string, options: Models.FileListFromComputeNodeNextOptionalParams): Promise<Models.NodeFileListResult>;
  listFromComputeNodeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNodeNext(nextPageLink: string, options: Models.FileListFromComputeNodeNextOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNodeNext(nextPageLink: string, options?: Models.FileListFromComputeNodeNextOptionalParams, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.NodeFileListResult>;
    if (!callback) {
      return this.listFromComputeNodeNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.bodyAsJson as Models.NodeFileListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listFromComputeNodeNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.bodyAsJson as Models.NodeFileListResult;
        return cb(err, result, data.request, data.response);
      });
    }
  }

}
