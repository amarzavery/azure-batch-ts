/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClientContext } from "../batchServiceClientContext";

const WebResource = msRest.WebResource;

/** Class representing a Application. */
export class Application {
  private readonly client: BatchServiceClientContext;
  /**
   * Create a Application.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Lists all of the applications available in the specified account.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {ApplicationListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(options?: Models.ApplicationListOptionalParams): Promise<Models.ApplicationListResponse> {
    let client = this.client;
    let applicationListOptions = (options && options.applicationListOptions !== undefined) ? options.applicationListOptions : undefined;
    // Validate
    try {
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (applicationListOptions !== null && applicationListOptions !== undefined)
      {
        maxResults = applicationListOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (applicationListOptions !== null && applicationListOptions !== undefined)
      {
        timeout = applicationListOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (applicationListOptions !== null && applicationListOptions !== undefined)
      {
        clientRequestId = applicationListOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (applicationListOptions !== null && applicationListOptions !== undefined)
      {
        returnClientRequestId = applicationListOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (applicationListOptions !== null && applicationListOptions !== undefined)
      {
        ocpDate = applicationListOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          maxResults,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "applications",
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "maxResults",
              mapper: {
                serializedName: "maxresults",
                defaultValue: 1000,
                constraints: {
                  InclusiveMaximum: 1000,
                  InclusiveMinimum: 1
                },
                type: {
                  name: "Number"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ApplicationListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ApplicationListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets information about the specified application.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {string} applicationId The ID of the application.
   *
   * @param {ApplicationGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(applicationId: string, options?: Models.ApplicationGetOptionalParams): Promise<Models.ApplicationGetResponse> {
    let client = this.client;
    let applicationGetOptions = (options && options.applicationGetOptions !== undefined) ? options.applicationGetOptions : undefined;
    // Validate
    try {
      if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
        throw new Error('applicationId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (applicationGetOptions !== null && applicationGetOptions !== undefined)
      {
        timeout = applicationGetOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (applicationGetOptions !== null && applicationGetOptions !== undefined)
      {
        clientRequestId = applicationGetOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (applicationGetOptions !== null && applicationGetOptions !== undefined)
      {
        returnClientRequestId = applicationGetOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (applicationGetOptions !== null && applicationGetOptions !== undefined)
      {
        ocpDate = applicationGetOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          applicationId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "applications/{applicationId}",
          urlParameters: [
            {
              parameterName: "applicationId",
              mapper: {
                required: true,
                serializedName: "applicationId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ApplicationSummary;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ApplicationGetHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the applications available in the specified account.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {ApplicationListNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: Models.ApplicationListNextOptionalParams): Promise<Models.ApplicationListResponse> {
    let client = this.client;
    let applicationListNextOptions = (options && options.applicationListNextOptions !== undefined) ? options.applicationListNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (applicationListNextOptions !== null && applicationListNextOptions !== undefined)
      {
        clientRequestId = applicationListNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (applicationListNextOptions !== null && applicationListNextOptions !== undefined)
      {
        returnClientRequestId = applicationListNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (applicationListNextOptions !== null && applicationListNextOptions !== undefined)
      {
        ocpDate = applicationListNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://batch.core.windows.net",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterName: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ApplicationListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ApplicationListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the applications available in the specified account.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {ApplicationListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(): Promise<Models.ApplicationListResult>;
  list(options: Models.ApplicationListOptionalParams): Promise<Models.ApplicationListResult>;
  list(callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
  list(options: Models.ApplicationListOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
  list(options?: Models.ApplicationListOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ApplicationListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ApplicationListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ApplicationListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Gets information about the specified application.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {string} applicationId The ID of the application.
   *
   * @param {ApplicationGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ApplicationSummary} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationSummary} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(applicationId: string): Promise<Models.ApplicationSummary>;
  get(applicationId: string, options: Models.ApplicationGetOptionalParams): Promise<Models.ApplicationSummary>;
  get(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationSummary>): void;
  get(applicationId: string, options: Models.ApplicationGetOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationSummary>): void;
  get(applicationId: string, options?: Models.ApplicationGetOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationSummary>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ApplicationSummary>;
    if (!callback) {
      return this.getWithHttpOperationResponse(applicationId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ApplicationSummary);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(applicationId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ApplicationSummary;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Lists all of the applications available in the specified account.
   *
   * This operation returns only applications and versions that are available for
   * use on compute nodes; that is, that can be used in an application package
   * reference. For administrator information about applications and versions
   * that are not yet available to compute nodes, use the Azure portal or the
   * Azure Resource Manager API.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {ApplicationListNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ApplicationListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ApplicationListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.ApplicationListResult>;
  listNext(nextPageLink: string, options: Models.ApplicationListNextOptionalParams): Promise<Models.ApplicationListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
  listNext(nextPageLink: string, options: Models.ApplicationListNextOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationListResult>): void;
  listNext(nextPageLink: string, options?: Models.ApplicationListNextOptionalParams, callback?: msRest.ServiceCallback<Models.ApplicationListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ApplicationListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ApplicationListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ApplicationListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

}
