/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClientContext } from "../batchServiceClientContext";

const WebResource = msRest.WebResource;

/** Class representing a CertificateOperations. */
export class CertificateOperations {
  private readonly client: BatchServiceClientContext;
  /**
   * Create a CertificateOperations.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Adds a certificate to the specified account.
   *
   * @param {CertificateAddParameter} certificate The certificate to be added.
   *
   * @param {CertificateAddOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async addWithHttpOperationResponse(certificate: Models.CertificateAddParameter, options?: Models.CertificateAddOptionalParams): Promise<Models.CertificateAddResponse> {
    let client = this.client;
    let certificateAddOptions = (options && options.certificateAddOptions !== undefined) ? options.certificateAddOptions : undefined;
    // Validate
    try {
      if (certificate === null || certificate === undefined) {
        throw new Error('certificate cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateAddOptions !== null && certificateAddOptions !== undefined)
      {
        timeout = certificateAddOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (certificateAddOptions !== null && certificateAddOptions !== undefined)
      {
        clientRequestId = certificateAddOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateAddOptions !== null && certificateAddOptions !== undefined)
      {
        returnClientRequestId = certificateAddOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateAddOptions !== null && certificateAddOptions !== undefined)
      {
        ocpDate = certificateAddOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          certificate,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "certificates",
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.CertificateAddParameter,
          requestBodyName: "certificate",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 201) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 201) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateAddHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified
   * account.
   *
   * @param {CertificateListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(options?: Models.CertificateListOptionalParams): Promise<Models.CertificateListResponse> {
    let client = this.client;
    let certificateListOptions = (options && options.certificateListOptions !== undefined) ? options.certificateListOptions : undefined;
    // Validate
    try {
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let select: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        filter = certificateListOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        select = certificateListOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        maxResults = certificateListOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        timeout = certificateListOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        clientRequestId = certificateListOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        returnClientRequestId = certificateListOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateListOptions !== null && certificateListOptions !== undefined)
      {
        ocpDate = certificateListOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          filter,
          select,
          maxResults,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "certificates",
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "filter",
              mapper: {
                serializedName: "$filter",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "select",
              mapper: {
                serializedName: "$select",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "maxResults",
              mapper: {
                serializedName: "maxresults",
                defaultValue: 1000,
                constraints: {
                  InclusiveMaximum: 1000,
                  InclusiveMinimum: 1
                },
                type: {
                  name: "Number"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.CertificateListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Cancels a failed deletion of a certificate from the specified
   * account.
   *
   * If you try to delete a certificate that is being used by a pool or compute
   * node, the status of the certificate changes to deleteFailed. If you decide
   * that you want to continue using the certificate, you can use this operation
   * to set the status of the certificate back to active. If you intend to delete
   * the certificate, you do not need to run this operation after the deletion
   * failed. You must make sure that the certificate is not being used by any
   * resources, and then you can try again to delete the certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate being deleted.
   *
   * @param {CertificateCancelDeletionOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async cancelDeletionWithHttpOperationResponse(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateCancelDeletionOptionalParams): Promise<Models.CertificateCancelDeletionResponse> {
    let client = this.client;
    let certificateCancelDeletionOptions = (options && options.certificateCancelDeletionOptions !== undefined) ? options.certificateCancelDeletionOptions : undefined;
    // Validate
    try {
      if (thumbprintAlgorithm === null || thumbprintAlgorithm === undefined || typeof thumbprintAlgorithm.valueOf() !== 'string') {
        throw new Error('thumbprintAlgorithm cannot be null or undefined and it must be of type string.');
      }
      if (thumbprint === null || thumbprint === undefined || typeof thumbprint.valueOf() !== 'string') {
        throw new Error('thumbprint cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateCancelDeletionOptions !== null && certificateCancelDeletionOptions !== undefined)
      {
        timeout = certificateCancelDeletionOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (certificateCancelDeletionOptions !== null && certificateCancelDeletionOptions !== undefined)
      {
        clientRequestId = certificateCancelDeletionOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateCancelDeletionOptions !== null && certificateCancelDeletionOptions !== undefined)
      {
        returnClientRequestId = certificateCancelDeletionOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateCancelDeletionOptions !== null && certificateCancelDeletionOptions !== undefined)
      {
        ocpDate = certificateCancelDeletionOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          thumbprintAlgorithm,
          thumbprint,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})/canceldelete",
          urlParameters: [
            {
              parameterName: "thumbprintAlgorithm",
              mapper: {
                required: true,
                serializedName: "thumbprintAlgorithm",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "thumbprint",
              mapper: {
                required: true,
                serializedName: "thumbprint",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 204) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 204) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateCancelDeletionHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes a certificate from the specified account.
   *
   * You cannot delete a certificate if a resource (pool or compute node) is
   * using it. Before you can delete a certificate, you must therefore make sure
   * that the certificate is not associated with any existing pools, the
   * certificate is not installed on any compute nodes (even if you remove a
   * certificate from a pool, it is not removed from existing compute nodes in
   * that pool until they restart), and no running tasks depend on the
   * certificate. If you try to delete a certificate that is in use, the deletion
   * fails. The certificate status changes to deleteFailed. You can use Cancel
   * Delete Certificate to set the status back to active if you decide that you
   * want to continue using the certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate to be deleted.
   *
   * @param {CertificateDeleteMethodOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteMethodWithHttpOperationResponse(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateDeleteMethodOptionalParams): Promise<Models.CertificateDeleteResponse> {
    let client = this.client;
    let certificateDeleteMethodOptions = (options && options.certificateDeleteMethodOptions !== undefined) ? options.certificateDeleteMethodOptions : undefined;
    // Validate
    try {
      if (thumbprintAlgorithm === null || thumbprintAlgorithm === undefined || typeof thumbprintAlgorithm.valueOf() !== 'string') {
        throw new Error('thumbprintAlgorithm cannot be null or undefined and it must be of type string.');
      }
      if (thumbprint === null || thumbprint === undefined || typeof thumbprint.valueOf() !== 'string') {
        throw new Error('thumbprint cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateDeleteMethodOptions !== null && certificateDeleteMethodOptions !== undefined)
      {
        timeout = certificateDeleteMethodOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (certificateDeleteMethodOptions !== null && certificateDeleteMethodOptions !== undefined)
      {
        clientRequestId = certificateDeleteMethodOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateDeleteMethodOptions !== null && certificateDeleteMethodOptions !== undefined)
      {
        returnClientRequestId = certificateDeleteMethodOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateDeleteMethodOptions !== null && certificateDeleteMethodOptions !== undefined)
      {
        ocpDate = certificateDeleteMethodOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          thumbprintAlgorithm,
          thumbprint,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "DELETE",
          baseUrl: this.client.baseUri,
          path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
          urlParameters: [
            {
              parameterName: "thumbprintAlgorithm",
              mapper: {
                required: true,
                serializedName: "thumbprintAlgorithm",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "thumbprint",
              mapper: {
                required: true,
                serializedName: "thumbprint",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 202) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateDeleteHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * Gets information about the specified certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate to get.
   *
   * @param {CertificateGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateGetOptionalParams): Promise<Models.CertificateGetResponse> {
    let client = this.client;
    let certificateGetOptions = (options && options.certificateGetOptions !== undefined) ? options.certificateGetOptions : undefined;
    // Validate
    try {
      if (thumbprintAlgorithm === null || thumbprintAlgorithm === undefined || typeof thumbprintAlgorithm.valueOf() !== 'string') {
        throw new Error('thumbprintAlgorithm cannot be null or undefined and it must be of type string.');
      }
      if (thumbprint === null || thumbprint === undefined || typeof thumbprint.valueOf() !== 'string') {
        throw new Error('thumbprint cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let select: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateGetOptions !== null && certificateGetOptions !== undefined)
      {
        select = certificateGetOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (certificateGetOptions !== null && certificateGetOptions !== undefined)
      {
        timeout = certificateGetOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (certificateGetOptions !== null && certificateGetOptions !== undefined)
      {
        clientRequestId = certificateGetOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateGetOptions !== null && certificateGetOptions !== undefined)
      {
        returnClientRequestId = certificateGetOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateGetOptions !== null && certificateGetOptions !== undefined)
      {
        ocpDate = certificateGetOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          thumbprintAlgorithm,
          thumbprint,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          select,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "certificates(thumbprintAlgorithm={thumbprintAlgorithm},thumbprint={thumbprint})",
          urlParameters: [
            {
              parameterName: "thumbprintAlgorithm",
              mapper: {
                required: true,
                serializedName: "thumbprintAlgorithm",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "thumbprint",
              mapper: {
                required: true,
                serializedName: "thumbprint",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "select",
              mapper: {
                serializedName: "$select",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.Certificate;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateGetHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified
   * account.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {CertificateListNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: Models.CertificateListNextOptionalParams): Promise<Models.CertificateListResponse> {
    let client = this.client;
    let certificateListNextOptions = (options && options.certificateListNextOptions !== undefined) ? options.certificateListNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (certificateListNextOptions !== null && certificateListNextOptions !== undefined)
      {
        clientRequestId = certificateListNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (certificateListNextOptions !== null && certificateListNextOptions !== undefined)
      {
        returnClientRequestId = certificateListNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (certificateListNextOptions !== null && certificateListNextOptions !== undefined)
      {
        ocpDate = certificateListNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://batch.core.windows.net",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterName: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.CertificateListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.CertificateListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Adds a certificate to the specified account.
   *
   * @param {CertificateAddParameter} certificate The certificate to be added.
   *
   * @param {CertificateAddOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  add(certificate: Models.CertificateAddParameter): Promise<void>;
  add(certificate: Models.CertificateAddParameter, options: Models.CertificateAddOptionalParams): Promise<void>;
  add(certificate: Models.CertificateAddParameter, callback: msRest.ServiceCallback<void>): void;
  add(certificate: Models.CertificateAddParameter, options: Models.CertificateAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(certificate: Models.CertificateAddParameter, options?: Models.CertificateAddOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.addWithHttpOperationResponse(certificate, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.addWithHttpOperationResponse(certificate, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified
   * account.
   *
   * @param {CertificateListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CertificateListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(): Promise<Models.CertificateListResult>;
  list(options: Models.CertificateListOptionalParams): Promise<Models.CertificateListResult>;
  list(callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  list(options: Models.CertificateListOptionalParams, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  list(options?: Models.CertificateListOptionalParams, callback?: msRest.ServiceCallback<Models.CertificateListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CertificateListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.CertificateListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.CertificateListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Cancels a failed deletion of a certificate from the specified
   * account.
   *
   * If you try to delete a certificate that is being used by a pool or compute
   * node, the status of the certificate changes to deleteFailed. If you decide
   * that you want to continue using the certificate, you can use this operation
   * to set the status of the certificate back to active. If you intend to delete
   * the certificate, you do not need to run this operation after the deletion
   * failed. You must make sure that the certificate is not being used by any
   * resources, and then you can try again to delete the certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate being deleted.
   *
   * @param {CertificateCancelDeletionOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string): Promise<void>;
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateCancelDeletionOptionalParams): Promise<void>;
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<void>): void;
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateCancelDeletionOptionalParams, callback: msRest.ServiceCallback<void>): void;
  cancelDeletion(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateCancelDeletionOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.cancelDeletionWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.cancelDeletionWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Deletes a certificate from the specified account.
   *
   * You cannot delete a certificate if a resource (pool or compute node) is
   * using it. Before you can delete a certificate, you must therefore make sure
   * that the certificate is not associated with any existing pools, the
   * certificate is not installed on any compute nodes (even if you remove a
   * certificate from a pool, it is not removed from existing compute nodes in
   * that pool until they restart), and no running tasks depend on the
   * certificate. If you try to delete a certificate that is in use, the deletion
   * fails. The certificate status changes to deleteFailed. You can use Cancel
   * Delete Certificate to set the status back to active if you decide that you
   * want to continue using the certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate to be deleted.
   *
   * @param {CertificateDeleteMethodOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string): Promise<void>;
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateDeleteMethodOptionalParams): Promise<void>;
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateDeleteMethodOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteMethodWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteMethodWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * Gets information about the specified certificate.
   *
   * @param {string} thumbprintAlgorithm The algorithm used to derive the
   * thumbprint parameter. This must be sha1.
   *
   * @param {string} thumbprint The thumbprint of the certificate to get.
   *
   * @param {CertificateGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.Certificate} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.Certificate} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(thumbprintAlgorithm: string, thumbprint: string): Promise<Models.Certificate>;
  get(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateGetOptionalParams): Promise<Models.Certificate>;
  get(thumbprintAlgorithm: string, thumbprint: string, callback: msRest.ServiceCallback<Models.Certificate>): void;
  get(thumbprintAlgorithm: string, thumbprint: string, options: Models.CertificateGetOptionalParams, callback: msRest.ServiceCallback<Models.Certificate>): void;
  get(thumbprintAlgorithm: string, thumbprint: string, options?: Models.CertificateGetOptionalParams, callback?: msRest.ServiceCallback<Models.Certificate>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.Certificate>;
    if (!callback) {
      return this.getWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.Certificate);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(thumbprintAlgorithm, thumbprint, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.Certificate;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Lists all of the certificates that have been added to the specified
   * account.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {CertificateListNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.CertificateListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.CertificateListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.CertificateListResult>;
  listNext(nextPageLink: string, options: Models.CertificateListNextOptionalParams): Promise<Models.CertificateListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  listNext(nextPageLink: string, options: Models.CertificateListNextOptionalParams, callback: msRest.ServiceCallback<Models.CertificateListResult>): void;
  listNext(nextPageLink: string, options?: Models.CertificateListNextOptionalParams, callback?: msRest.ServiceCallback<Models.CertificateListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.CertificateListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.CertificateListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.CertificateListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

}
