/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/mappers";
import { BatchServiceClientContext } from "../batchServiceClientContext";

const WebResource = msRest.WebResource;

/** Class representing a ComputeNodeOperations. */
export class ComputeNodeOperations {
  private readonly client: BatchServiceClientContext;
  /**
   * Create a ComputeNodeOperations.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Adds a user account to the specified compute node.
   *
   * You can add a user account to a node only when it is in the idle or running
   * state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to create a
   * user account.
   *
   * @param {ComputeNodeUser} user The user account to be created.
   *
   * @param {ComputeNodeAddUserOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async addUserWithHttpOperationResponse(poolId: string, nodeId: string, user: Models.ComputeNodeUser, options?: Models.ComputeNodeAddUserOptionalParams): Promise<Models.ComputeNodeAddUserResponse> {
    let client = this.client;
    let computeNodeAddUserOptions = (options && options.computeNodeAddUserOptions !== undefined) ? options.computeNodeAddUserOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (user === null || user === undefined) {
        throw new Error('user cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
      {
        timeout = computeNodeAddUserOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
      {
        clientRequestId = computeNodeAddUserOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
      {
        returnClientRequestId = computeNodeAddUserOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeAddUserOptions !== null && computeNodeAddUserOptions !== undefined)
      {
        ocpDate = computeNodeAddUserOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          user,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/users",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.ComputeNodeUser,
          requestBodyName: "user",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 201) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 201) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeAddUserHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Deletes a user account from the specified compute node.
   *
   * You can delete a user account to a node only when it is in the idle or
   * running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to delete a
   * user account.
   *
   * @param {string} userName The name of the user account to delete.
   *
   * @param {ComputeNodeDeleteUserOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async deleteUserWithHttpOperationResponse(poolId: string, nodeId: string, userName: string, options?: Models.ComputeNodeDeleteUserOptionalParams): Promise<Models.ComputeNodeDeleteUserResponse> {
    let client = this.client;
    let computeNodeDeleteUserOptions = (options && options.computeNodeDeleteUserOptions !== undefined) ? options.computeNodeDeleteUserOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (userName === null || userName === undefined || typeof userName.valueOf() !== 'string') {
        throw new Error('userName cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
      {
        timeout = computeNodeDeleteUserOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
      {
        clientRequestId = computeNodeDeleteUserOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
      {
        returnClientRequestId = computeNodeDeleteUserOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeDeleteUserOptions !== null && computeNodeDeleteUserOptions !== undefined)
      {
        ocpDate = computeNodeDeleteUserOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          userName,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "DELETE",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/users/{userName}",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "userName",
              mapper: {
                required: true,
                serializedName: "userName",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeDeleteUserHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Updates the password and expiration time of a user account on the
   * specified compute node.
   *
   * This operation replaces of all the updateable properties of the account. For
   * example, if the expiryTime element is not specified, the current value is
   * replaced with the default value, not left unmodified. You can update a user
   * account on a node only when it is in the idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to update a
   * user account.
   *
   * @param {string} userName The name of the user account to update.
   *
   * @param {NodeUpdateUserParameter} nodeUpdateUserParameter The parameters for
   * the request.
   *
   * @param {ComputeNodeUpdateUserOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async updateUserWithHttpOperationResponse(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter, options?: Models.ComputeNodeUpdateUserOptionalParams): Promise<Models.ComputeNodeUpdateUserResponse> {
    let client = this.client;
    let computeNodeUpdateUserOptions = (options && options.computeNodeUpdateUserOptions !== undefined) ? options.computeNodeUpdateUserOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (userName === null || userName === undefined || typeof userName.valueOf() !== 'string') {
        throw new Error('userName cannot be null or undefined and it must be of type string.');
      }
      if (nodeUpdateUserParameter === null || nodeUpdateUserParameter === undefined) {
        throw new Error('nodeUpdateUserParameter cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
      {
        timeout = computeNodeUpdateUserOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
      {
        clientRequestId = computeNodeUpdateUserOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
      {
        returnClientRequestId = computeNodeUpdateUserOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeUpdateUserOptions !== null && computeNodeUpdateUserOptions !== undefined)
      {
        ocpDate = computeNodeUpdateUserOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          userName,
          nodeUpdateUserParameter,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "PUT",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/users/{userName}",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "userName",
              mapper: {
                required: true,
                serializedName: "userName",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.NodeUpdateUserParameter,
          requestBodyName: "nodeUpdateUserParameter",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeUpdateUserHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets information about the specified compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to get
   * information about.
   *
   * @param {ComputeNodeGetOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeGetOptionalParams): Promise<Models.ComputeNodeGetResponse> {
    let client = this.client;
    let computeNodeGetOptions = (options && options.computeNodeGetOptions !== undefined) ? options.computeNodeGetOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let select: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
      {
        select = computeNodeGetOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
      {
        timeout = computeNodeGetOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
      {
        clientRequestId = computeNodeGetOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
      {
        returnClientRequestId = computeNodeGetOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeGetOptions !== null && computeNodeGetOptions !== undefined)
      {
        ocpDate = computeNodeGetOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          select,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "select",
              mapper: {
                serializedName: "$select",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ComputeNode;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeGetHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Restarts the specified compute node.
   *
   * You can restart a node only if it is in an idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {ComputeNodeRebootOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async rebootWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeRebootOptionalParams): Promise<Models.ComputeNodeRebootResponse> {
    let client = this.client;
    let nodeRebootParameter = (options && options.nodeRebootParameter !== undefined) ? options.nodeRebootParameter : undefined;
    let computeNodeRebootOptions = (options && options.computeNodeRebootOptions !== undefined) ? options.computeNodeRebootOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
      {
        timeout = computeNodeRebootOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
      {
        clientRequestId = computeNodeRebootOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
      {
        returnClientRequestId = computeNodeRebootOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeRebootOptions !== null && computeNodeRebootOptions !== undefined)
      {
        ocpDate = computeNodeRebootOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          nodeRebootParameter,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/reboot",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.NodeRebootParameter,
          requestBodyName: "nodeRebootParameter",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 202) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeRebootHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Reinstalls the operating system on the specified compute node.
   *
   * You can reinstall the operating system on a node only if it is in an idle or
   * running state. This API can be invoked only on pools created with the cloud
   * service configuration property.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {ComputeNodeReimageOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async reimageWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeReimageOptionalParams): Promise<Models.ComputeNodeReimageResponse> {
    let client = this.client;
    let nodeReimageParameter = (options && options.nodeReimageParameter !== undefined) ? options.nodeReimageParameter : undefined;
    let computeNodeReimageOptions = (options && options.computeNodeReimageOptions !== undefined) ? options.computeNodeReimageOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
      {
        timeout = computeNodeReimageOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
      {
        clientRequestId = computeNodeReimageOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
      {
        returnClientRequestId = computeNodeReimageOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeReimageOptions !== null && computeNodeReimageOptions !== undefined)
      {
        ocpDate = computeNodeReimageOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          nodeReimageParameter,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/reimage",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.NodeReimageParameter,
          requestBodyName: "nodeReimageParameter",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 202) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 202) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeReimageHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Disables task scheduling on the specified compute node.
   *
   * You can disable task scheduling on a node only if its current scheduling
   * state is enabled.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * disable task scheduling.
   *
   * @param {ComputeNodeDisableSchedulingOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async disableSchedulingWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeDisableSchedulingOptionalParams): Promise<Models.ComputeNodeDisableSchedulingResponse> {
    let client = this.client;
    let nodeDisableSchedulingParameter = (options && options.nodeDisableSchedulingParameter !== undefined) ? options.nodeDisableSchedulingParameter : undefined;
    let computeNodeDisableSchedulingOptions = (options && options.computeNodeDisableSchedulingOptions !== undefined) ? options.computeNodeDisableSchedulingOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
      {
        timeout = computeNodeDisableSchedulingOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
      {
        clientRequestId = computeNodeDisableSchedulingOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
      {
        returnClientRequestId = computeNodeDisableSchedulingOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeDisableSchedulingOptions !== null && computeNodeDisableSchedulingOptions !== undefined)
      {
        ocpDate = computeNodeDisableSchedulingOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          nodeDisableSchedulingParameter,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/disablescheduling",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.NodeDisableSchedulingParameter,
          requestBodyName: "nodeDisableSchedulingParameter",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeDisableSchedulingHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Enables task scheduling on the specified compute node.
   *
   * You can enable task scheduling on a node only if its current scheduling
   * state is disabled
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * enable task scheduling.
   *
   * @param {ComputeNodeEnableSchedulingOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async enableSchedulingWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeEnableSchedulingOptionalParams): Promise<Models.ComputeNodeEnableSchedulingResponse> {
    let client = this.client;
    let computeNodeEnableSchedulingOptions = (options && options.computeNodeEnableSchedulingOptions !== undefined) ? options.computeNodeEnableSchedulingOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
      {
        timeout = computeNodeEnableSchedulingOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
      {
        clientRequestId = computeNodeEnableSchedulingOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
      {
        returnClientRequestId = computeNodeEnableSchedulingOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeEnableSchedulingOptions !== null && computeNodeEnableSchedulingOptions !== undefined)
      {
        ocpDate = computeNodeEnableSchedulingOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/enablescheduling",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeEnableSchedulingHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets the settings required for remote login to a compute node.
   *
   * Before you can remotely login to a node using the remote login settings, you
   * must create a user account on the node. This API can be invoked only on
   * pools created with the virtual machine configuration property. For pools
   * created with a cloud service configuration, see the GetRemoteDesktop API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which to obtain the
   * remote login settings.
   *
   * @param {ComputeNodeGetRemoteLoginSettingsOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getRemoteLoginSettingsWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeGetRemoteLoginSettingsOptionalParams): Promise<Models.ComputeNodeGetRemoteLoginSettingsResponse> {
    let client = this.client;
    let computeNodeGetRemoteLoginSettingsOptions = (options && options.computeNodeGetRemoteLoginSettingsOptions !== undefined) ? options.computeNodeGetRemoteLoginSettingsOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
      {
        timeout = computeNodeGetRemoteLoginSettingsOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
      {
        clientRequestId = computeNodeGetRemoteLoginSettingsOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
      {
        returnClientRequestId = computeNodeGetRemoteLoginSettingsOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeGetRemoteLoginSettingsOptions !== null && computeNodeGetRemoteLoginSettingsOptions !== undefined)
      {
        ocpDate = computeNodeGetRemoteLoginSettingsOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/remoteloginsettings",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ComputeNodeGetRemoteLoginSettingsResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeGetRemoteLoginSettingsHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Gets the Remote Desktop Protocol file for the specified compute
   * node.
   *
   * Before you can access a node by using the RDP file, you must create a user
   * account on the node. This API can only be invoked on pools created with a
   * cloud service configuration. For pools created with a virtual machine
   * configuration, see the GetRemoteLoginSettings API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which you want to get
   * the Remote Desktop Protocol file.
   *
   * @param {ComputeNodeGetRemoteDesktopOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async getRemoteDesktopWithHttpOperationResponse(poolId: string, nodeId: string, options?: Models.ComputeNodeGetRemoteDesktopOptionalParams): Promise<Models.ComputeNodeGetRemoteDesktopResponse> {
    let client = this.client;
    let computeNodeGetRemoteDesktopOptions = (options && options.computeNodeGetRemoteDesktopOptions !== undefined) ? options.computeNodeGetRemoteDesktopOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
      {
        timeout = computeNodeGetRemoteDesktopOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
      {
        clientRequestId = computeNodeGetRemoteDesktopOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
      {
        returnClientRequestId = computeNodeGetRemoteDesktopOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeGetRemoteDesktopOptions !== null && computeNodeGetRemoteDesktopOptions !== undefined)
      {
        ocpDate = computeNodeGetRemoteDesktopOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    httpRequest.rawResponse = true;
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/rdp",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;

      if (statusCode !== 200) {
        let error = new msRest.RestError(`Unexpected status code: ${statusCode}`);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }

        return Promise.reject(error);
      }

    } catch(error) {
      return Promise.reject(error);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Upload Azure Batch service log files from the specified compute
   * node to Azure Blob Storage.
   *
   * This is for gathering Azure Batch service log files in an automated fashion
   * from nodes if you are experiencing an error and wish to escalate to Azure
   * support. The Azure Batch service log files should be shared with Azure
   * support to aid in debugging issues with the Batch service.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * upload the Azure Batch service log files.
   *
   * @param {UploadBatchServiceLogsConfiguration}
   * uploadBatchServiceLogsConfiguration The Azure Batch service log files upload
   * configuration.
   *
   * @param {ComputeNodeUploadBatchServiceLogsOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async uploadBatchServiceLogsWithHttpOperationResponse(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration, options?: Models.ComputeNodeUploadBatchServiceLogsOptionalParams): Promise<Models.ComputeNodeUploadBatchServiceLogsResponse> {
    let client = this.client;
    let computeNodeUploadBatchServiceLogsOptions = (options && options.computeNodeUploadBatchServiceLogsOptions !== undefined) ? options.computeNodeUploadBatchServiceLogsOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
        throw new Error('nodeId cannot be null or undefined and it must be of type string.');
      }
      if (uploadBatchServiceLogsConfiguration === null || uploadBatchServiceLogsConfiguration === undefined) {
        throw new Error('uploadBatchServiceLogsConfiguration cannot be null or undefined.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
      {
        timeout = computeNodeUploadBatchServiceLogsOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
      {
        clientRequestId = computeNodeUploadBatchServiceLogsOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
      {
        returnClientRequestId = computeNodeUploadBatchServiceLogsOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeUploadBatchServiceLogsOptions !== null && computeNodeUploadBatchServiceLogsOptions !== undefined)
      {
        ocpDate = computeNodeUploadBatchServiceLogsOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          nodeId,
          uploadBatchServiceLogsConfiguration,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "POST",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes/{nodeId}/uploadbatchservicelogs",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "nodeId",
              mapper: {
                required: true,
                serializedName: "nodeId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ],
          requestBodyMapper: Mappers.UploadBatchServiceLogsConfiguration,
          requestBodyName: "uploadBatchServiceLogsConfiguration",
          contentType: "application/json; odata=minimalmetadata; charset=utf-8"
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.UploadBatchServiceLogsResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeUploadBatchServiceLogsHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} poolId The ID of the pool from which you want to list nodes.
   *
   * @param {ComputeNodeListOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listWithHttpOperationResponse(poolId: string, options?: Models.ComputeNodeListOptionalParams): Promise<Models.ComputeNodeListResponse> {
    let client = this.client;
    let computeNodeListOptions = (options && options.computeNodeListOptions !== undefined) ? options.computeNodeListOptions : undefined;
    // Validate
    try {
      if (poolId === null || poolId === undefined || typeof poolId.valueOf() !== 'string') {
        throw new Error('poolId cannot be null or undefined and it must be of type string.');
      }
      if (this.client.apiVersion === null || this.client.apiVersion === undefined || typeof this.client.apiVersion.valueOf() !== 'string') {
        throw new Error('this.client.apiVersion cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let filter: any;
    let select: any;
    let maxResults: any;
    let timeout: any;
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        filter = computeNodeListOptions.filter;
        if (filter !== null && filter !== undefined && typeof filter.valueOf() !== 'string') {
          throw new Error('filter must be of type string.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        select = computeNodeListOptions.select;
        if (select !== null && select !== undefined && typeof select.valueOf() !== 'string') {
          throw new Error('select must be of type string.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        maxResults = computeNodeListOptions.maxResults;
        if (maxResults !== null && maxResults !== undefined && typeof maxResults !== 'number') {
          throw new Error('maxResults must be of type number.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        timeout = computeNodeListOptions.timeout;
        if (timeout !== null && timeout !== undefined && typeof timeout !== 'number') {
          throw new Error('timeout must be of type number.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        clientRequestId = computeNodeListOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        returnClientRequestId = computeNodeListOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeListOptions !== null && computeNodeListOptions !== undefined)
      {
        ocpDate = computeNodeListOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          poolId,
          "this.client.apiVersion": this.client.apiVersion,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          filter,
          select,
          maxResults,
          timeout,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: this.client.baseUri,
          path: "pools/{poolId}/nodes",
          urlParameters: [
            {
              parameterName: "poolId",
              mapper: {
                required: true,
                serializedName: "poolId",
                type: {
                  name: "String"
                }
              }
            }
          ],
          queryParameters: [
            {
              parameterName: "this.client.apiVersion",
              mapper: {
                required: true,
                serializedName: "api-version",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "filter",
              mapper: {
                serializedName: "$filter",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "select",
              mapper: {
                serializedName: "$select",
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "maxResults",
              mapper: {
                serializedName: "maxresults",
                defaultValue: 1000,
                constraints: {
                  InclusiveMaximum: 1000,
                  InclusiveMinimum: 1
                },
                type: {
                  name: "Number"
                }
              }
            },
            {
              parameterName: "timeout",
              mapper: {
                serializedName: "timeout",
                defaultValue: 30,
                type: {
                  name: "Number"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ComputeNodeListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {ComputeNodeListNextOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  async listNextWithHttpOperationResponse(nextPageLink: string, options?: Models.ComputeNodeListNextOptionalParams): Promise<Models.ComputeNodeListResponse> {
    let client = this.client;
    let computeNodeListNextOptions = (options && options.computeNodeListNextOptions !== undefined) ? options.computeNodeListNextOptions : undefined;
    // Validate
    try {
      if (nextPageLink === null || nextPageLink === undefined || typeof nextPageLink.valueOf() !== 'string') {
        throw new Error('nextPageLink cannot be null or undefined and it must be of type string.');
      }
      if (this.client.acceptLanguage !== null && this.client.acceptLanguage !== undefined && typeof this.client.acceptLanguage.valueOf() !== 'string') {
        throw new Error('this.client.acceptLanguage must be of type string.');
      }
    } catch (error) {
      return Promise.reject(error);
    }
    let clientRequestId: any;
    let returnClientRequestId: any;
    let ocpDate: any;
    try {
      if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
      {
        clientRequestId = computeNodeListNextOptions.clientRequestId;
        if (clientRequestId !== null && clientRequestId !== undefined && !(typeof clientRequestId.valueOf() === 'string' && msRest.isValidUuid(clientRequestId))) {
          throw new Error('clientRequestId must be of type string and must be a valid string.');
        }
      }
      if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
      {
        returnClientRequestId = computeNodeListNextOptions.returnClientRequestId;
        if (returnClientRequestId !== null && returnClientRequestId !== undefined && typeof returnClientRequestId !== 'boolean') {
          throw new Error('returnClientRequestId must be of type boolean.');
        }
      }
      if (computeNodeListNextOptions !== null && computeNodeListNextOptions !== undefined)
      {
        ocpDate = computeNodeListNextOptions.ocpDate;
        if (ocpDate && !(ocpDate instanceof Date ||
            (typeof (ocpDate as string).valueOf() === 'string' && !isNaN(Date.parse(ocpDate as string))))) {
              throw new Error('ocpDate must be of type date.');
            }
      }
    } catch (error) {
      return Promise.reject(error);
    }

    // Create HTTP transport objects
    const httpRequest = new WebResource();
    let operationRes: msRest.HttpOperationResponse;
    try {
      const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
          nextPageLink,
          "this.client.acceptLanguage": this.client.acceptLanguage,
          clientRequestId,
          returnClientRequestId,
          ocpDate
        },
        options);
      operationRes = await client.sendOperationRequest(
        httpRequest,
        operationArguments,
        {
          httpMethod: "GET",
          baseUrl: "https://batch.core.windows.net",
          path: "{nextLink}",
          urlParameters: [
            {
              parameterName: "nextPageLink",
              skipEncoding: true,
              mapper: {
                required: true,
                serializedName: "nextLink",
                type: {
                  name: "String"
                }
              }
            }
          ],
          headerParameters: [
            {
              parameterName: "this.client.acceptLanguage",
              mapper: {
                serializedName: "accept-language",
                defaultValue: 'en-US',
                type: {
                  name: "String"
                }
              }
            },
            {
              parameterName: "clientRequestId",
              mapper: {
                serializedName: "client-request-id",
                type: {
                  name: "Uuid"
                }
              }
            },
            {
              parameterName: "returnClientRequestId",
              mapper: {
                serializedName: "return-client-request-id",
                defaultValue: false,
                type: {
                  name: "Boolean"
                }
              }
            },
            {
              parameterName: "ocpDate",
              mapper: {
                serializedName: "ocp-date",
                type: {
                  name: "DateTimeRfc1123"
                }
              }
            }
          ]
        });
      let statusCode = operationRes.status;
      if (statusCode !== 200) {
        let error = new msRest.RestError(operationRes.bodyAsText as string);
        error.statusCode = operationRes.status;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(operationRes);
        let parsedErrorResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedErrorResponse) {
            let internalError = null;
            if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
            error.code = internalError ? internalError.code : parsedErrorResponse.code;
            error.message = internalError ? internalError.message : parsedErrorResponse.message;
          }
          if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
            const resultMapper = Mappers.BatchError;
            error.body = client.serializer.deserialize(resultMapper, parsedErrorResponse, 'error.body');
          }
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                           `- "${operationRes.bodyAsText}" for the default response.`;
          return Promise.reject(error);
        }
        return Promise.reject(error);
      }
      // Deserialize Response
      if (statusCode === 200) {
        let parsedResponse = operationRes.parsedBody as { [key: string]: any };
        try {
          if (parsedResponse !== null && parsedResponse !== undefined) {
            const resultMapper = Mappers.ComputeNodeListResult;
            operationRes.parsedBody = client.serializer.deserialize(resultMapper, parsedResponse, 'operationRes.parsedBody');
          }
        } catch (error) {
          let deserializationError = new msRest.RestError(`Error ${error} occurred in deserializing the responseBody - ${operationRes.bodyAsText}`);
          deserializationError.request = msRest.stripRequest(httpRequest);
          deserializationError.response = msRest.stripResponse(operationRes);
          return Promise.reject(deserializationError);
        }
        operationRes.parsedHeaders = client.serializer.deserialize(Mappers.ComputeNodeListHeaders, operationRes.headers.rawHeaders(), 'operationRes.parsedBody');
      }

    } catch(err) {
      return Promise.reject(err);
    }

    return Promise.resolve(operationRes);
  }

  /**
   * @summary Adds a user account to the specified compute node.
   *
   * You can add a user account to a node only when it is in the idle or running
   * state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to create a
   * user account.
   *
   * @param {ComputeNodeUser} user The user account to be created.
   *
   * @param {ComputeNodeAddUserOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  addUser(poolId: string, nodeId: string, user: Models.ComputeNodeUser): Promise<void>;
  addUser(poolId: string, nodeId: string, user: Models.ComputeNodeUser, options: Models.ComputeNodeAddUserOptionalParams): Promise<void>;
  addUser(poolId: string, nodeId: string, user: Models.ComputeNodeUser, callback: msRest.ServiceCallback<void>): void;
  addUser(poolId: string, nodeId: string, user: Models.ComputeNodeUser, options: Models.ComputeNodeAddUserOptionalParams, callback: msRest.ServiceCallback<void>): void;
  addUser(poolId: string, nodeId: string, user: Models.ComputeNodeUser, options?: Models.ComputeNodeAddUserOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.addUserWithHttpOperationResponse(poolId, nodeId, user, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.addUserWithHttpOperationResponse(poolId, nodeId, user, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Deletes a user account from the specified compute node.
   *
   * You can delete a user account to a node only when it is in the idle or
   * running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to delete a
   * user account.
   *
   * @param {string} userName The name of the user account to delete.
   *
   * @param {ComputeNodeDeleteUserOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteUser(poolId: string, nodeId: string, userName: string): Promise<void>;
  deleteUser(poolId: string, nodeId: string, userName: string, options: Models.ComputeNodeDeleteUserOptionalParams): Promise<void>;
  deleteUser(poolId: string, nodeId: string, userName: string, callback: msRest.ServiceCallback<void>): void;
  deleteUser(poolId: string, nodeId: string, userName: string, options: Models.ComputeNodeDeleteUserOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteUser(poolId: string, nodeId: string, userName: string, options?: Models.ComputeNodeDeleteUserOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.deleteUserWithHttpOperationResponse(poolId, nodeId, userName, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.deleteUserWithHttpOperationResponse(poolId, nodeId, userName, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Updates the password and expiration time of a user account on the
   * specified compute node.
   *
   * This operation replaces of all the updateable properties of the account. For
   * example, if the expiryTime element is not specified, the current value is
   * replaced with the default value, not left unmodified. You can update a user
   * account on a node only when it is in the idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the machine on which you want to update a
   * user account.
   *
   * @param {string} userName The name of the user account to update.
   *
   * @param {NodeUpdateUserParameter} nodeUpdateUserParameter The parameters for
   * the request.
   *
   * @param {ComputeNodeUpdateUserOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter): Promise<void>;
  updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter, options: Models.ComputeNodeUpdateUserOptionalParams): Promise<void>;
  updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter, callback: msRest.ServiceCallback<void>): void;
  updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter, options: Models.ComputeNodeUpdateUserOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateUser(poolId: string, nodeId: string, userName: string, nodeUpdateUserParameter: Models.NodeUpdateUserParameter, options?: Models.ComputeNodeUpdateUserOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.updateUserWithHttpOperationResponse(poolId, nodeId, userName, nodeUpdateUserParameter, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.updateUserWithHttpOperationResponse(poolId, nodeId, userName, nodeUpdateUserParameter, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Gets information about the specified compute node.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to get
   * information about.
   *
   * @param {ComputeNodeGetOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ComputeNode} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ComputeNode} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  get(poolId: string, nodeId: string): Promise<Models.ComputeNode>;
  get(poolId: string, nodeId: string, options: Models.ComputeNodeGetOptionalParams): Promise<Models.ComputeNode>;
  get(poolId: string, nodeId: string, callback: msRest.ServiceCallback<Models.ComputeNode>): void;
  get(poolId: string, nodeId: string, options: Models.ComputeNodeGetOptionalParams, callback: msRest.ServiceCallback<Models.ComputeNode>): void;
  get(poolId: string, nodeId: string, options?: Models.ComputeNodeGetOptionalParams, callback?: msRest.ServiceCallback<Models.ComputeNode>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ComputeNode>;
    if (!callback) {
      return this.getWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ComputeNode);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ComputeNode;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Restarts the specified compute node.
   *
   * You can restart a node only if it is in an idle or running state.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {ComputeNodeRebootOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  reboot(poolId: string, nodeId: string): Promise<void>;
  reboot(poolId: string, nodeId: string, options: Models.ComputeNodeRebootOptionalParams): Promise<void>;
  reboot(poolId: string, nodeId: string, callback: msRest.ServiceCallback<void>): void;
  reboot(poolId: string, nodeId: string, options: Models.ComputeNodeRebootOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reboot(poolId: string, nodeId: string, options?: Models.ComputeNodeRebootOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.rebootWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.rebootWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Reinstalls the operating system on the specified compute node.
   *
   * You can reinstall the operating system on a node only if it is in an idle or
   * running state. This API can be invoked only on pools created with the cloud
   * service configuration property.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node that you want to restart.
   *
   * @param {ComputeNodeReimageOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  reimage(poolId: string, nodeId: string): Promise<void>;
  reimage(poolId: string, nodeId: string, options: Models.ComputeNodeReimageOptionalParams): Promise<void>;
  reimage(poolId: string, nodeId: string, callback: msRest.ServiceCallback<void>): void;
  reimage(poolId: string, nodeId: string, options: Models.ComputeNodeReimageOptionalParams, callback: msRest.ServiceCallback<void>): void;
  reimage(poolId: string, nodeId: string, options?: Models.ComputeNodeReimageOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.reimageWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.reimageWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Disables task scheduling on the specified compute node.
   *
   * You can disable task scheduling on a node only if its current scheduling
   * state is enabled.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * disable task scheduling.
   *
   * @param {ComputeNodeDisableSchedulingOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  disableScheduling(poolId: string, nodeId: string): Promise<void>;
  disableScheduling(poolId: string, nodeId: string, options: Models.ComputeNodeDisableSchedulingOptionalParams): Promise<void>;
  disableScheduling(poolId: string, nodeId: string, callback: msRest.ServiceCallback<void>): void;
  disableScheduling(poolId: string, nodeId: string, options: Models.ComputeNodeDisableSchedulingOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableScheduling(poolId: string, nodeId: string, options?: Models.ComputeNodeDisableSchedulingOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.disableSchedulingWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.disableSchedulingWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Enables task scheduling on the specified compute node.
   *
   * You can enable task scheduling on a node only if its current scheduling
   * state is disabled
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node on which you want to
   * enable task scheduling.
   *
   * @param {ComputeNodeEnableSchedulingOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {void} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  enableScheduling(poolId: string, nodeId: string): Promise<void>;
  enableScheduling(poolId: string, nodeId: string, options: Models.ComputeNodeEnableSchedulingOptionalParams): Promise<void>;
  enableScheduling(poolId: string, nodeId: string, callback: msRest.ServiceCallback<void>): void;
  enableScheduling(poolId: string, nodeId: string, options: Models.ComputeNodeEnableSchedulingOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableScheduling(poolId: string, nodeId: string, options?: Models.ComputeNodeEnableSchedulingOptionalParams, callback?: msRest.ServiceCallback<void>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<void>;
    if (!callback) {
      return this.enableSchedulingWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as void);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.enableSchedulingWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as void;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Gets the settings required for remote login to a compute node.
   *
   * Before you can remotely login to a node using the remote login settings, you
   * must create a user account on the node. This API can be invoked only on
   * pools created with the virtual machine configuration property. For pools
   * created with a cloud service configuration, see the GetRemoteDesktop API.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node for which to obtain the
   * remote login settings.
   *
   * @param {ComputeNodeGetRemoteLoginSettingsOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ComputeNodeGetRemoteLoginSettingsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      Models.ComputeNodeGetRemoteLoginSettingsResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getRemoteLoginSettings(poolId: string, nodeId: string): Promise<Models.ComputeNodeGetRemoteLoginSettingsResult>;
  getRemoteLoginSettings(poolId: string, nodeId: string, options: Models.ComputeNodeGetRemoteLoginSettingsOptionalParams): Promise<Models.ComputeNodeGetRemoteLoginSettingsResult>;
  getRemoteLoginSettings(poolId: string, nodeId: string, callback: msRest.ServiceCallback<Models.ComputeNodeGetRemoteLoginSettingsResult>): void;
  getRemoteLoginSettings(poolId: string, nodeId: string, options: Models.ComputeNodeGetRemoteLoginSettingsOptionalParams, callback: msRest.ServiceCallback<Models.ComputeNodeGetRemoteLoginSettingsResult>): void;
  getRemoteLoginSettings(poolId: string, nodeId: string, options?: Models.ComputeNodeGetRemoteLoginSettingsOptionalParams, callback?: msRest.ServiceCallback<Models.ComputeNodeGetRemoteLoginSettingsResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ComputeNodeGetRemoteLoginSettingsResult>;
    if (!callback) {
      return this.getRemoteLoginSettingsWithHttpOperationResponse(poolId, nodeId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ComputeNodeGetRemoteLoginSettingsResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.getRemoteLoginSettingsWithHttpOperationResponse(poolId, nodeId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ComputeNodeGetRemoteLoginSettingsResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Upload Azure Batch service log files from the specified compute
   * node to Azure Blob Storage.
   *
   * This is for gathering Azure Batch service log files in an automated fashion
   * from nodes if you are experiencing an error and wish to escalate to Azure
   * support. The Azure Batch service log files should be shared with Azure
   * support to aid in debugging issues with the Batch service.
   *
   * @param {string} poolId The ID of the pool that contains the compute node.
   *
   * @param {string} nodeId The ID of the compute node from which you want to
   * upload the Azure Batch service log files.
   *
   * @param {UploadBatchServiceLogsConfiguration}
   * uploadBatchServiceLogsConfiguration The Azure Batch service log files upload
   * configuration.
   *
   * @param {ComputeNodeUploadBatchServiceLogsOptionalParams} [options] Optional
   * Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.UploadBatchServiceLogsResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.UploadBatchServiceLogsResult} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  uploadBatchServiceLogs(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration): Promise<Models.UploadBatchServiceLogsResult>;
  uploadBatchServiceLogs(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration, options: Models.ComputeNodeUploadBatchServiceLogsOptionalParams): Promise<Models.UploadBatchServiceLogsResult>;
  uploadBatchServiceLogs(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration, callback: msRest.ServiceCallback<Models.UploadBatchServiceLogsResult>): void;
  uploadBatchServiceLogs(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration, options: Models.ComputeNodeUploadBatchServiceLogsOptionalParams, callback: msRest.ServiceCallback<Models.UploadBatchServiceLogsResult>): void;
  uploadBatchServiceLogs(poolId: string, nodeId: string, uploadBatchServiceLogsConfiguration: Models.UploadBatchServiceLogsConfiguration, options?: Models.ComputeNodeUploadBatchServiceLogsOptionalParams, callback?: msRest.ServiceCallback<Models.UploadBatchServiceLogsResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.UploadBatchServiceLogsResult>;
    if (!callback) {
      return this.uploadBatchServiceLogsWithHttpOperationResponse(poolId, nodeId, uploadBatchServiceLogsConfiguration, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.UploadBatchServiceLogsResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.uploadBatchServiceLogsWithHttpOperationResponse(poolId, nodeId, uploadBatchServiceLogsConfiguration, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.UploadBatchServiceLogsResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} poolId The ID of the pool from which you want to list nodes.
   *
   * @param {ComputeNodeListOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ComputeNodeListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ComputeNodeListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  list(poolId: string): Promise<Models.ComputeNodeListResult>;
  list(poolId: string, options: Models.ComputeNodeListOptionalParams): Promise<Models.ComputeNodeListResult>;
  list(poolId: string, callback: msRest.ServiceCallback<Models.ComputeNodeListResult>): void;
  list(poolId: string, options: Models.ComputeNodeListOptionalParams, callback: msRest.ServiceCallback<Models.ComputeNodeListResult>): void;
  list(poolId: string, options?: Models.ComputeNodeListOptionalParams, callback?: msRest.ServiceCallback<Models.ComputeNodeListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ComputeNodeListResult>;
    if (!callback) {
      return this.listWithHttpOperationResponse(poolId, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ComputeNodeListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listWithHttpOperationResponse(poolId, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ComputeNodeListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

  /**
   * @summary Lists the compute nodes in the specified pool.
   *
   * @param {string} nextPageLink The NextLink from the previous successful call
   * to List operation.
   *
   * @param {ComputeNodeListNextOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback - The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Models.ComputeNodeListResult} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.ComputeNodeListResult} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  listNext(nextPageLink: string): Promise<Models.ComputeNodeListResult>;
  listNext(nextPageLink: string, options: Models.ComputeNodeListNextOptionalParams): Promise<Models.ComputeNodeListResult>;
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ComputeNodeListResult>): void;
  listNext(nextPageLink: string, options: Models.ComputeNodeListNextOptionalParams, callback: msRest.ServiceCallback<Models.ComputeNodeListResult>): void;
  listNext(nextPageLink: string, options?: Models.ComputeNodeListNextOptionalParams, callback?: msRest.ServiceCallback<Models.ComputeNodeListResult>): any {
    if (!callback && typeof options === 'function') {
      callback = options;
      options = undefined;
    }
    let cb = callback as msRest.ServiceCallback<Models.ComputeNodeListResult>;
    if (!callback) {
      return this.listNextWithHttpOperationResponse(nextPageLink, options).then((operationRes: msRest.HttpOperationResponse) => {
        return Promise.resolve(operationRes.parsedBody as Models.ComputeNodeListResult);
      }).catch((err: Error) => {
        return Promise.reject(err);
      });
    } else {
      msRest.promiseToCallback(this.listNextWithHttpOperationResponse(nextPageLink, options))((err: Error, data: msRest.HttpOperationResponse) => {
        if (err) {
          return cb(err);
        }
        let result = data.parsedBody as Models.ComputeNodeListResult;
        return cb(err, result, data.request, data);
      });
    }
  }

}
